[   0.000][v][cplayer] Command line options: '--force-window' '/home/zen/Downloads/Video/FSDSS-125.mkv'
[   0.000][v][cplayer] mpv v0.40.0-dirty Copyright ¬© 2000-2025 mpv/MPlayer/mplayer2 projects
[   0.000][v][cplayer]  built on Apr  4 2025 07:37:47
[   0.000][v][cplayer] libplacebo version: v7.349.0
[   0.000][v][cplayer] FFmpeg version: n7.1 (runtime n7.1.1)
[   0.000][v][cplayer] FFmpeg library versions:
[   0.000][v][cplayer]    libavcodec      61.19.100 (runtime 61.19.101)
[   0.000][v][cplayer]    libavdevice     61.3.100
[   0.000][v][cplayer]    libavfilter     10.4.100
[   0.000][v][cplayer]    libavformat     61.7.100
[   0.000][v][cplayer]    libavutil       59.39.100
[   0.000][v][cplayer]    libswresample   5.3.100
[   0.000][v][cplayer]    libswscale      8.3.100
[   0.000][v][cplayer] Configuration: -Db_pie=true -Dpython.bytecompile=1 -Dlibmpv=true -Dgl-x11=enabled -Dcaca=disabled -Dcdda=enabled -Ddrm=enabled -Ddvbin=enabled -Ddvdnav=enabled -Dlibarchive=enabled -Dopenal=enabled -Dprefix=/usr -Dlibexecdir=lib -Dsbindir=bin -Dauto_features=auto -Dbuildtype=plain -Dwrap_mode=nodownload
[   0.000][v][cplayer] List of enabled features: alsa build-date cdda cplugins cuda-hwaccel cuda-interop dmabuf-interop-gl dmabuf-wayland drm dvbin dvdnav egl egl-drm egl-wayland egl-x11 ffmpeg ffnvcodec gbm gl gl-x11 glibc-thread-name glob glob-posix gpl iconv jack javascript jpeg lcms2 libarchive libass libavdevice libbluray libdl libplacebo linux-fstatfs luajit memfd-create memrchr openal pipewire posix posix-shm ppoll pthread-condattr-setclock pulse rubberband rubberband-3 sixel uchardet vaapi vaapi-drm vaapi-wayland vaapi-x11 vapoursynth vdpau vdpau-gl-x11 vector vk-khr-display vt.h vulkan wayland wayland-protocols-1-32 wayland-protocols-1-38 wayland-protocols-1-39 wayland-protocols-1-41 x11 xv zimg zimg-st428 zlib
[   0.000][d][global] home path: '' -> '/home/zen/.config/mpv'
[   0.000][d][global] user path: '~~home/' -> '/home/zen/.config/mpv'
[   0.000][d][global] user path: '~~old_home/' -> '/home/zen/.mpv'
[   0.000][d][global] config path: 'encoding-profiles.conf' -/-> '/home/zen/.config/mpv/encoding-profiles.conf'
[   0.000][d][global] config path: 'encoding-profiles.conf' -/-> '/home/zen/.mpv/encoding-profiles.conf'
[   0.000][d][global] config path: 'encoding-profiles.conf' -> '/etc/mpv/encoding-profiles.conf'
[   0.000][v][cplayer] Reading config file /etc/mpv/encoding-profiles.conf
[   0.000][v][ifo_dvdnav] Opening /etc/mpv/encoding-profiles.conf
[   0.000][v][bdmv/bluray] Opening /etc/mpv/encoding-profiles.conf
[   0.000][v][file] Opening /etc/mpv/encoding-profiles.conf
[   0.000][d][file] resize stream to 131072 bytes, drop 0 bytes
[   0.000][d][file] Stream opened successfully.
[   0.000][v][cplayer] Applying profile 'default'...
[   0.000][d][global] config path: 'mpv.conf' -> '/home/zen/.config/mpv/mpv.conf'
[   0.000][d][global] config path: 'config' -/-> '/home/zen/.config/mpv/config'
[   0.000][d][global] config path: 'mpv.conf' -/-> '/home/zen/.mpv/mpv.conf'
[   0.000][d][global] config path: 'config' -/-> '/home/zen/.mpv/config'
[   0.000][d][global] config path: 'mpv.conf' -/-> '/etc/mpv/mpv.conf'
[   0.000][d][global] config path: 'config' -/-> '/etc/mpv/config'
[   0.000][v][cplayer] Reading config file /home/zen/.config/mpv/mpv.conf
[   0.000][v][ifo_dvdnav] Opening /home/zen/.config/mpv/mpv.conf
[   0.000][v][bdmv/bluray] Opening /home/zen/.config/mpv/mpv.conf
[   0.000][v][file] Opening /home/zen/.config/mpv/mpv.conf
[   0.000][d][file] resize stream to 131072 bytes, drop 0 bytes
[   0.000][d][file] Stream opened successfully.
[   0.000][v][cplayer] Applying profile 'default'...
[   0.000][v][cplayer] Setting option 'sub-auto' = 'fuzzy' (flags = 4)
[   0.000][v][cplayer] Setting option 'fullscreen' = 'yes' (flags = 4)
[   0.000][v][cplayer] Setting option 'volume-max' = '200' (flags = 4)
[   0.000][v][cplayer] Setting option 'volume' = '180' (flags = 4)
[   0.000][v][cplayer] Setting option 'sub-font' = 'Noto Sans CJK JP Thin' (flags = 4)
[   0.000][v][cplayer] Setting option 'slang' = 'Jpn,ja,jp,jpn,jap,Japanese,en,eng,English,en,eng,English' (flags = 4)
[   0.000][v][cplayer] Setting option 'alang' = 'Jpn,ja,jp,jpn,jap,Japanese,en,eng,English' (flags = 4)
[   0.000][v][cplayer] Setting option 'sub-blur' = '0.5' (flags = 4)
[   0.000][v][cplayer] Setting option 'sub-font-size' = '36' (flags = 4)
[   0.000][v][cplayer] Setting option 'sub-color' = '#FFFFFFFF' (flags = 4)
[   0.000][v][cplayer] Setting option 'sub-border-color' = '#FF262626' (flags = 4)
[   0.000][v][cplayer] Setting option 'sub-border-size' = '1.5' (flags = 4)
[   0.000][v][cplayer] Setting option 'sub-shadow-offset' = '1' (flags = 4)
[   0.000][v][cplayer] Setting option 'sub-shadow-color' = '#33000000' (flags = 4)
[   0.000][v][cplayer] Setting option 'sub-spacing' = '0.5' (flags = 4)
[   0.000][v][cplayer] Setting option 'sub-ass-override' = 'force' (flags = 4)
[   0.000][v][cplayer] Setting option 'clipboard-backends' = 'vo' (flags = 4)
[   0.000][v][cplayer] Setting option 'vo' = 'gpu-next' (flags = 4)
[   0.000][v][cplayer] Setting option 'gpu-api' = 'vulkan' (flags = 4)
[   0.000][v][cplayer] Setting option 'hwdec' = 'no' (flags = 4)
[   0.000][v][cplayer] Setting option 'title' = '${?pause==yes:‚è∏}${?mute==yes:üîá}${?ontop==yes:üìå}${?demuxer-via-network==yes:${media-title}}${?demuxer-via-network==no:${filename}}' (flags = 4)
[   0.000][v][cplayer] Setting option 'osc' = 'no' (flags = 4)
[   0.000][v][cplayer] Setting option 'title-bar' = 'no' (flags = 4)
[   0.000][v][cplayer] Setting option 'autofit-smaller' = '40%x30%' (flags = 4)
[   0.000][v][cplayer] Setting option 'idle' = 'yes' (flags = 4)
[   0.000][v][cplayer] Setting option 'log-file' = '~~/files/mpv.log' (flags = 4)
[   0.000][v][cplayer] Setting option 'ontop' = '' (flags = 4)
[   0.000][v][cplayer] Setting option 'snap-window' = 'yes' (flags = 4)
[   0.000][v][cplayer] Setting option 'hr-seek' = 'yes' (flags = 4)
[   0.000][v][cplayer] Setting option 'hr-seek-framedrop' = 'no' (flags = 4)
[   0.000][v][cplayer] Setting option 'save-position-on-quit' = 'yes' (flags = 4)
[   0.000][v][cplayer] Setting option 'write-filename-in-watch-later-config' = '' (flags = 4)
[   0.000][v][cplayer] Setting option 'resume-playback-check-mtime' = 'yes' (flags = 4)
[   0.000][v][cplayer] Setting option 'watch-later-dir' = '~~/cache/watch_later' (flags = 4)
[   0.000][v][cplayer] Setting option 'watch-later-options' = 'start,vid,aid,sid' (flags = 4)
[   0.000][v][cplayer] Setting option 'reset-on-next-file' = 'vid,aid,sid,secondary-sid,vf,af,loop-file,deinterlace,contrast,brightness,gamma,saturation,hue,video-zoom,video-rotate,video-pan-x,video-pan-y,panscan,speed,audio-delay,sub-pos,sub-scale,sub-delay,sub-speed,sub-visibility,secondary-sub-visibility' (flags = 4)
[   0.000][v][cplayer] Setting option 'input-ipc-server' = '/tmp/mpvsocket' (flags = 4)
[   0.000][v][cplayer] Setting option 'directory-mode' = 'ignore' (flags = 4)
[   0.000][v][cplayer] Setting option 'metadata-codepage' = 'auto' (flags = 4)
[   0.000][v][cplayer] Setting option 'msg-level' = 'all=info' (flags = 4)
[   0.000][v][cplayer] Setting option 'osd-bar' = 'no' (flags = 4)
[   0.000][v][cplayer] Setting option 'osd-on-seek' = 'msg-bar' (flags = 4)
[   0.000][v][cplayer] Setting option 'osd-bar-w' = '100' (flags = 4)
[   0.000][v][cplayer] Setting option 'osd-bar-h' = '2' (flags = 4)
[   0.000][v][cplayer] Setting option 'osd-bar-align-y' = '-1' (flags = 4)
[   0.000][v][cplayer] Setting option 'osd-font' = 'Noto Emoji' (flags = 4)
[   0.000][v][cplayer] Setting option 'osd-font-size' = '24' (flags = 4)
[   0.000][v][cplayer] Setting option 'osd-color' = '#FFFFFFFF' (flags = 4)
[   0.000][v][cplayer] Setting option 'osd-outline-size' = '1.0' (flags = 4)
[   0.000][v][cplayer] Setting option 'osd-outline-color' = '#FF000000' (flags = 4)
[   0.000][v][cplayer] Setting option 'osd-shadow-offset' = '0.5' (flags = 4)
[   0.000][v][cplayer] Setting option 'osd-shadow-color' = '#FF000000' (flags = 4)
[   0.000][v][cplayer] Setting option 'osd-border-style' = 'outline-and-shadow' (flags = 4)
[   0.000][v][cplayer] Setting option 'osd-playlist-entry' = 'filename' (flags = 4)
[   0.000][v][cplayer] Setting option 'osd-status-msg' = '${playback-time/full} / ${duration/full} (${percent-pos}%)\nframe: ${estimated-frame-number} / ${estimated-frame-count}' (flags = 4)
[   0.000][v][cplayer] Setting option 'osd-fractions' = 'yes' (flags = 4)
[   0.000][v][cplayer] Setting option 'osd-duration' = '2000' (flags = 4)
[   0.000][v][cplayer] Setting option 'audio-device' = 'auto' (flags = 4)
[   0.000][v][cplayer] Setting option 'audio-channels' = '7.1,5.1,stereo' (flags = 4)
[   0.000][v][cplayer] Setting option 'ao' = 'alsa' (flags = 4)
[   0.000][v][cplayer] Setting option 'gapless-audio' = 'no' (flags = 4)
[   0.000][v][cplayer] Setting option 'audio-file-auto' = 'fuzzy' (flags = 4)
[   0.000][v][cplayer] Setting option 'audio-file-paths' = 'audio;audios;**' (flags = 4)
[   0.000][v][cplayer] Setting option 'alang' = 'english,eng,en,german,ger,de,deu,japanese,jpn,jap,ja,jp,chs,sc,zh-CN,zh-Hans,cht,tc,zh-Hant,zh-HK,zh-TW,chi,zho,zh' (flags = 4)
[   0.000][v][cplayer] Setting option 'sub-codepage' = 'gb18030' (flags = 4)
[   0.000][v][cplayer] Setting option 'sub-auto' = 'fuzzy' (flags = 4)
[   0.000][v][cplayer] Setting option 'sub-file-paths' = '**' (flags = 4)
[   0.000][v][cplayer] Setting option 'screenshot-format' = 'webp' (flags = 4)
[   0.000][v][cplayer] Setting option 'screenshot-webp-quality' = '85' (flags = 4)
[   0.000][v][cplayer] Setting option 'screenshot-webp-compression' = '6' (flags = 4)
[   0.000][v][cplayer] Setting option 'screenshot-tag-colorspace' = 'no' (flags = 4)
[   0.000][v][cplayer] Setting option 'screenshot-template' = '~~/files/screen/%{media-title}-%P-%n' (flags = 4)
[   0.000][v][cplayer] Setting option 'gpu-shader-cache-dir' = '~~/cache/shaders_cache' (flags = 4)
[   0.000][v][cplayer] Setting option 'input-default-bindings' = 'no' (flags = 4)
[   0.000][v][cplayer] Setting option 'libplacebo-opts' = 'tone_map_metadata=cie_y' (flags = 4)
[   0.000][v][cplayer] Setting option 'profile' = 'Target' (flags = 4)
[   0.000][v][cplayer] Applying profile 'Target'...
[   0.000][v][cplayer] Setting option 'icc-profile' = '' (flags = 4)
[   0.000][v][cplayer] Setting option 'icc-profile-auto' = 'no' (flags = 4)
[   0.000][v][cplayer] Setting option 'target-prim' = 'auto' (flags = 4)
[   0.000][v][cplayer] Setting option 'target-trc' = 'gamma2.2' (flags = 4)
[   0.000][v][cplayer] Setting option 'target-contrast' = 'auto' (flags = 4)
[   0.000][v][cplayer] Setting option 'target-peak' = 'auto' (flags = 4)
[   0.000][v][cplayer] Setting option 'profile' = 'Dither' (flags = 4)
[   0.000][v][cplayer] Applying profile 'Dither'...
[   0.000][v][cplayer] Setting option 'dither-depth' = 'auto' (flags = 4)
[   0.000][v][cplayer] Setting option 'dither' = 'fruit' (flags = 4)
[   0.000][v][cplayer] Setting option 'dither-size-fruit' = '6' (flags = 4)
[   0.000][v][cplayer] Setting option 'profile' = 'Tscale' (flags = 4)
[   0.000][v][cplayer] Applying profile 'Tscale'...
[   0.000][v][cplayer] Setting option 'video-sync' = 'display-resample' (flags = 4)
[   0.000][v][cplayer] Setting option 'interpolation' = '' (flags = 4)
[   0.000][v][cplayer] Setting option 'tscale' = 'oversample' (flags = 4)
[   0.000][v][cplayer] Setting option 'profile' = 'HQ' (flags = 4)
[   0.000][v][cplayer] Applying profile 'HQ'...
[   0.000][v][cplayer] Setting option 'scale' = 'ewa_hanning' (flags = 4)
[   0.000][v][cplayer] Setting option 'cscale' = 'bilinear' (flags = 4)
[   0.000][v][cplayer] Setting option 'dscale' = 'catmull_rom' (flags = 4)
[   0.000][v][cplayer] Setting option 'scale-antiring' = '0.5' (flags = 4)
[   0.000][v][cplayer] Setting option 'dscale-antiring' = '0.5' (flags = 4)
[   0.000][v][cplayer] Setting option 'linear-upscaling' = 'no' (flags = 4)
[   0.000][v][cplayer] Setting option 'sigmoid-upscaling' = 'yes' (flags = 4)
[   0.000][v][cplayer] Setting option 'correct-downscaling' = 'yes' (flags = 4)
[   0.000][v][cplayer] Setting option 'linear-downscaling' = 'no' (flags = 4)
[   0.000][v][cplayer] Setting option 'deband' = 'no' (flags = 4)
[   0.000][v][cplayer] Setting option 'profile' = 'DeBand-low' (flags = 4)
[   0.000][v][cplayer] Applying profile 'DeBand-low'...
[   0.000][v][cplayer] Setting option 'deband-iterations' = '1' (flags = 4)
[   0.000][v][cplayer] Setting option 'deband-threshold' = '48' (flags = 4)
[   0.000][v][cplayer] Setting option 'deband-range' = '16' (flags = 4)
[   0.000][v][cplayer] Setting option 'deband-grain' = '16' (flags = 4)
[   0.000][v][cplayer] Setting option 'profile' = 'HDR2SDR' (flags = 4)
[   0.000][v][cplayer] Applying profile 'HDR2SDR'...
[   0.000][v][cplayer] Setting option 'target-colorspace-hint' = 'no' (flags = 4)
[   0.000][v][cplayer] Setting option 'tone-mapping' = 'auto' (flags = 4)
[   0.000][v][cplayer] Setting option 'gamut-mapping-mode' = 'auto' (flags = 4)
[   0.000][v][cplayer] Setting option 'hdr-contrast-recovery' = '0.30' (flags = 4)
[   0.000][v][cplayer] Setting option 'hdr-compute-peak' = 'auto' (flags = 4)
[   0.000][v][cplayer] Setting option 'hdr-peak-percentile' = '99.995' (flags = 4)
[   0.000][v][cplayer] Setting option 'hdr-peak-decay-rate' = '20' (flags = 4)
[   0.000][v][cplayer] Setting option 'hdr-scene-threshold-low' = '1.0' (flags = 4)
[   0.000][v][cplayer] Setting option 'hdr-scene-threshold-high' = '3.0' (flags = 4)
[   0.000][v][cplayer] Setting option 'allow-delayed-peak-detect' = 'no' (flags = 4)
[   0.000][v][cplayer] Setting option 'profile' = 'AMD-FSR_EASU' (flags = 4)
[   0.000][v][cplayer] Applying profile 'AMD-FSR_EASU'...
[   0.000][v][cplayer] Setting option 'glsl-shaders' = '~~/shaders/igv/KrigBilateral.glsl:~~/shaders/AMD-FSR/AMD-FSR-EASU_rgb.glsl:~~/shaders/igv/SSimDownscaler.glsl' (flags = 4)
[   0.000][v][cplayer] Setting option 'force-window' = '' (flags = 8)
[   0.000][d][global] config path: 'input.conf' -> '/home/zen/.config/mpv/input.conf'
[   0.000][d][global] config path: 'input.conf' -/-> '/home/zen/.mpv/input.conf'
[   0.000][d][global] config path: 'input.conf' -/-> '/etc/mpv/input.conf'
[   0.000][v][ifo_dvdnav] Opening /home/zen/.config/mpv/input.conf
[   0.000][v][bdmv/bluray] Opening /home/zen/.config/mpv/input.conf
[   0.000][v][file] Opening /home/zen/.config/mpv/input.conf
[   0.000][d][file] resize stream to 131072 bytes, drop 0 bytes
[   0.000][d][file] Stream opened successfully.
[   0.000][v][input] Parsing input config file /home/zen/.config/mpv/input.conf
[   0.000][v][input] Input config file /home/zen/.config/mpv/input.conf parsed: 228 binds
[   0.000][d][global] config path: 'files/mpv.log' -> '/home/zen/.config/mpv/files/mpv.log'
[   0.000][d][global] user path: '~~/files/mpv.log' -> '/home/zen/.config/mpv/files/mpv.log'
[   0.005][v][cplayer] mpv v0.40.0-dirty Copyright ¬© 2000-2025 mpv/MPlayer/mplayer2 projects
[   0.005][v][cplayer]  built on Apr  4 2025 07:37:47
[   0.005][v][cplayer] libplacebo version: v7.349.0
[   0.005][v][cplayer] FFmpeg version: n7.1 (runtime n7.1.1)
[   0.005][v][cplayer] FFmpeg library versions:
[   0.005][v][cplayer]    libavcodec      61.19.100 (runtime 61.19.101)
[   0.005][v][cplayer]    libavdevice     61.3.100
[   0.005][v][cplayer]    libavfilter     10.4.100
[   0.005][v][cplayer]    libavformat     61.7.100
[   0.005][v][cplayer]    libavutil       59.39.100
[   0.005][v][cplayer]    libswresample   5.3.100
[   0.005][v][cplayer]    libswscale      8.3.100
[   0.005][v][cplayer] Configuration: -Db_pie=true -Dpython.bytecompile=1 -Dlibmpv=true -Dgl-x11=enabled -Dcaca=disabled -Dcdda=enabled -Ddrm=enabled -Ddvbin=enabled -Ddvdnav=enabled -Dlibarchive=enabled -Dopenal=enabled -Dprefix=/usr -Dlibexecdir=lib -Dsbindir=bin -Dauto_features=auto -Dbuildtype=plain -Dwrap_mode=nodownload
[   0.005][v][cplayer] List of enabled features: alsa build-date cdda cplugins cuda-hwaccel cuda-interop dmabuf-interop-gl dmabuf-wayland drm dvbin dvdnav egl egl-drm egl-wayland egl-x11 ffmpeg ffnvcodec gbm gl gl-x11 glibc-thread-name glob glob-posix gpl iconv jack javascript jpeg lcms2 libarchive libass libavdevice libbluray libdl libplacebo linux-fstatfs luajit memfd-create memrchr openal pipewire posix posix-shm ppoll pthread-condattr-setclock pulse rubberband rubberband-3 sixel uchardet vaapi vaapi-drm vaapi-wayland vaapi-x11 vapoursynth vdpau vdpau-gl-x11 vector vk-khr-display vt.h vulkan wayland wayland-protocols-1-32 wayland-protocols-1-38 wayland-protocols-1-39 wayland-protocols-1-41 x11 xv zimg zimg-st428 zlib
[   0.005][d][ytdl_hook] Loading lua script @ytdl_hook.lua...
[   0.005][d][stats] Loading lua script @stats.lua...
[   0.005][d][console] Loading lua script @console.lua...
[   0.005][d][auto_profiles] Loading lua script @auto_profiles.lua...
[   0.005][d][select] Loading lua script @select.lua...
[   0.005][d][stats] loading mp.defaults
[   0.005][d][ytdl_hook] loading mp.defaults
[   0.005][d][positioning] Loading lua script @positioning.lua...
[   0.005][d][commands] Loading lua script @commands.lua...
[   0.005][d][console] loading mp.defaults
[   0.005][v][clipboard] Initialized vo clipboard backend.
[   0.005][d][auto_profiles] loading mp.defaults
[   0.005][d][select] loading mp.defaults
[   0.005][d][positioning] loading mp.defaults
[   0.005][d][global] config path: 'scripts' -> '/home/zen/.config/mpv/scripts'
[   0.005][d][global] config path: 'scripts' -/-> '/home/zen/.mpv/scripts'
[   0.005][d][global] config path: 'scripts' -> '/etc/mpv/scripts'
[   0.005][d][commands] loading mp.defaults
[   0.005][v][ipc] Starting IPC master
[   0.005][v][ipc] Listening to IPC socket.
[   0.005][d][mpris] Loading cplugin script /etc/mpv/scripts/mpris.so...
[   0.005][d][fuzzydir] Loading lua script /home/zen/.config/mpv/scripts/fuzzydir.lua...
[   0.006][d][ytdl_hook] loading @ytdl_hook.lua
[   0.006][d][stats] loading @stats.lua
[   0.006][d][console] loading @console.lua
[   0.006][d][auto_profiles] loading @auto_profiles.lua
[   0.006][d][select] loading @select.lua
[   0.006][d][positioning] loading @positioning.lua
[   0.006][d][commands] loading @commands.lua
[   0.006][d][positioning] reading options for positioning
[   0.006][d][global] config path: 'script-opts/positioning.conf' -/-> '/home/zen/.config/mpv/script-opts/positioning.conf'
[   0.006][d][global] config path: 'script-opts/positioning.conf' -/-> '/home/zen/.mpv/script-opts/positioning.conf'
[   0.006][d][global] config path: 'script-opts/positioning.conf' -/-> '/etc/mpv/script-opts/positioning.conf'
[   0.006][d][positioning] script-opts/positioning.conf not found.
[   0.006][d][global] config path: 'lua-settings/positioning.conf' -/-> '/home/zen/.config/mpv/lua-settings/positioning.conf'
[   0.006][d][global] config path: 'lua-settings/positioning.conf' -/-> '/home/zen/.mpv/lua-settings/positioning.conf'
[   0.006][d][global] config path: 'lua-settings/positioning.conf' -/-> '/etc/mpv/lua-settings/positioning.conf'
[   0.006][d][positioning] lua-settings/positioning.conf not found.
[   0.006][d][chapterskip] Loading lua script /home/zen/.config/mpv/scripts/chapterskip.lua...
[   0.006][d][fuzzydir] loading mp.defaults
[   0.006][d][ytdl_hook] reading options for ytdl_hook
[   0.006][d][global] config path: 'script-opts/ytdl_hook.conf' -> '/home/zen/.config/mpv/script-opts/ytdl_hook.conf'
[   0.006][v][ytdl_hook] Opened config file script-opts/ytdl_hook.conf.
[   0.006][d][select] reading options for select
[   0.006][d][global] config path: 'script-opts/select.conf' -> '/home/zen/.config/mpv/script-opts/select.conf'
[   0.006][v][select] Opened config file script-opts/select.conf.
[   0.007][d][undoredo] Loading lua script /home/zen/.config/mpv/scripts/undoredo.lua...
[   0.007][d][mpv_animated] Loading lua script /home/zen/.config/mpv/scripts/mpv-animated.lua...
[   0.007][d][autoload] Loading lua script /home/zen/.config/mpv/scripts/autoload.lua...
[   0.007][d][chapterskip] loading mp.defaults
[   0.007][d][chapter_make_read] Loading lua script /home/zen/.config/mpv/scripts/chapter-make-read.lua...
[   0.007][d][undoredo] loading mp.defaults
[   0.007][d][recentmenu] Loading lua script /home/zen/.config/mpv/scripts/recentmenu.lua...
[   0.007][d][smartcopypaste_II] Loading lua script /home/zen/.config/mpv/scripts/smartcopypaste_II.lua...
[   0.007][d][fuzzydir] loading file /home/zen/.config/mpv/scripts/fuzzydir.lua
[   0.007][d][mpv_animated] loading mp.defaults
[   0.007][d][simplebookmark] Loading lua script /home/zen/.config/mpv/scripts/simplebookmark.lua...
[   0.007][d][recentmenu] loading mp.defaults
[   0.007][d][cycle_commands] Loading lua script /home/zen/.config/mpv/scripts/cycle-commands.lua...
[   0.007][d][persist_properties] Loading lua script /home/zen/.config/mpv/scripts/persist_properties.lua...
[   0.007][d][uosc] Loading lua script /home/zen/.config/mpv/scripts/uosc/main.lua...
[   0.007][d][autoload] loading mp.defaults
[   0.007][d][chapter_make_read] loading mp.defaults
[   0.007][d][fuzzydir] reading options for fuzzydir
[   0.007][d][global] config path: 'script-opts/fuzzydir.conf' -> '/home/zen/.config/mpv/script-opts/fuzzydir.conf'
[   0.007][v][fuzzydir] Opened config file script-opts/fuzzydir.conf.
[   0.007][d][persist_properties] loading mp.defaults
[   0.007][d][stats] reading options for stats
[   0.007][d][global] config path: 'script-opts/stats.conf' -> '/home/zen/.config/mpv/script-opts/stats.conf'
[   0.007][v][stats] Opened config file script-opts/stats.conf.
[   0.007][d][mpv_animated] loading file /home/zen/.config/mpv/scripts/mpv-animated.lua
[   0.008][d][cycle_commands] loading mp.defaults
[   0.008][d][thumbfast] Loading lua script /home/zen/.config/mpv/scripts/thumbfast.lua...
[   0.008][d][simplebookmark] loading mp.defaults
[   0.008][d][autoload] loading file /home/zen/.config/mpv/scripts/autoload.lua
[   0.008][d][chapter_make_read] loading file /home/zen/.config/mpv/scripts/chapter-make-read.lua
[   0.008][d][cycle_commands] loading file /home/zen/.config/mpv/scripts/cycle-commands.lua
[   0.008][d][persist_properties] loading file /home/zen/.config/mpv/scripts/persist_properties.lua
[   0.008][d][undoredo] loading file /home/zen/.config/mpv/scripts/undoredo.lua
[   0.008][d][recentmenu] loading file /home/zen/.config/mpv/scripts/recentmenu.lua
[   0.008][d][chapterskip] loading file /home/zen/.config/mpv/scripts/chapterskip.lua
[   0.008][d][trakt_scrobble] Loading lua script /home/zen/.config/mpv/scripts/trakt-scrobble/main.lua...
[   0.008][d][slicing_copy] Loading lua script /home/zen/.config/mpv/scripts/slicing_copy.lua...
[   0.008][d][smartcopypaste_II] loading mp.defaults
[   0.008][d][uosc] loading mp.defaults
[   0.008][d][trakt_scrobble] loading mp.defaults
[   0.009][d][thumbfast] loading mp.defaults
[   0.009][d][autoload] reading options for autoload
[   0.009][d][global] config path: 'script-opts/autoload.conf' -> '/home/zen/.config/mpv/script-opts/autoload.conf'
[   0.009][v][autoload] Opened config file script-opts/autoload.conf.
[   0.009][d][mpv_animated] reading options for mpv_animated
[   0.009][d][global] config path: 'script-opts/mpv_animated.conf' -> '/home/zen/.config/mpv/script-opts/mpv_animated.conf'
[   0.009][v][mpv_animated] Opened config file script-opts/mpv_animated.conf.
[   0.009][d][simplebookmark] loading file /home/zen/.config/mpv/scripts/simplebookmark.lua
[   0.009][d][chapter_make_read] reading options for chapter_make_read
[   0.009][d][global] config path: 'script-opts/chapter_make_read.conf' -> '/home/zen/.config/mpv/script-opts/chapter_make_read.conf'
[   0.009][v][chapter_make_read] Opened config file script-opts/chapter_make_read.conf.
[   0.009][d][persist_properties] reading options for persist_properties
[   0.009][d][global] config path: 'script-opts/persist_properties.conf' -> '/home/zen/.config/mpv/script-opts/persist_properties.conf'
[   0.009][v][persist_properties] Opened config file script-opts/persist_properties.conf.
[   0.009][d][delete_current_file] Loading lua script /home/zen/.config/mpv/scripts/delete-current-file.lua...
[   0.009][d][smartcopypaste_II] loading file /home/zen/.config/mpv/scripts/smartcopypaste_II.lua
[   0.009][d][uosc] loading file /home/zen/.config/mpv/scripts/uosc/main.lua
[   0.009][d][trakt_scrobble] loading file /home/zen/.config/mpv/scripts/trakt-scrobble/main.lua
[   0.009][d][thumbfast] loading file /home/zen/.config/mpv/scripts/thumbfast.lua
[   0.009][d][blacklist_extensions] Loading lua script /home/zen/.config/mpv/scripts/blacklist-extensions.lua...
[   0.009][d][slicing_copy] loading mp.defaults
[   0.009][d][recentmenu] reading options for recentmenu
[   0.009][d][global] config path: 'script-opts/recentmenu.conf' -> '/home/zen/.config/mpv/script-opts/recentmenu.conf'
[   0.009][v][recentmenu] Opened config file script-opts/recentmenu.conf.
[   0.010][d][trakt_scrobble] reading options for trakt_scrobble
[   0.010][d][global] config path: 'script-opts/trakt_scrobble.conf' -> '/home/zen/.config/mpv/script-opts/trakt_scrobble.conf'
[   0.010][v][trakt_scrobble] Opened config file script-opts/trakt_scrobble.conf.
[   0.010][d][open_dialog] Loading lua script /home/zen/.config/mpv/scripts/open_dialog.lua...
[   0.010][d][delete_current_file] loading mp.defaults
[   0.010][d][autosubsync] Loading lua script /home/zen/.config/mpv/scripts/autosubsync/main.lua...
[   0.010][d][playlistmanager] Loading lua script /home/zen/.config/mpv/scripts/playlistmanager.lua...
[   0.010][d][manager] Loading lua script /home/zen/.config/mpv/scripts/manager.lua...
[   0.010][d][evafast] Loading lua script /home/zen/.config/mpv/scripts/evafast.lua...
[   0.010][d][thumbfast] reading options for thumbfast
[   0.010][d][skiptosilence] Loading lua script /home/zen/.config/mpv/scripts/skiptosilence.lua...
[   0.010][d][global] config path: 'script-opts/thumbfast.conf' -> '/home/zen/.config/mpv/script-opts/thumbfast.conf'
[   0.010][v][thumbfast] Opened config file script-opts/thumbfast.conf.
[   0.010][d][mpv_torrserver] Loading lua script /home/zen/.config/mpv/scripts/mpv-torrserver.lua...
[   0.010][d][quality_menu] Loading lua script /home/zen/.config/mpv/scripts/quality-menu.lua...
[   0.010][d][blacklist_extensions] loading mp.defaults
[   0.010][d][display_name] Loading lua script /home/zen/.config/mpv/scripts/display-name.lua...
[   0.010][d][sub_fastwhisper] Loading lua script /home/zen/.config/mpv/scripts/sub-fastwhisper.lua...
[   0.010][d][inputevent] Loading lua script /home/zen/.config/mpv/scripts/inputevent.lua...
[   0.011][d][slicing_copy] loading file /home/zen/.config/mpv/scripts/slicing_copy.lua
[   0.011][d][autosubsync] loading mp.defaults
[   0.011][d][playlistmanager] loading mp.defaults
[   0.011][d][skiptosilence] loading mp.defaults
[   0.011][d][quality_menu] loading mp.defaults
[   0.012][d][open_dialog] loading mp.defaults
[   0.012][d][playlistmanager] loading file /home/zen/.config/mpv/scripts/playlistmanager.lua
[   0.012][d][skiptosilence] loading file /home/zen/.config/mpv/scripts/skiptosilence.lua
[   0.012][d][quality_menu] loading file /home/zen/.config/mpv/scripts/quality-menu.lua
[   0.012][d][autosubsync] loading file /home/zen/.config/mpv/scripts/autosubsync/main.lua
[   0.012][d][skiptosilence] reading options for skiptosilence
[   0.012][d][global] config path: 'script-opts/skiptosilence.conf' -> '/home/zen/.config/mpv/script-opts/skiptosilence.conf'
[   0.012][v][skiptosilence] Opened config file script-opts/skiptosilence.conf.
[   0.012][d][command_palette] Loading lua script /home/zen/.config/mpv/scripts/command_palette.lua...
[   0.012][d][display_name] loading mp.defaults
[   0.012][d][simplehistory] Loading lua script /home/zen/.config/mpv/scripts/simplehistory.lua...
[   0.012][d][auto_save_state] Loading lua script /home/zen/.config/mpv/scripts/auto-save-state.lua...
[   0.012][d][command_palette] loading mp.defaults
[   0.012][d][smartcopypaste_II] reading options for smartcopypaste_II
[   0.012][d][global] config path: 'script-opts/smartcopypaste_II.conf' -> '/home/zen/.config/mpv/script-opts/smartcopypaste_II.conf'
[   0.012][v][smartcopypaste_II] Opened config file script-opts/smartcopypaste_II.conf.
[   0.012][d][simplehistory] loading mp.defaults
[   0.013][d][quality_menu] reading options for quality-menu
[   0.013][d][global] config path: 'script-opts/quality-menu.conf' -> '/home/zen/.config/mpv/script-opts/quality-menu.conf'
[   0.013][v][quality_menu] Opened config file script-opts/quality-menu.conf.
[   0.013][d][display_name] loading file /home/zen/.config/mpv/scripts/display-name.lua
[   0.013][d][command_palette] loading file /home/zen/.config/mpv/scripts/command_palette.lua
[   0.013][d][sub_fastwhisper] loading mp.defaults
[   0.013][d][open_dialog] loading file /home/zen/.config/mpv/scripts/open_dialog.lua
[   0.014][d][evafast] loading mp.defaults
[   0.014][d][inputevent] loading mp.defaults
[   0.014][d][playlistmanager] reading options for playlistmanager
[   0.014][d][global] config path: 'script-opts/playlistmanager.conf' -> '/home/zen/.config/mpv/script-opts/playlistmanager.conf'
[   0.014][v][playlistmanager] Opened config file script-opts/playlistmanager.conf.
[   0.014][d][delete_current_file] loading file /home/zen/.config/mpv/scripts/delete-current-file.lua
[   0.014][d][manager] loading mp.defaults
[   0.014][d][simplehistory] loading file /home/zen/.config/mpv/scripts/simplehistory.lua
[   0.014][d][evafast] loading file /home/zen/.config/mpv/scripts/evafast.lua
[   0.014][d][open_dialog] reading options for open_dialog
[   0.014][d][global] config path: 'script-opts/open_dialog.conf' -> '/home/zen/.config/mpv/script-opts/open_dialog.conf'
[   0.014][v][open_dialog] Opened config file script-opts/open_dialog.conf.
[   0.014][d][mpv_torrserver] loading mp.defaults
[   0.014][d][inputevent] loading file /home/zen/.config/mpv/scripts/inputevent.lua
[   0.014][d][blacklist_extensions] loading file /home/zen/.config/mpv/scripts/blacklist-extensions.lua
[   0.014][d][autosubsync] reading options for autosubsync
[   0.014][d][global] config path: 'script-opts/autosubsync.conf' -> '/home/zen/.config/mpv/script-opts/autosubsync.conf'
[   0.014][v][autosubsync] Opened config file script-opts/autosubsync.conf.
[   0.014][d][evafast] reading options for evafast
[   0.014][d][global] config path: 'script-opts/evafast.conf' -> '/home/zen/.config/mpv/script-opts/evafast.conf'
[   0.014][v][evafast] Opened config file script-opts/evafast.conf.
[   0.014][d][command_palette] reading options for command_palette
[   0.014][d][global] config path: 'script-opts/command_palette.conf' -> '/home/zen/.config/mpv/script-opts/command_palette.conf'
[   0.014][v][command_palette] Opened config file script-opts/command_palette.conf.
[   0.014][d][blacklist_extensions] reading options for blacklist_extensions
[   0.014][d][global] config path: 'script-opts/blacklist_extensions.conf' -> '/home/zen/.config/mpv/script-opts/blacklist_extensions.conf'
[   0.014][v][blacklist_extensions] Opened config file script-opts/blacklist_extensions.conf.
[   0.014][d][manager] loading file /home/zen/.config/mpv/scripts/manager.lua
[   0.014][v][cplayer] Waiting for scripts...
[   0.014][d][chapterskip] reading options for chapterskip
[   0.014][d][global] config path: 'script-opts/chapterskip.conf' -> '/home/zen/.config/mpv/script-opts/chapterskip.conf'
[   0.014][v][chapterskip] Opened config file script-opts/chapterskip.conf.
[   0.014][d][global] config path: '.' -> '/home/zen/.config/mpv/.'
[   0.014][d][global] config path: 'files/recent.json' -> '/home/zen/.config/mpv/files/recent.json'
[   0.014][d][global] user path: '~~/files/recent.json' -> '/home/zen/.config/mpv/files/recent.json'
[   0.014][d][mpv_torrserver] loading file /home/zen/.config/mpv/scripts/mpv-torrserver.lua
[   0.015][d][sub_fastwhisper] loading file /home/zen/.config/mpv/scripts/sub-fastwhisper.lua
[   0.015][d][cplayer] Run command: define-section, flags=64, args=[name="input_autosubsync", contents="n nonscalable script-binding autosubsync/autosubsync-menu\n", flags="default"]
[   0.015][d][cplayer] Run command: enable-section, flags=64, args=[name="input_autosubsync", flags="allow-hide-cursor+allow-vo-dragging"]
[   0.015][d][cplayer] Run command: script-message, flags=64, args=[args="uosc-version", args="5.8.0"]
[   0.015][d][cplayer] Run command: define-section, flags=64, args=[name="input_undoredo", contents="ctrl+z nonscalable script-binding undoredo/undo\nctrl+Z nonscalable script-binding undoredo/undoCaps\nctrl+y nonscalable script-binding undoredo/redo\nctrl+Y nonscalable script-binding undoredo/redoCaps\nctrl+alt+z nonscalable script-binding undoredo/undoLoop\nctrl+alt+Z nonscalable script-binding undoredo/undoLoopCaps\n", flags="default"]
[   0.015][d][inputevent] reading options for inputevent
[   0.015][d][global] config path: 'script-opts/inputevent.conf' -> '/home/zen/.config/mpv/script-opts/inputevent.conf'
[   0.015][v][inputevent] Opened config file script-opts/inputevent.conf.
[   0.015][d][auto_save_state] loading mp.defaults
[   0.015][d][slicing_copy] reading options for slicing_copy
[   0.015][d][global] config path: 'script-opts/slicing_copy.conf' -> '/home/zen/.config/mpv/script-opts/slicing_copy.conf'
[   0.015][v][slicing_copy] Opened config file script-opts/slicing_copy.conf.
[   0.015][v][cplayer] Set property: user-data/smartcopypaste/menu-open="no" -> 1
[   0.015][d][cplayer] Run command: define-section, flags=64, args=[name="input_manager", contents="", flags="default"]
[   0.015][d][global] config path: '.' -> '/home/zen/.config/mpv/.'
[   0.015][d][cplayer] Run command: define-section, flags=64, args=[name="input_recentmenu", contents="", flags="default"]
[   0.015][d][auto_save_state] loading file /home/zen/.config/mpv/scripts/auto-save-state.lua
[   0.016][d][auto_save_state] reading options for auto_save_state
[   0.016][d][global] config path: 'script-opts/auto_save_state.conf' -> '/home/zen/.config/mpv/script-opts/auto_save_state.conf'
[   0.016][v][auto_save_state] Opened config file script-opts/auto_save_state.conf.
[   0.016][d][mpv_torrserver] reading options for mpv_torrserver
[   0.016][d][global] config path: 'script-opts/mpv_torrserver.conf' -> '/home/zen/.config/mpv/script-opts/mpv_torrserver.conf'
[   0.016][v][mpv_torrserver] Opened config file script-opts/mpv_torrserver.conf.
[   0.016][d][simplebookmark] reading options for simplebookmark
[   0.016][d][global] config path: 'script-opts/simplebookmark.conf' -> '/home/zen/.config/mpv/script-opts/simplebookmark.conf'
[   0.016][v][simplebookmark] Opened config file script-opts/simplebookmark.conf.
[   0.016][d][global] config path: 'files/chapters' -> '/home/zen/.config/mpv/files/chapters'
[   0.016][d][global] user path: '~~/files/chapters' -> '/home/zen/.config/mpv/files/chapters'
[   0.016][d][cplayer] Run command: enable-section, flags=64, args=[name="input_recentmenu", flags="allow-hide-cursor+allow-vo-dragging"]
[   0.016][d][global] config path: 'files/cutfragments' -> '/home/zen/.config/mpv/files/cutfragments'
[   0.016][d][global] user path: '~~/files/cutfragments' -> '/home/zen/.config/mpv/files/cutfragments'
[   0.016][d][global] config path: 'files/animated' -> '/home/zen/.config/mpv/files/animated'
[   0.016][d][global] user path: '~~/files/animated' -> '/home/zen/.config/mpv/files/animated'
[   0.016][d][cplayer] Run command: define-section, flags=64, args=[name="input_forced_autosubsync", contents="", flags="force"]
[   0.016][d][sub_fastwhisper] reading options for sub_fastwhisper
[   0.016][d][global] config path: 'script-opts/sub_fastwhisper.conf' -> '/home/zen/.config/mpv/script-opts/sub_fastwhisper.conf'
[   0.016][v][sub_fastwhisper] Opened config file script-opts/sub_fastwhisper.conf.
[   0.016][v][cplayer] Set property: osc="no" -> 1
[   0.017][d][cplayer] Run command: script-message-to, flags=64, args=[target="uosc", args="get-version", args="quality_menu"]
[   0.017][d][cplayer] Run command: script-message-to, flags=64, args=[target="uosc", args="set", args="vformats", args="0"]
[   0.017][d][cplayer] Run command: script-message-to, flags=64, args=[target="uosc", args="set", args="aformats", args="0"]
[   0.017][d][cplayer] Run command: script-message-to, flags=64, args=[target="uosc", args="overwrite-binding", args="stream-quality", args="script-binding quality_menu/video_formats_toggle"]
[   0.017][d][cplayer] Run command: define-section, flags=64, args=[name="input_skiptosilence", contents="", flags="default"]
[   0.017][d][cplayer] Run command: enable-section, flags=64, args=[name="input_skiptosilence", flags="allow-hide-cursor+allow-vo-dragging"]
[   0.017][d][cplayer] Run command: define-section, flags=64, args=[name="input_forced_skiptosilence", contents="", flags="force"]
[   0.017][d][cplayer] Run command: enable-section, flags=64, args=[name="input_forced_skiptosilence", flags="allow-hide-cursor+allow-vo-dragging"]
[   0.017][d][cplayer] Run command: enable-section, flags=64, args=[name="input_forced_autosubsync", flags="allow-hide-cursor+allow-vo-dragging"]
[   0.017][d][console] reading options for console
[   0.017][d][global] config path: 'script-opts/console.conf' -> '/home/zen/.config/mpv/script-opts/console.conf'
[   0.017][v][console] Opened config file script-opts/console.conf.
[   0.017][w][console] script-opts/console.conf:31 unknown key 'persist_history', ignoring
[   0.017][w][console] script-opts/console.conf:33 unknown key 'history_path', ignoring
[   0.017][d][simplehistory] reading options for simplehistory
[   0.017][d][global] config path: 'script-opts/simplehistory.conf' -> '/home/zen/.config/mpv/script-opts/simplehistory.conf'
[   0.017][v][simplehistory] Opened config file script-opts/simplehistory.conf.
[   0.017][d][commands] reading options for commands
[   0.017][d][global] config path: 'script-opts/commands.conf' -/-> '/home/zen/.config/mpv/script-opts/commands.conf'
[   0.017][d][global] config path: 'script-opts/commands.conf' -/-> '/home/zen/.mpv/script-opts/commands.conf'
[   0.017][d][global] config path: 'script-opts/commands.conf' -/-> '/etc/mpv/script-opts/commands.conf'
[   0.017][d][commands] script-opts/commands.conf not found.
[   0.017][d][global] config path: 'lua-settings/commands.conf' -/-> '/home/zen/.config/mpv/lua-settings/commands.conf'
[   0.017][d][global] config path: 'lua-settings/commands.conf' -/-> '/home/zen/.mpv/lua-settings/commands.conf'
[   0.017][d][global] config path: 'lua-settings/commands.conf' -/-> '/etc/mpv/lua-settings/commands.conf'
[   0.017][d][commands] lua-settings/commands.conf not found.
[   0.017][v][cplayer] Set property: user-data/display_name="" -> 1
[   0.017][d][cplayer] Run command: define-section, flags=64, args=[name="input_select", contents="", flags="default"]
[   0.017][d][global] config path: 'input.conf' -> '/home/zen/.config/mpv/input.conf'
[   0.017][d][global] user path: '~~/input.conf' -> '/home/zen/.config/mpv/input.conf'
[   0.017][d][uosc] reading options for uosc
[   0.017][d][global] config path: 'script-opts/uosc.conf' -> '/home/zen/.config/mpv/script-opts/uosc.conf'
[   0.017][v][uosc] Opened config file script-opts/uosc.conf.
[   0.017][d][cplayer] Run command: enable-section, flags=64, args=[name="input_manager", flags="allow-hide-cursor+allow-vo-dragging"]
[   0.017][d][global] config path: 'inputevent_key.conf' -> '/home/zen/.config/mpv/inputevent_key.conf'
[   0.017][d][global] user path: '~~/inputevent_key.conf' -> '/home/zen/.config/mpv/inputevent_key.conf'
[   0.017][d][cplayer] Run command: define-section, flags=64, args=[name="input_commands", contents="", flags="default"]
[   0.017][d][cplayer] Run command: enable-section, flags=64, args=[name="input_select", flags="allow-hide-cursor+allow-vo-dragging"]
[   0.017][v][cplayer] Set property: user-data/simplebookmark/menu-open="no" -> 1
[   0.017][d][cplayer] Run command: define-section, flags=64, args=[name="input_forced_select", contents="", flags="force"]
[   0.017][d][global] config path: '.' -> '/home/zen/.config/mpv/.'
[   0.018][v][cplayer] Set property: volume=160 -> 1
[   0.018][d][global] config path: 'files/trakt_history.json' -/-> '/home/zen/.config/mpv/files/trakt_history.json'
[   0.018][d][global] config path: 'files/trakt_history.json' -/-> '/home/zen/.mpv/files/trakt_history.json'
[   0.018][d][global] config path: 'files/trakt_history.json' -/-> '/etc/mpv/files/trakt_history.json'
[   0.018][d][global] user path: '~~/files/trakt_history.json' -> '/home/zen/.config/mpv/files/trakt_history.json'
[   0.018][d][cplayer] Run command: define-section, flags=64, args=[name="input_quality_menu", contents="", flags="default"]
[   0.018][d][cplayer] Run command: define-section, flags=64, args=[name="input_mpv_animated", contents="w nonscalable script-binding mpv_animated/set_animated_start\nW nonscalable script-binding mpv_animated/set_animated_end\nCtrl+w nonscalable script-binding mpv_animated/make_animated\nCtrl+W nonscalable script-binding mpv_animated/make_animated_with_subtitles\n", flags="default"]
[   0.018][d][cplayer] Run command: enable-section, flags=64, args=[name="input_forced_select", flags="allow-hide-cursor+allow-vo-dragging"]
[   0.018][d][global] config path: 'files/cutfragments' -> '/home/zen/.config/mpv/files/cutfragments'
[   0.018][d][global] user path: '~~/files/cutfragments' -> '/home/zen/.config/mpv/files/cutfragments'
[   0.018][d][fuzzydir] PowerShell version -1
[   0.018][v][playlistmanager] updating options
[   0.018][v][cplayer] Set property: user-data/simplehistory/menu-open="no" -> 1
[   0.018][d][cplayer] Run command: enable-section, flags=64, args=[name="input_mpv_animated", flags="allow-hide-cursor+allow-vo-dragging"]
[   0.018][d][global] config path: '.' -> '/home/zen/.config/mpv/.'
[   0.019][d][cplayer] Run command: define-section, flags=64, args=[name="input_positioning", contents="", flags="default"]
[   0.019][d][cplayer] Run command: define-section, flags=64, args=[name="input_forced_manager", contents="", flags="force"]
[   0.019][d][cplayer] Run command: enable-section, flags=64, args=[name="input_commands", flags="allow-hide-cursor+allow-vo-dragging"]
[   0.019][d][cplayer] Run command: define-section, flags=64, args=[name="input_smartcopypaste_II", contents="", flags="default"]
[   0.019][d][cplayer] Run command: define-section, flags=64, args=[name="input_forced_mpv_animated", contents="", flags="force"]
[   0.019][d][cplayer] Run command: define-section, flags=64, args=[name="input_forced_commands", contents="", flags="force"]
[   0.019][d][cplayer] Run command: enable-section, flags=64, args=[name="input_smartcopypaste_II", flags="allow-hide-cursor+allow-vo-dragging"]
[   0.019][d][cplayer] Run command: enable-section, flags=64, args=[name="input_undoredo", flags="allow-hide-cursor+allow-vo-dragging"]
[   0.019][d][cplayer] Run command: enable-section, flags=64, args=[name="input_forced_mpv_animated", flags="allow-hide-cursor+allow-vo-dragging"]
[   0.019][d][cplayer] Run command: script-message-to, flags=64, args=[target="uosc", args="get-version", args="evafast"]
[   0.019][d][cplayer] Run command: define-section, flags=64, args=[name="input_slicing_copy", contents="c nonscalable script-binding slicing_copy/slicing_mark\na nonscalable script-binding slicing_copy/slicing_audio\nC nonscalable script-binding slicing_copy/clear_slicing_mark\n", flags="default"]
[   0.019][d][cplayer] Run command: define-section, flags=64, args=[name="input_playlistmanager", contents="", flags="default"]
[   0.019][d][cplayer] Run command: enable-section, flags=64, args=[name="input_forced_commands", flags="allow-hide-cursor+allow-vo-dragging"]
[   0.019][d][cplayer] Run command: script-message, flags=64, args=[args="command-palette-version", args="1"]
[   0.019][d][cplayer] Run command: enable-section, flags=64, args=[name="input_slicing_copy", flags="allow-hide-cursor+allow-vo-dragging"]
[   0.019][d][cplayer] Run command: define-section, flags=64, args=[name="input_forced_undoredo", contents="", flags="force"]
[   0.019][d][cplayer] Run command: define-section, flags=64, args=[name="input_forced_smartcopypaste_II", contents="", flags="force"]
[   0.019][d][cplayer] Run command: define-section, flags=64, args=[name="input_evafast", contents="RIGHT nonscalable script-binding evafast/evafast\n", flags="default"]
[   0.019][d][cplayer] Run command: define-section, flags=64, args=[name="input_forced_slicing_copy", contents="", flags="force"]
[   0.019][d][cplayer] Run command: enable-section, flags=64, args=[name="input_evafast", flags="allow-hide-cursor+allow-vo-dragging"]
[   0.019][d][cplayer] Run command: enable-section, flags=64, args=[name="input_quality_menu", flags="allow-hide-cursor+allow-vo-dragging"]
[   0.019][d][cplayer] Run command: enable-section, flags=64, args=[name="input_forced_smartcopypaste_II", flags="allow-hide-cursor+allow-vo-dragging"]
[   0.019][d][cplayer] Run command: define-section, flags=64, args=[name="input_stats", contents="", flags="default"]
[   0.019][d][cplayer] Run command: enable-section, flags=64, args=[name="input_positioning", flags="allow-hide-cursor+allow-vo-dragging"]
[   0.019][d][cplayer] Run command: define-section, flags=64, args=[name="input_simplebookmark", contents="", flags="default"]
[   0.019][d][cplayer] Run command: enable-section, flags=64, args=[name="input_forced_undoredo", flags="allow-hide-cursor+allow-vo-dragging"]
[   0.019][d][cplayer] Run command: enable-section, flags=64, args=[name="input_simplebookmark", flags="allow-hide-cursor+allow-vo-dragging"]
[   0.019][d][cplayer] Run command: enable-section, flags=64, args=[name="input_forced_slicing_copy", flags="allow-hide-cursor+allow-vo-dragging"]
[   0.019][d][cplayer] Run command: define-section, flags=64, args=[name="input_forced_simplebookmark", contents="", flags="force"]
[   0.019][d][cplayer] Run command: enable-section, flags=64, args=[name="input_forced_simplebookmark", flags="allow-hide-cursor+allow-vo-dragging"]
[   0.019][d][cplayer] Run command: enable-section, flags=64, args=[name="input_forced_manager", flags="allow-hide-cursor+allow-vo-dragging"]
[   0.019][d][cplayer] Run command: enable-section, flags=64, args=[name="input_playlistmanager", flags="allow-hide-cursor+allow-vo-dragging"]
[   0.019][d][cplayer] Run command: define-section, flags=64, args=[name="input_forced_positioning", contents="", flags="force"]
[   0.019][v][cplayer] Set property: user-data/command-palette/version=1 -> 1
[   0.020][d][cplayer] Run command: define-section, flags=64, args=[name="input_forced_evafast", contents="", flags="force"]
[   0.020][d][cplayer] Run command: define-section, flags=64, args=[name="input_forced_quality_menu", contents="", flags="force"]
[   0.020][d][cplayer] Run command: enable-section, flags=64, args=[name="input_forced_evafast", flags="allow-hide-cursor+allow-vo-dragging"]
[   0.020][d][cplayer] Run command: enable-section, flags=64, args=[name="input_stats", flags="allow-hide-cursor+allow-vo-dragging"]
[   0.020][d][cplayer] Run command: define-section, flags=64, args=[name="input_simplehistory", contents="", flags="default"]
[   0.020][d][cplayer] Run command: enable-section, flags=64, args=[name="input_simplehistory", flags="allow-hide-cursor+allow-vo-dragging"]
[   0.020][d][cplayer] Run command: define-section, flags=64, args=[name="input_forced_recentmenu", contents="", flags="force"]
[   0.020][d][cplayer] Run command: define-section, flags=64, args=[name="input_forced_stats", contents="", flags="force"]
[   0.020][d][global] config path: 'script-modules/?.lua;' -/-> '/home/zen/.config/mpv/script-modules/?.lua;'
[   0.020][d][global] config path: 'script-modules/?.lua;' -/-> '/home/zen/.mpv/script-modules/?.lua;'
[   0.020][d][global] config path: 'script-modules/?.lua;' -/-> '/etc/mpv/script-modules/?.lua;'
[   0.020][d][global] user path: '~~/script-modules/?.lua;' -> '/home/zen/.config/mpv/script-modules/?.lua;'
[   0.020][d][cplayer] Run command: define-section, flags=64, args=[name="input_console", contents="", flags="default"]
[   0.020][d][cplayer] Run command: define-section, flags=64, args=[name="input_forced_simplehistory", contents="", flags="force"]
[   0.020][d][cplayer] Run command: enable-section, flags=64, args=[name="input_forced_recentmenu", flags="allow-hide-cursor+allow-vo-dragging"]
[   0.020][d][cplayer] Run command: enable-section, flags=64, args=[name="input_console", flags="allow-hide-cursor+allow-vo-dragging"]
[   0.020][d][cplayer] Run command: enable-section, flags=64, args=[name="input_forced_quality_menu", flags="allow-hide-cursor+allow-vo-dragging"]
[   0.020][d][cplayer] Run command: enable-section, flags=64, args=[name="input_forced_simplehistory", flags="allow-hide-cursor+allow-vo-dragging"]
[   0.020][d][cplayer] Run command: define-section, flags=64, args=[name="input_forced_console", contents="", flags="force"]
[   0.020][d][cplayer] Run command: enable-section, flags=64, args=[name="input_forced_console", flags="allow-hide-cursor+allow-vo-dragging"]
[   0.020][d][cplayer] Run command: enable-section, flags=64, args=[name="input_forced_stats", flags="allow-hide-cursor+allow-vo-dragging"]
[   0.020][d][cplayer] Run command: define-section, flags=64, args=[name="input_inputevent", contents="", flags="default"]
[   0.020][d][cplayer] Run command: enable-section, flags=64, args=[name="input_inputevent", flags="allow-hide-cursor+allow-vo-dragging"]
[   0.020][d][cplayer] Run command: define-section, flags=64, args=[name="input_forced_inputevent", contents="PGUP nonscalable script-binding inputevent/PGUP\nMBTN_LEFT nonscalable script-binding inputevent/MBTN_LEFT\nSPACE nonscalable script-binding inputevent/SPACE\nPGDWN nonscalable script-binding inputevent/PGDWN\nTAB nonscalable script-binding inputevent/TAB\nRIGHT nonscalable script-binding inputevent/RIGHT\n", flags="force"]
[   0.020][d][cplayer] Run command: enable-section, flags=64, args=[name="input_forced_inputevent", flags="allow-hide-cursor+allow-vo-dragging"]
[   0.020][d][cplayer] Run command: define-section, flags=64, args=[name="input_forced_playlistmanager", contents="", flags="force"]
[   0.020][d][cplayer] Run command: enable-section, flags=64, args=[name="input_forced_positioning", flags="allow-hide-cursor+allow-vo-dragging"]
[   0.020][d][cplayer] Run command: enable-section, flags=64, args=[name="input_forced_playlistmanager", flags="allow-hide-cursor+allow-vo-dragging"]
[   0.021][d][cplayer] Run command: define-section, flags=64, args=[name="input_inputevent", contents="", flags="default"]
[   0.021][v][auto_profiles] Re-evaluating auto profile media-title
[   0.021][v][auto_profiles] Profile condition error on evaluating: [string "profile media-title condition"]:1: attempt to index global 'path' (a nil value)
[   0.021][v][auto_profiles] Re-evaluating auto profile end
[   0.021][d][cplayer] Run command: enable-section, flags=64, args=[name="input_inputevent", flags="allow-hide-cursor+allow-vo-dragging"]
[   0.021][v][auto_profiles] Re-evaluating auto profile minimized
[   0.021][d][cplayer] Run command: define-section, flags=64, args=[name="input_forced_inputevent", contents="PGUP nonscalable script-binding inputevent/PGUP\nMBTN_LEFT nonscalable script-binding inputevent/MBTN_LEFT\nRIGHT nonscalable script-binding inputevent/RIGHT\nPGDWN nonscalable script-binding inputevent/PGDWN\nSPACE nonscalable script-binding inputevent/SPACE\nTAB nonscalable script-binding inputevent/TAB\n", flags="force"]
[   0.022][d][cplayer] Run command: enable-section, flags=64, args=[name="input_forced_inputevent", flags="allow-hide-cursor+allow-vo-dragging"]
[   0.022][v][auto_profiles] Re-evaluating auto profile maximized
[   0.022][v][auto_profiles] Re-evaluating auto profile pause
[   0.022][v][auto_profiles] Re-evaluating auto profile pgs-fix
[   0.022][v][auto_profiles] Profile condition error on evaluating: [string "profile pgs-fix condition"]:1: attempt to compare number with nil
[   0.022][v][auto_profiles] Re-evaluating auto profile 8k-fix
[   0.022][v][auto_profiles] Profile condition error on evaluating: [string "profile 8k-fix condition"]:1: attempt to compare number with nil
[   0.022][v][auto_profiles] Re-evaluating auto profile fps-fix
[   0.022][v][auto_profiles] Profile condition error on evaluating: [string "profile fps-fix condition"]:1: attempt to compare number with nil
[   0.022][v][auto_profiles] Re-evaluating auto profile video-sync
[   0.022][v][auto_profiles] Re-evaluating auto profile SDR-Gamut
[   0.022][v][auto_profiles] Re-evaluating auto profile HDR
[   0.022][v][auto_profiles] Profile condition error on evaluating: [string "profile HDR condition"]:1: attempt to compare number with nil
[   0.022][v][auto_profiles] Re-evaluating auto profile hdr-2390
[   0.022][v][auto_profiles] Re-evaluating auto profile Deband
[   0.022][v][auto_profiles] Profile condition error on evaluating: [string "profile Deband condition"]:1: attempt to compare nil with number
[   0.022][v][auto_profiles] Re-evaluating auto profile media-title
[   0.022][v][auto_profiles] Profile condition error on evaluating: [string "profile media-title condition"]:1: attempt to index global 'path' (a nil value)
[   0.022][v][auto_profiles] Re-evaluating auto profile end
[   0.022][v][auto_profiles] Re-evaluating auto profile minimized
[   0.022][v][auto_profiles] Re-evaluating auto profile maximized
[   0.022][v][auto_profiles] Re-evaluating auto profile pause
[   0.022][v][auto_profiles] Re-evaluating auto profile pgs-fix
[   0.022][d][cplayer] Run command: define-section, flags=64, args=[name="mbtn_left", contents="mbtn_left script-binding uosc/__keybinding1\nalt+mbtn_left script-binding uosc/__keybinding2\nalt+ctrl+mbtn_left script-binding uosc/__keybinding3\nalt+shift+mbtn_left script-binding uosc/__keybinding4\nalt+ctrl+shift+mbtn_left script-binding uosc/__keybinding5\nctrl+mbtn_left script-binding uosc/__keybinding6\nctrl+shift+mbtn_left script-binding uosc/__keybinding7\nshift+mbtn_left script-binding uosc/__keybinding8\n", flags="force"]
[   0.022][v][auto_profiles] Profile condition error on evaluating: [string "profile pgs-fix condition"]:1: attempt to compare number with nil
[   0.022][v][auto_profiles] Re-evaluating auto profile 8k-fix
[   0.022][v][auto_profiles] Profile condition error on evaluating: [string "profile 8k-fix condition"]:1: attempt to compare number with nil
[   0.022][v][auto_profiles] Re-evaluating auto profile fps-fix
[   0.022][v][auto_profiles] Profile condition error on evaluating: [string "profile fps-fix condition"]:1: attempt to compare number with nil
[   0.022][v][auto_profiles] Re-evaluating auto profile video-sync
[   0.022][v][auto_profiles] Re-evaluating auto profile SDR-Gamut
[   0.022][v][auto_profiles] Re-evaluating auto profile HDR
[   0.022][v][auto_profiles] Profile condition error on evaluating: [string "profile HDR condition"]:1: attempt to compare number with nil
[   0.022][v][auto_profiles] Re-evaluating auto profile hdr-2390
[   0.022][v][auto_profiles] Re-evaluating auto profile Deband
[   0.022][v][auto_profiles] Profile condition error on evaluating: [string "profile Deband condition"]:1: attempt to compare nil with number
[   0.022][d][cplayer] Run command: define-section, flags=64, args=[name="mbtn_left_dbl", contents="mbtn_left_dbl ignore\n", flags="force"]
[   0.022][d][cplayer] Run command: define-section, flags=64, args=[name="mbtn_right", contents="mbtn_right script-binding uosc/__keybinding9\n", flags="force"]
[   0.022][d][cplayer] Run command: define-section, flags=64, args=[name="wheel", contents="wheel_up script-binding uosc/__keybinding10\nwheel_down script-binding uosc/__keybinding11\n", flags="force"]
[   0.030][v][cplayer] Done loading scripts.
[   0.030][d][global] config path: 'cache/watch_later' -> '/home/zen/.config/mpv/cache/watch_later'
[   0.030][d][global] user path: '~~/cache/watch_later' -> '/home/zen/.config/mpv/cache/watch_later'
[   0.030][v][cplayer] Running hook: auto_profiles/on_before_start_file
[   0.030][d][global] config path: 'cache/watch_later' -> '/home/zen/.config/mpv/cache/watch_later'
[   0.030][d][global] user path: '~~/cache/watch_later' -> '/home/zen/.config/mpv/cache/watch_later'
[   0.030][v][cplayer] Running hook: auto_profiles/on_load
[   0.031][v][auto_profiles] Re-evaluating auto profile media-title
[   0.031][v][auto_profiles] Re-evaluating auto profile video-sync
[   0.031][d][cplayer] Run command: define-section, flags=64, args=[name="input_uosc", contents="", flags="default"]
[   0.031][d][cplayer] Run command: enable-section, flags=64, args=[name="input_uosc", flags="allow-hide-cursor+allow-vo-dragging"]
[   0.031][d][cplayer] Run command: define-section, flags=64, args=[name="input_forced_uosc", contents="", flags="force"]
[   0.031][v][cplayer] Running hook: mpv_torrserver/on_load
[   0.031][d][cplayer] Run command: script-message-to, flags=64, args=[target="uosc", args="set", args="vformats", args="0"]
[   0.032][v][cplayer] Running hook: quality_menu/on_load
[   0.032][d][cplayer] Run command: enable-section, flags=64, args=[name="input_forced_uosc", flags="allow-hide-cursor+allow-vo-dragging"]
[   0.032][d][cplayer] Run command: script-message-to, flags=64, args=[target="uosc", args="set", args="aformats", args="0"]
[   0.032][d][global] config path: 'fonts' -> '/home/zen/.config/mpv/fonts'
[   0.032][d][osd/libass] ASS library version: 0x1703000 (runtime 0x1703000)
[   0.032][v][osd/libass] libass API version: 0x1703000
[   0.032][v][osd/libass] libass source: commit: 0.17.3-0-ge46aedea0a0d17da4c4ef49d84b94a7994664ab5
[   0.032][v][osd/libass] Shaper: FriBidi 1.0.15 (SIMPLE) HarfBuzz-ng 11.2.1 (COMPLEX)
[   0.032][d][global] config path: 'subfont.ttf' -/-> '/home/zen/.config/mpv/subfont.ttf'
[   0.032][d][global] config path: 'subfont.ttf' -/-> '/home/zen/.mpv/subfont.ttf'
[   0.032][d][global] config path: 'subfont.ttf' -/-> '/etc/mpv/subfont.ttf'
[   0.032][d][global] config path: 'fonts.conf' -/-> '/home/zen/.config/mpv/fonts.conf'
[   0.032][d][global] config path: 'fonts.conf' -/-> '/home/zen/.mpv/fonts.conf'
[   0.032][d][global] config path: 'fonts.conf' -/-> '/etc/mpv/fonts.conf'
[   0.032][v][osd/libass] Setting up fonts...
[   0.033][v][osd/libass] Loading font file '/home/zen/.config/mpv/fonts/modernx-osc-icon.ttf'
[   0.033][v][osd/libass] Loading font file '/home/zen/.config/mpv/fonts/MaterialIconsRound-Regular.otf'
[   0.033][v][osd/libass] Loading font file '/home/zen/.config/mpv/fonts/Material-Design-Iconic-Font.ttf'
[   0.033][v][osd/libass] Loading font file '/home/zen/.config/mpv/fonts/uosc_textures.ttf'
[   0.038][v][osd/libass] Using font provider fontconfig
[   0.038][v][osd/libass] Done.
[   0.038][d][cplayer] Run command: normalize-path, flags=64, args=[filename="/home/zen/Downloads/Video/FSDSS-125.mkv"]
[   0.038][v][cplayer] Running hook: ytdl_hook/on_load
[   0.038][v][cplayer] Running hook: ytdl_hook/on_load
[   0.038][v][ytdl_hook] playlist hook
[   0.038][v][cplayer] Running hook: fuzzydir/on_load
[   0.038][d][fuzzydir] max_search_depth = 1, discovery_threshold = 10
[   0.038][d][fuzzydir] search_path = /home/zen/Downloads/Video/
[   0.038][d][fuzzydir] audio-file-paths: audio;audios;**
[   0.038][d][fuzzydir] Adding to audio-file-paths: audio;audios;**
[   0.038][v][autoload] Prepending /home/zen/Downloads/Video/dv-1116.ts
[   0.038][v][autoload] Prepending /home/zen/Downloads/Video/dv-1069.ts
[   0.038][v][cplayer] Set property: options/audio-file-paths=["audio;audios;**"] -> 1
[   0.038][v][fuzzydir] Done expanding audio-file-paths
[   0.038][d][fuzzydir] sub-file-paths: **
[   0.038][d][cplayer] Run command: loadfile, flags=64, args=[url="/home/zen/Downloads/Video/dv-1069.ts", flags="append", index="-1", options=""]
[   0.038][d][cplayer] Run command: loadfile, flags=64, args=[url="/home/zen/Downloads/Video/dv-1116.ts", flags="append", index="-1", options=""]
[   0.038][d][cplayer] Run command: playlist-move, flags=64, args=[index1="0", index2="3"]
[   0.038][v][autoload] Adding /home/zen/Downloads/Video/MIFD-167.mkv
[   0.038][d][cplayer] Run command: loadfile, flags=64, args=[url="/home/zen/Downloads/Video/MIFD-167.mkv", flags="append", index="-1", options=""]
[   0.038][v][cplayer] Set property: options/sub-file-paths=[] -> 1
[   0.038][v][fuzzydir] Done expanding sub-file-paths
[   0.038][d][fuzzydir] Done expanding paths
[   0.039][v][ifo_dvdnav] Opening /home/zen/Downloads/Video/FSDSS-125.mkv
[   0.039][v][bdmv/bluray] Opening /home/zen/Downloads/Video/FSDSS-125.mkv
[   0.039][v][file] Opening /home/zen/Downloads/Video/FSDSS-125.mkv
[   0.039][d][file] resize stream to 131072 bytes, drop 0 bytes
[   0.039][d][file] Stream opened successfully.
[   0.039][v][demux] Trying demuxers for level=normal.
[   0.039][d][demux] Trying demuxer: directory (force-level: normal)
[   0.039][d][demux] Trying demuxer: disc (force-level: normal)
[   0.039][d][demux] Trying demuxer: edl (force-level: normal)
[   0.039][d][demux] Trying demuxer: cue (force-level: normal)
[   0.039][d][demux] Trying demuxer: rawaudio (force-level: normal)
[   0.039][d][demux] Trying demuxer: rawvideo (force-level: normal)
[   0.039][d][demux] Trying demuxer: mkv (force-level: normal)
[   0.039][d][demux] Trying demuxer: libarchive (force-level: normal)
[   0.040][d][demux] Trying demuxer: lavf (force-level: normal)
[   0.040][d][ffmpeg/video] h264: Reinit context to 1280x720, pix_fmt: yuv420p
[   0.041][v][lavf] Found 'mpegts' at score=50 size=2048.
[   0.042][d][ffmpeg/video] h264: Reinit context to 1280x720, pix_fmt: yuv420p
[   0.047][d][ffmpeg] AVIOContext: Statistics: 413840 bytes read, 2 seeks
[   0.048][v][file] stream level seek from 196608 to 1748043404
[   0.049][v][file] stream level seek from 1748293404 to 0
[   0.049][v][lavf] avformat_find_stream_info() finished after 0 bytes.
[   0.049][v][demux] Detected file format: mpegts (libavformat)
[   0.049][v][cplayer] Opening done: /home/zen/Downloads/Video/FSDSS-125.mkv
[   0.049][v][find_files] Loading external files in /home/zen/Downloads/Video/
[   0.049][d][global] config path: 'sub' -/-> '/home/zen/.config/mpv/sub'
[   0.049][d][global] config path: 'sub' -/-> '/home/zen/.mpv/sub'
[   0.049][d][global] config path: 'sub' -/-> '/etc/mpv/sub'
[   0.049][d][global] config path: 'audio' -/-> '/home/zen/.config/mpv/audio'
[   0.049][d][global] config path: 'audio' -/-> '/home/zen/.mpv/audio'
[   0.049][d][global] config path: 'audio' -/-> '/etc/mpv/audio'
[   0.049][v][cplayer] Running hook: auto_profiles/on_preloaded
[   0.049][v][cplayer] Running hook: ytdl_hook/on_preloaded
[   0.049][v][cplayer] Running hook: chapter_make_read/on_preloaded
[   0.049][v][lavf] select track 0
[   0.049][v][lavf] select track 1
[   0.049][i][cplayer]  ‚óè Video  --vid=1  (h264 1280x720 29.97 fps)
[   0.049][i][cplayer]  ‚óè Audio  --aid=1  (aac 2ch 48000 Hz 244 kbps)
[   0.049][v][vo/gpu-next] Probing for best GPU context.
[   0.049][v][vo/gpu-next/vulkan] Initializing GPU context 'waylandvk'
[   0.049][v][vo/gpu-next/libplacebo] Initialized libplacebo v7.349.0 (API v349)
[   0.050][d][vo/gpu-next/libplacebo] Available instance version: 1.4.313
[   0.050][d][vo/gpu-next/libplacebo] Spent 0.119 ms enumerating instance layers
[   0.050][d][vo/gpu-next/libplacebo] Available layers:
[   0.050][d][vo/gpu-next/libplacebo]     VK_LAYER_NV_optimus (v1.4.303)
[   0.092][v][vo/gpu-next/libplacebo] Spent 42.436 ms enumerating instance extensions
[   0.092][d][vo/gpu-next/libplacebo] Available instance extensions:
[   0.092][d][vo/gpu-next/libplacebo]     VK_KHR_device_group_creation
[   0.092][d][vo/gpu-next/libplacebo]     VK_KHR_display
[   0.092][d][vo/gpu-next/libplacebo]     VK_KHR_external_fence_capabilities
[   0.092][d][vo/gpu-next/libplacebo]     VK_KHR_external_memory_capabilities
[   0.092][d][vo/gpu-next/libplacebo]     VK_KHR_external_semaphore_capabilities
[   0.092][d][vo/gpu-next/libplacebo]     VK_KHR_get_display_properties2
[   0.092][d][vo/gpu-next/libplacebo]     VK_KHR_get_physical_device_properties2
[   0.092][d][vo/gpu-next/libplacebo]     VK_KHR_get_surface_capabilities2
[   0.092][d][vo/gpu-next/libplacebo]     VK_KHR_surface
[   0.092][d][vo/gpu-next/libplacebo]     VK_KHR_surface_protected_capabilities
[   0.092][d][vo/gpu-next/libplacebo]     VK_KHR_wayland_surface
[   0.092][d][vo/gpu-next/libplacebo]     VK_KHR_xcb_surface
[   0.092][d][vo/gpu-next/libplacebo]     VK_KHR_xlib_surface
[   0.092][d][vo/gpu-next/libplacebo]     VK_EXT_acquire_drm_display
[   0.092][d][vo/gpu-next/libplacebo]     VK_EXT_acquire_xlib_display
[   0.092][d][vo/gpu-next/libplacebo]     VK_EXT_debug_report
[   0.092][d][vo/gpu-next/libplacebo]     VK_EXT_debug_utils
[   0.092][d][vo/gpu-next/libplacebo]     VK_EXT_direct_mode_display
[   0.092][d][vo/gpu-next/libplacebo]     VK_EXT_display_surface_counter
[   0.092][d][vo/gpu-next/libplacebo]     VK_EXT_surface_maintenance1
[   0.092][d][vo/gpu-next/libplacebo]     VK_EXT_swapchain_colorspace
[   0.092][d][vo/gpu-next/libplacebo]     VK_NV_display_stereo
[   0.092][d][vo/gpu-next/libplacebo]     VK_KHR_portability_enumeration
[   0.092][d][vo/gpu-next/libplacebo]     VK_LUNARG_direct_driver_loading
[   0.092][v][vo/gpu-next/libplacebo] Creating vulkan instance with extensions:
[   0.092][v][vo/gpu-next/libplacebo]     VK_KHR_get_physical_device_properties2
[   0.092][v][vo/gpu-next/libplacebo]     VK_KHR_surface
[   0.092][v][vo/gpu-next/libplacebo]     VK_EXT_swapchain_colorspace
[   0.092][v][vo/gpu-next/libplacebo]     VK_KHR_external_memory_capabilities
[   0.092][v][vo/gpu-next/libplacebo]     VK_KHR_external_semaphore_capabilities
[   0.092][v][vo/gpu-next/libplacebo]     VK_KHR_get_surface_capabilities2
[   0.092][v][vo/gpu-next/libplacebo]     VK_KHR_portability_enumeration
[   0.092][v][vo/gpu-next/libplacebo]     VK_KHR_surface
[   0.092][v][vo/gpu-next/libplacebo]     VK_KHR_wayland_surface
[   0.094][d][vo/gpu-next/libplacebo] Spent 2.189 ms creating vulkan instance
[   0.094][v][vo/gpu-next/wayland] Registered interface wl_seat at version 8
[   0.094][v][vo/gpu-next/wayland] Registered interface wl_data_device_manager at version 3
[   0.094][v][vo/gpu-next/wayland] Registered interface wl_compositor at version 6
[   0.094][v][vo/gpu-next/wayland] Registered interface wl_subcompositor at version 1
[   0.094][v][vo/gpu-next/wayland] Registered interface wl_shm at version 1
[   0.094][v][vo/gpu-next/wayland] Registered interface wp_viewporter at version 1
[   0.094][v][vo/gpu-next/wayland] Registered interface wp_fractional_scale_manager_v1 at version 1
[   0.094][v][vo/gpu-next/wayland] Registered interface wp_cursor_shape_manager_v1 at version 1
[   0.094][v][vo/gpu-next/wayland] Registered interface zwp_idle_inhibit_manager_v1 at version 1
[   0.094][v][vo/gpu-next/wayland] Registered interface zxdg_decoration_manager_v1 at version 1
[   0.094][v][vo/gpu-next/wayland] Registered interface zwp_text_input_manager_v3 at version 1
[   0.094][v][vo/gpu-next/wayland] Registered interface xdg_activation_v1 at version 1
[   0.094][v][vo/gpu-next/wayland] Registered interface wp_presentation at version 1
[   0.094][v][vo/gpu-next/wayland] Registered interface xdg_wm_base at version 6
[   0.094][v][vo/gpu-next/wayland] Registered interface wp_single_pixel_buffer_manager_v1 at version 1
[   0.094][v][vo/gpu-next/wayland] Registered interface wp_content_type_manager_v1 at version 1
[   0.094][v][vo/gpu-next/wayland] Registered interface wp_color_manager_v1 at version 1
[   0.094][v][vo/gpu-next/wayland] Registered interface zwp_linux_dmabuf_v1 at version 4
[   0.094][v][vo/gpu-next/wayland] Registered interface wl_output at version 4
[   0.095][v][vo/gpu-next/wayland] Compositor supports parametric image description creator.
[   0.095][v][vo/gpu-next/wayland] Compositor supports setting primaries.
[   0.095][v][vo/gpu-next/wayland] Compositor supports setting luminances.
[   0.095][d][vo/gpu-next/wayland] Querying available drm format and modifier pairs from tranche on device '57856'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'AB24(0300000000606010)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'AB24(0300000000606011)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'AB24(0300000000606012)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'AB24(0300000000606013)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'AB24(0300000000606014)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'AB24(0300000000606015)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'AB24(0300000000e08010)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'AB24(0300000000e08011)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'AB24(0300000000e08012)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'AB24(0300000000e08013)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'AB24(0300000000e08014)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'AB24(0300000000e08015)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'AB24(00ffffffffffffff)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'XB24(0300000000606010)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'XB24(0300000000606011)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'XB24(0300000000606012)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'XB24(0300000000606013)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'XB24(0300000000606014)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'XB24(0300000000606015)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'XB24(0300000000e08010)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'XB24(0300000000e08011)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'XB24(0300000000e08012)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'XB24(0300000000e08013)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'XB24(0300000000e08014)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'XB24(0300000000e08015)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'XB24(00ffffffffffffff)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'R8  (0300000000606010)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'R8  (0300000000606011)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'R8  (0300000000606012)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'R8  (0300000000606013)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'R8  (0300000000606014)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'R8  (0300000000606015)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'R8  (0300000000e08010)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'R8  (0300000000e08011)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'R8  (0300000000e08012)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'R8  (0300000000e08013)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'R8  (0300000000e08014)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'R8  (0300000000e08015)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'R8  (00ffffffffffffff)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'RG88(0300000000606010)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'RG88(0300000000606011)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'RG88(0300000000606012)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'RG88(0300000000606013)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'RG88(0300000000606014)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'RG88(0300000000606015)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'RG88(0300000000e08010)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'RG88(0300000000e08011)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'RG88(0300000000e08012)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'RG88(0300000000e08013)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'RG88(0300000000e08014)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'RG88(0300000000e08015)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'RG88(00ffffffffffffff)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'R16 (0300000000606010)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'R16 (0300000000606011)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'R16 (0300000000606012)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'R16 (0300000000606013)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'R16 (0300000000606014)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'R16 (0300000000606015)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'R16 (0300000000e08010)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'R16 (0300000000e08011)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'R16 (0300000000e08012)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'R16 (0300000000e08013)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'R16 (0300000000e08014)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'R16 (0300000000e08015)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'R16 (00ffffffffffffff)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'RG32(0300000000606010)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'RG32(0300000000606011)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'RG32(0300000000606012)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'RG32(0300000000606013)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'RG32(0300000000606014)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'RG32(0300000000606015)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'RG32(0300000000e08010)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'RG32(0300000000e08011)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'RG32(0300000000e08012)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'RG32(0300000000e08013)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'RG32(0300000000e08014)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'RG32(0300000000e08015)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'RG32(00ffffffffffffff)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'UYVY(00ffffffffffffff)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'AR12(0300000000606010)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'AR12(0300000000606011)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'AR12(0300000000606012)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'AR12(0300000000606013)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'AR12(0300000000606014)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'AR12(0300000000606015)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'AR12(0300000000e08010)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'AR12(0300000000e08011)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'AR12(0300000000e08012)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'AR12(0300000000e08013)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'AR12(0300000000e08014)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'AR12(0300000000e08015)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'AR12(00ffffffffffffff)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'AB12(0300000000606010)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'AB12(0300000000606011)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'AB12(0300000000606012)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'AB12(0300000000606013)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'AB12(0300000000606014)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'AB12(0300000000606015)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'AB12(0300000000e08010)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'AB12(0300000000e08011)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'AB12(0300000000e08012)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'AB12(0300000000e08013)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'AB12(0300000000e08014)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'AB12(0300000000e08015)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'AB12(00ffffffffffffff)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'RA12(0300000000606010)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'RA12(0300000000606011)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'RA12(0300000000606012)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'RA12(0300000000606013)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'RA12(0300000000606014)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'RA12(0300000000606015)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'RA12(0300000000e08010)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'RA12(0300000000e08011)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'RA12(0300000000e08012)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'RA12(0300000000e08013)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'RA12(0300000000e08014)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'RA12(0300000000e08015)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'RA12(00ffffffffffffff)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'BA12(0300000000606010)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'BA12(0300000000606011)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'BA12(0300000000606012)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'BA12(0300000000606013)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'BA12(0300000000606014)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'BA12(0300000000606015)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'BA12(0300000000e08010)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'BA12(0300000000e08011)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'BA12(0300000000e08012)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'BA12(0300000000e08013)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'BA12(0300000000e08014)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'BA12(0300000000e08015)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'BA12(00ffffffffffffff)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'XR15(0300000000606010)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'XR15(0300000000606011)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'XR15(0300000000606012)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'XR15(0300000000606013)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'XR15(0300000000606014)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'XR15(0300000000606015)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'XR15(0300000000e08010)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'XR15(0300000000e08011)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'XR15(0300000000e08012)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'XR15(0300000000e08013)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'XR15(0300000000e08014)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'XR15(0300000000e08015)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'XR15(00ffffffffffffff)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'XB15(0300000000606010)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'XB15(0300000000606011)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'XB15(0300000000606012)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'XB15(0300000000606013)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'XB15(0300000000606014)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'XB15(0300000000606015)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'XB15(0300000000e08010)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'XB15(0300000000e08011)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'XB15(0300000000e08012)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'XB15(0300000000e08013)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'XB15(0300000000e08014)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'XB15(0300000000e08015)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'XB15(00ffffffffffffff)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'RX15(0300000000606010)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'RX15(0300000000606011)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'RX15(0300000000606012)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'RX15(0300000000606013)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'RX15(0300000000606014)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'RX15(0300000000606015)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'RX15(0300000000e08010)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'RX15(0300000000e08011)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'RX15(0300000000e08012)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'RX15(0300000000e08013)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'RX15(0300000000e08014)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'RX15(0300000000e08015)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'RX15(00ffffffffffffff)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'BX15(0300000000606010)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'BX15(0300000000606011)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'BX15(0300000000606012)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'BX15(0300000000606013)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'BX15(0300000000606014)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'BX15(0300000000606015)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'BX15(0300000000e08010)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'BX15(0300000000e08011)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'BX15(0300000000e08012)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'BX15(0300000000e08013)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'BX15(0300000000e08014)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'BX15(0300000000e08015)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'BX15(00ffffffffffffff)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'AR15(0300000000606010)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'AR15(0300000000606011)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'AR15(0300000000606012)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'AR15(0300000000606013)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'AR15(0300000000606014)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'AR15(0300000000606015)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'AR15(0300000000e08010)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'AR15(0300000000e08011)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'AR15(0300000000e08012)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'AR15(0300000000e08013)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'AR15(0300000000e08014)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'AR15(0300000000e08015)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'AR15(00ffffffffffffff)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'AB15(0300000000606010)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'AB15(0300000000606011)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'AB15(0300000000606012)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'AB15(0300000000606013)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'AB15(0300000000606014)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'AB15(0300000000606015)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'AB15(0300000000e08010)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'AB15(0300000000e08011)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'AB15(0300000000e08012)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'AB15(0300000000e08013)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'AB15(0300000000e08014)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'AB15(0300000000e08015)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'AB15(00ffffffffffffff)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'RA15(0300000000606010)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'RA15(0300000000606011)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'RA15(0300000000606012)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'RA15(0300000000606013)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'RA15(0300000000606014)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'RA15(0300000000606015)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'RA15(0300000000e08010)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'RA15(0300000000e08011)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'RA15(0300000000e08012)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'RA15(0300000000e08013)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'RA15(0300000000e08014)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'RA15(0300000000e08015)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'RA15(00ffffffffffffff)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'BA15(0300000000606010)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'BA15(0300000000606011)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'BA15(0300000000606012)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'BA15(0300000000606013)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'BA15(0300000000606014)'
[   0.095][d][vo/gpu-next/wayland] Compositor supports drm format: 'BA15(0300000000606015)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'BA15(0300000000e08010)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'BA15(0300000000e08011)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'BA15(0300000000e08012)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'BA15(0300000000e08013)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'BA15(0300000000e08014)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'BA15(0300000000e08015)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'BA15(00ffffffffffffff)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'AB4H(0300000000606010)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'AB4H(0300000000606011)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'AB4H(0300000000606012)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'AB4H(0300000000606013)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'AB4H(0300000000606014)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'AB4H(0300000000606015)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'AB4H(0300000000e08010)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'AB4H(0300000000e08011)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'AB4H(0300000000e08012)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'AB4H(0300000000e08013)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'AB4H(0300000000e08014)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'AB4H(0300000000e08015)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'AB4H(00ffffffffffffff)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'XB4H(0300000000606010)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'XB4H(0300000000606011)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'XB4H(0300000000606012)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'XB4H(0300000000606013)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'XB4H(0300000000606014)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'XB4H(0300000000606015)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'XB4H(0300000000e08010)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'XB4H(0300000000e08011)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'XB4H(0300000000e08012)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'XB4H(0300000000e08013)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'XB4H(0300000000e08014)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'XB4H(0300000000e08015)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'XB4H(00ffffffffffffff)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'AR24(0300000000606010)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'AR24(0300000000606011)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'AR24(0300000000606012)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'AR24(0300000000606013)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'AR24(0300000000606014)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'AR24(0300000000606015)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'AR24(0300000000e08010)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'AR24(0300000000e08011)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'AR24(0300000000e08012)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'AR24(0300000000e08013)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'AR24(0300000000e08014)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'AR24(0300000000e08015)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'AR24(00ffffffffffffff)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'XR24(0300000000606010)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'XR24(0300000000606011)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'XR24(0300000000606012)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'XR24(0300000000606013)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'XR24(0300000000606014)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'XR24(0300000000606015)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'XR24(0300000000e08010)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'XR24(0300000000e08011)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'XR24(0300000000e08012)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'XR24(0300000000e08013)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'XR24(0300000000e08014)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'XR24(0300000000e08015)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'XR24(00ffffffffffffff)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'RGB8(0300000000606010)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'RGB8(0300000000606011)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'RGB8(0300000000606012)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'RGB8(0300000000606013)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'RGB8(0300000000606014)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'RGB8(0300000000606015)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'RGB8(0300000000e08010)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'RGB8(0300000000e08011)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'RGB8(0300000000e08012)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'RGB8(0300000000e08013)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'RGB8(0300000000e08014)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'RGB8(0300000000e08015)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'RGB8(00ffffffffffffff)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'RG16(0300000000606010)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'RG16(0300000000606011)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'RG16(0300000000606012)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'RG16(0300000000606013)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'RG16(0300000000606014)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'RG16(0300000000606015)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'RG16(0300000000e08010)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'RG16(0300000000e08011)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'RG16(0300000000e08012)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'RG16(0300000000e08013)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'RG16(0300000000e08014)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'RG16(0300000000e08015)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'RG16(00ffffffffffffff)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'BG16(0300000000606010)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'BG16(0300000000606011)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'BG16(0300000000606012)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'BG16(0300000000606013)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'BG16(0300000000606014)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'BG16(0300000000606015)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'BG16(0300000000e08010)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'BG16(0300000000e08011)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'BG16(0300000000e08012)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'BG16(0300000000e08013)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'BG16(0300000000e08014)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'BG16(0300000000e08015)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'BG16(00ffffffffffffff)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'RG24(0300000000606010)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'RG24(0300000000606011)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'RG24(0300000000606012)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'RG24(0300000000606013)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'RG24(0300000000606014)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'RG24(0300000000606015)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'RG24(0300000000e08010)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'RG24(0300000000e08011)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'RG24(0300000000e08012)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'RG24(0300000000e08013)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'RG24(0300000000e08014)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'RG24(0300000000e08015)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'RG24(00ffffffffffffff)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'BG24(0300000000606010)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'BG24(0300000000606011)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'BG24(0300000000606012)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'BG24(0300000000606013)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'BG24(0300000000606014)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'BG24(0300000000606015)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'BG24(0300000000e08010)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'BG24(0300000000e08011)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'BG24(0300000000e08012)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'BG24(0300000000e08013)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'BG24(0300000000e08014)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'BG24(0300000000e08015)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'BG24(00ffffffffffffff)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'AR30(0300000000606010)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'AR30(0300000000606011)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'AR30(0300000000606012)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'AR30(0300000000606013)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'AR30(0300000000606014)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'AR30(0300000000606015)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'AR30(0300000000e08010)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'AR30(0300000000e08011)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'AR30(0300000000e08012)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'AR30(0300000000e08013)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'AR30(0300000000e08014)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'AR30(0300000000e08015)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'AR30(00ffffffffffffff)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'RX24(0300000000606010)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'RX24(0300000000606011)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'RX24(0300000000606012)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'RX24(0300000000606013)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'RX24(0300000000606014)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'RX24(0300000000606015)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'RX24(0300000000e08010)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'RX24(0300000000e08011)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'RX24(0300000000e08012)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'RX24(0300000000e08013)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'RX24(0300000000e08014)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'RX24(0300000000e08015)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'RX24(00ffffffffffffff)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'BX24(0300000000606010)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'BX24(0300000000606011)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'BX24(0300000000606012)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'BX24(0300000000606013)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'BX24(0300000000606014)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'BX24(0300000000606015)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'BX24(0300000000e08010)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'BX24(0300000000e08011)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'BX24(0300000000e08012)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'BX24(0300000000e08013)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'BX24(0300000000e08014)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'BX24(0300000000e08015)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'BX24(00ffffffffffffff)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'RA24(0300000000606010)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'RA24(0300000000606011)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'RA24(0300000000606012)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'RA24(0300000000606013)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'RA24(0300000000606014)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'RA24(0300000000606015)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'RA24(0300000000e08010)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'RA24(0300000000e08011)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'RA24(0300000000e08012)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'RA24(0300000000e08013)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'RA24(0300000000e08014)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'RA24(0300000000e08015)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'RA24(00ffffffffffffff)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'BA24(0300000000606010)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'BA24(0300000000606011)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'BA24(0300000000606012)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'BA24(0300000000606013)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'BA24(0300000000606014)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'BA24(0300000000606015)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'BA24(0300000000e08010)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'BA24(0300000000e08011)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'BA24(0300000000e08012)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'BA24(0300000000e08013)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'BA24(0300000000e08014)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'BA24(0300000000e08015)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'BA24(00ffffffffffffff)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'XR30(0300000000606010)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'XR30(0300000000606011)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'XR30(0300000000606012)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'XR30(0300000000606013)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'XR30(0300000000606014)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'XR30(0300000000606015)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'XR30(0300000000e08010)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'XR30(0300000000e08011)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'XR30(0300000000e08012)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'XR30(0300000000e08013)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'XR30(0300000000e08014)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'XR30(0300000000e08015)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'XR30(00ffffffffffffff)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'XB30(0300000000606010)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'XB30(0300000000606011)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'XB30(0300000000606012)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'XB30(0300000000606013)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'XB30(0300000000606014)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'XB30(0300000000606015)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'XB30(0300000000e08010)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'XB30(0300000000e08011)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'XB30(0300000000e08012)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'XB30(0300000000e08013)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'XB30(0300000000e08014)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'XB30(0300000000e08015)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'XB30(00ffffffffffffff)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'RX30(0300000000606010)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'RX30(0300000000606011)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'RX30(0300000000606012)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'RX30(0300000000606013)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'RX30(0300000000606014)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'RX30(0300000000606015)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'RX30(0300000000e08010)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'RX30(0300000000e08011)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'RX30(0300000000e08012)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'RX30(0300000000e08013)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'RX30(0300000000e08014)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'RX30(0300000000e08015)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'RX30(00ffffffffffffff)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'BX30(0300000000606010)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'BX30(0300000000606011)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'BX30(0300000000606012)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'BX30(0300000000606013)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'BX30(0300000000606014)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'BX30(0300000000606015)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'BX30(0300000000e08010)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'BX30(0300000000e08011)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'BX30(0300000000e08012)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'BX30(0300000000e08013)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'BX30(0300000000e08014)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'BX30(0300000000e08015)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'BX30(00ffffffffffffff)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'RA30(0300000000606010)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'RA30(0300000000606011)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'RA30(0300000000606012)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'RA30(0300000000606013)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'RA30(0300000000606014)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'RA30(0300000000606015)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'RA30(0300000000e08010)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'RA30(0300000000e08011)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'RA30(0300000000e08012)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'RA30(0300000000e08013)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'RA30(0300000000e08014)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'RA30(0300000000e08015)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'RA30(00ffffffffffffff)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'BA30(0300000000606010)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'BA30(0300000000606011)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'BA30(0300000000606012)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'BA30(0300000000606013)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'BA30(0300000000606014)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'BA30(0300000000606015)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'BA30(0300000000e08010)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'BA30(0300000000e08011)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'BA30(0300000000e08012)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'BA30(0300000000e08013)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'BA30(0300000000e08014)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'BA30(0300000000e08015)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'BA30(00ffffffffffffff)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'R101(0300000000606010)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'R101(0300000000606011)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'R101(0300000000606012)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'R101(0300000000606013)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'R101(0300000000606014)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'R101(0300000000606015)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'R101(0300000000e08010)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'R101(0300000000e08011)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'R101(0300000000e08012)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'R101(0300000000e08013)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'R101(0300000000e08014)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'R101(0300000000e08015)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'R101(00ffffffffffffff)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'R100(0300000000606010)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'R100(0300000000606011)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'R100(0300000000606012)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'R100(0300000000606013)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'R100(0300000000606014)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'R100(0300000000606015)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'R100(0300000000e08010)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'R100(0300000000e08011)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'R100(0300000000e08012)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'R100(0300000000e08013)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'R100(0300000000e08014)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'R100(0300000000e08015)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'R100(00ffffffffffffff)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'AB30(0300000000606010)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'AB30(0300000000606011)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'AB30(0300000000606012)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'AB30(0300000000606013)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'AB30(0300000000606014)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'AB30(0300000000606015)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'AB30(0300000000e08010)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'AB30(0300000000e08011)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'AB30(0300000000e08012)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'AB30(0300000000e08013)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'AB30(0300000000e08014)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'AB30(0300000000e08015)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'AB30(00ffffffffffffff)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'B101(0300000000606010)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'B101(0300000000606011)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'B101(0300000000606012)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'B101(0300000000606013)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'B101(0300000000606014)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'B101(0300000000606015)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'B101(0300000000e08010)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'B101(0300000000e08011)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'B101(0300000000e08012)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'B101(0300000000e08013)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'B101(0300000000e08014)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'B101(0300000000e08015)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'B101(00ffffffffffffff)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'B100(0300000000606010)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'B100(0300000000606011)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'B100(0300000000606012)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'B100(0300000000606013)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'B100(0300000000606014)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'B100(0300000000606015)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'B100(0300000000e08010)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'B100(0300000000e08011)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'B100(0300000000e08012)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'B100(0300000000e08013)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'B100(0300000000e08014)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'B100(0300000000e08015)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'B100(00ffffffffffffff)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'YU12(00ffffffffffffff)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'NV12(00ffffffffffffff)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'NV21(00ffffffffffffff)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'NV16(00ffffffffffffff)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'NV24(00ffffffffffffff)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'P010(00ffffffffffffff)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'P210(00ffffffffffffff)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'P012(00ffffffffffffff)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'HD01(00ffffffffffffff)'
[   0.096][d][vo/gpu-next/wayland] Compositor supports drm format: 'UHD0(00ffffffffffffff)'
[   0.096][v][vo/gpu-next/wayland] Registered output EDR EGM24F100H (0x3a):
[   0.096][v][vo/gpu-next/wayland] 	x: 0px, y: 0px
[   0.096][v][vo/gpu-next/wayland] 	w: 1920px (530mm), h: 1080px (300mm)
[   0.096][v][vo/gpu-next/wayland] 	scale: 1.000000
[   0.096][v][vo/gpu-next/wayland] 	Hz: 100.000000
[   0.096][v][vo/gpu-next/wayland] Enabling server decorations
[   0.096][v][vo/gpu-next/wayland] Enabling server decorations
[   0.096][v][vo/gpu-next/wayland] Compositor does not support ICC profiles!
[   0.096][v][vo/gpu-next/libplacebo] Probing for vulkan devices:
[   0.096][d][vo/gpu-next/libplacebo] Spent 0.035 ms enumerating physical devices
[   0.096][v][vo/gpu-next/libplacebo]     GPU 0: NVIDIA GeForce GTX 1660 SUPER v1.4.303 (discrete)
[   0.096][v][vo/gpu-next/libplacebo]            uuid: CE:46:DC:1F:47:D2:95:59:78:E7:A6:20:5E:82:E7:0C
[   0.096][v][vo/gpu-next/libplacebo] Vulkan device properties:
[   0.096][v][vo/gpu-next/libplacebo]     Device Name: NVIDIA GeForce GTX 1660 SUPER
[   0.096][v][vo/gpu-next/libplacebo]     Device ID: 10de:21c4
[   0.096][v][vo/gpu-next/libplacebo]     Device UUID: CE:46:DC:1F:47:D2:95:59:78:E7:A6:20:5E:82:E7:0C
[   0.096][v][vo/gpu-next/libplacebo]     Driver version: 8ea40000
[   0.096][v][vo/gpu-next/libplacebo]     API version: 1.4.303
[   0.096][d][vo/gpu-next/libplacebo] Queue families supported by device:
[   0.096][d][vo/gpu-next/libplacebo]     0: flags 0xf num 16
[   0.096][d][vo/gpu-next/libplacebo]     1: flags 0xc num 2
[   0.096][d][vo/gpu-next/libplacebo]     2: flags 0xe num 8
[   0.096][d][vo/gpu-next/libplacebo]     3: flags 0x2c num 1
[   0.096][d][vo/gpu-next/libplacebo]     4: flags 0x4c num 1
[   0.096][d][vo/gpu-next/libplacebo] Using graphics queue 0
[   0.096][v][vo/gpu-next/libplacebo] Using async transfer (queue 1)
[   0.096][v][vo/gpu-next/libplacebo] Using async compute (queue 2)
[   0.096][d][vo/gpu-next/libplacebo] Spent 0.017 ms enumerating device extensions
[   0.096][d][vo/gpu-next/libplacebo] Available device extensions:
[   0.096][d][vo/gpu-next/libplacebo]     VK_KHR_16bit_storage
[   0.096][d][vo/gpu-next/libplacebo]     VK_KHR_8bit_storage
[   0.096][d][vo/gpu-next/libplacebo]     VK_KHR_acceleration_structure
[   0.096][d][vo/gpu-next/libplacebo]     VK_KHR_bind_memory2
[   0.096][d][vo/gpu-next/libplacebo]     VK_KHR_buffer_device_address
[   0.096][d][vo/gpu-next/libplacebo]     VK_KHR_calibrated_timestamps
[   0.096][d][vo/gpu-next/libplacebo]     VK_KHR_compute_shader_derivatives
[   0.096][d][vo/gpu-next/libplacebo]     VK_KHR_copy_commands2
[   0.096][d][vo/gpu-next/libplacebo]     VK_KHR_create_renderpass2
[   0.096][d][vo/gpu-next/libplacebo]     VK_KHR_dedicated_allocation
[   0.096][d][vo/gpu-next/libplacebo]     VK_KHR_deferred_host_operations
[   0.096][d][vo/gpu-next/libplacebo]     VK_KHR_depth_stencil_resolve
[   0.096][d][vo/gpu-next/libplacebo]     VK_KHR_descriptor_update_template
[   0.096][d][vo/gpu-next/libplacebo]     VK_KHR_device_group
[   0.096][d][vo/gpu-next/libplacebo]     VK_KHR_draw_indirect_count
[   0.096][d][vo/gpu-next/libplacebo]     VK_KHR_driver_properties
[   0.096][d][vo/gpu-next/libplacebo]     VK_KHR_dynamic_rendering
[   0.096][d][vo/gpu-next/libplacebo]     VK_KHR_dynamic_rendering_local_read
[   0.096][d][vo/gpu-next/libplacebo]     VK_KHR_external_fence
[   0.097][d][vo/gpu-next/libplacebo]     VK_KHR_external_fence_fd
[   0.097][d][vo/gpu-next/libplacebo]     VK_KHR_external_memory
[   0.097][d][vo/gpu-next/libplacebo]     VK_KHR_external_memory_fd
[   0.097][d][vo/gpu-next/libplacebo]     VK_KHR_external_semaphore
[   0.097][d][vo/gpu-next/libplacebo]     VK_KHR_external_semaphore_fd
[   0.097][d][vo/gpu-next/libplacebo]     VK_KHR_format_feature_flags2
[   0.097][d][vo/gpu-next/libplacebo]     VK_KHR_fragment_shader_barycentric
[   0.097][d][vo/gpu-next/libplacebo]     VK_KHR_fragment_shading_rate
[   0.097][d][vo/gpu-next/libplacebo]     VK_KHR_get_memory_requirements2
[   0.097][d][vo/gpu-next/libplacebo]     VK_KHR_global_priority
[   0.097][d][vo/gpu-next/libplacebo]     VK_KHR_image_format_list
[   0.097][d][vo/gpu-next/libplacebo]     VK_KHR_imageless_framebuffer
[   0.097][d][vo/gpu-next/libplacebo]     VK_KHR_incremental_present
[   0.097][d][vo/gpu-next/libplacebo]     VK_KHR_index_type_uint8
[   0.097][d][vo/gpu-next/libplacebo]     VK_KHR_line_rasterization
[   0.097][d][vo/gpu-next/libplacebo]     VK_KHR_load_store_op_none
[   0.097][d][vo/gpu-next/libplacebo]     VK_KHR_maintenance1
[   0.097][d][vo/gpu-next/libplacebo]     VK_KHR_maintenance2
[   0.097][d][vo/gpu-next/libplacebo]     VK_KHR_maintenance3
[   0.097][d][vo/gpu-next/libplacebo]     VK_KHR_maintenance4
[   0.097][d][vo/gpu-next/libplacebo]     VK_KHR_maintenance5
[   0.097][d][vo/gpu-next/libplacebo]     VK_KHR_maintenance6
[   0.097][d][vo/gpu-next/libplacebo]     VK_KHR_maintenance7
[   0.097][d][vo/gpu-next/libplacebo]     VK_KHR_map_memory2
[   0.097][d][vo/gpu-next/libplacebo]     VK_KHR_multiview
[   0.097][d][vo/gpu-next/libplacebo]     VK_KHR_pipeline_binary
[   0.097][d][vo/gpu-next/libplacebo]     VK_KHR_pipeline_executable_properties
[   0.097][d][vo/gpu-next/libplacebo]     VK_KHR_pipeline_library
[   0.097][d][vo/gpu-next/libplacebo]     VK_KHR_present_id
[   0.097][d][vo/gpu-next/libplacebo]     VK_KHR_present_wait
[   0.097][d][vo/gpu-next/libplacebo]     VK_KHR_push_descriptor
[   0.097][d][vo/gpu-next/libplacebo]     VK_KHR_ray_tracing_maintenance1
[   0.097][d][vo/gpu-next/libplacebo]     VK_KHR_ray_tracing_pipeline
[   0.097][d][vo/gpu-next/libplacebo]     VK_KHR_relaxed_block_layout
[   0.097][d][vo/gpu-next/libplacebo]     VK_KHR_sampler_mirror_clamp_to_edge
[   0.097][d][vo/gpu-next/libplacebo]     VK_KHR_sampler_ycbcr_conversion
[   0.097][d][vo/gpu-next/libplacebo]     VK_KHR_separate_depth_stencil_layouts
[   0.097][d][vo/gpu-next/libplacebo]     VK_KHR_shader_atomic_int64
[   0.097][d][vo/gpu-next/libplacebo]     VK_KHR_shader_clock
[   0.097][d][vo/gpu-next/libplacebo]     VK_KHR_shader_draw_parameters
[   0.097][d][vo/gpu-next/libplacebo]     VK_KHR_shader_expect_assume
[   0.097][d][vo/gpu-next/libplacebo]     VK_KHR_shader_float16_int8
[   0.097][d][vo/gpu-next/libplacebo]     VK_KHR_shader_float_controls
[   0.097][d][vo/gpu-next/libplacebo]     VK_KHR_shader_float_controls2
[   0.097][d][vo/gpu-next/libplacebo]     VK_KHR_shader_integer_dot_product
[   0.097][d][vo/gpu-next/libplacebo]     VK_KHR_shader_maximal_reconvergence
[   0.097][d][vo/gpu-next/libplacebo]     VK_KHR_shader_non_semantic_info
[   0.097][d][vo/gpu-next/libplacebo]     VK_KHR_shader_quad_control
[   0.097][d][vo/gpu-next/libplacebo]     VK_KHR_shader_relaxed_extended_instruction
[   0.097][d][vo/gpu-next/libplacebo]     VK_KHR_shader_subgroup_extended_types
[   0.097][d][vo/gpu-next/libplacebo]     VK_KHR_shader_subgroup_rotate
[   0.097][d][vo/gpu-next/libplacebo]     VK_KHR_shader_subgroup_uniform_control_flow
[   0.097][d][vo/gpu-next/libplacebo]     VK_KHR_shader_terminate_invocation
[   0.097][d][vo/gpu-next/libplacebo]     VK_KHR_shared_presentable_image
[   0.097][d][vo/gpu-next/libplacebo]     VK_KHR_spirv_1_4
[   0.097][d][vo/gpu-next/libplacebo]     VK_KHR_storage_buffer_storage_class
[   0.097][d][vo/gpu-next/libplacebo]     VK_KHR_swapchain
[   0.097][d][vo/gpu-next/libplacebo]     VK_KHR_swapchain_mutable_format
[   0.097][d][vo/gpu-next/libplacebo]     VK_KHR_synchronization2
[   0.097][d][vo/gpu-next/libplacebo]     VK_KHR_timeline_semaphore
[   0.097][d][vo/gpu-next/libplacebo]     VK_KHR_uniform_buffer_standard_layout
[   0.097][d][vo/gpu-next/libplacebo]     VK_KHR_variable_pointers
[   0.097][d][vo/gpu-next/libplacebo]     VK_KHR_vertex_attribute_divisor
[   0.097][d][vo/gpu-next/libplacebo]     VK_KHR_video_decode_h264
[   0.097][d][vo/gpu-next/libplacebo]     VK_KHR_video_decode_h265
[   0.097][d][vo/gpu-next/libplacebo]     VK_KHR_video_decode_queue
[   0.097][d][vo/gpu-next/libplacebo]     VK_KHR_video_encode_h264
[   0.097][d][vo/gpu-next/libplacebo]     VK_KHR_video_encode_h265
[   0.097][d][vo/gpu-next/libplacebo]     VK_KHR_video_encode_queue
[   0.097][d][vo/gpu-next/libplacebo]     VK_KHR_video_maintenance1
[   0.097][d][vo/gpu-next/libplacebo]     VK_KHR_video_queue
[   0.097][d][vo/gpu-next/libplacebo]     VK_KHR_vulkan_memory_model
[   0.097][d][vo/gpu-next/libplacebo]     VK_KHR_workgroup_memory_explicit_layout
[   0.097][d][vo/gpu-next/libplacebo]     VK_KHR_zero_initialize_workgroup_memory
[   0.097][d][vo/gpu-next/libplacebo]     VK_EXT_4444_formats
[   0.097][d][vo/gpu-next/libplacebo]     VK_EXT_attachment_feedback_loop_dynamic_state
[   0.097][d][vo/gpu-next/libplacebo]     VK_EXT_attachment_feedback_loop_layout
[   0.097][d][vo/gpu-next/libplacebo]     VK_EXT_blend_operation_advanced
[   0.097][d][vo/gpu-next/libplacebo]     VK_EXT_border_color_swizzle
[   0.097][d][vo/gpu-next/libplacebo]     VK_EXT_buffer_device_address
[   0.097][d][vo/gpu-next/libplacebo]     VK_EXT_calibrated_timestamps
[   0.097][d][vo/gpu-next/libplacebo]     VK_EXT_color_write_enable
[   0.097][d][vo/gpu-next/libplacebo]     VK_EXT_conditional_rendering
[   0.097][d][vo/gpu-next/libplacebo]     VK_EXT_conservative_rasterization
[   0.097][d][vo/gpu-next/libplacebo]     VK_EXT_custom_border_color
[   0.097][d][vo/gpu-next/libplacebo]     VK_EXT_depth_bias_control
[   0.097][d][vo/gpu-next/libplacebo]     VK_EXT_depth_clamp_control
[   0.097][d][vo/gpu-next/libplacebo]     VK_EXT_depth_clamp_zero_one
[   0.097][d][vo/gpu-next/libplacebo]     VK_EXT_depth_clip_control
[   0.097][d][vo/gpu-next/libplacebo]     VK_EXT_depth_clip_enable
[   0.097][d][vo/gpu-next/libplacebo]     VK_EXT_depth_range_unrestricted
[   0.097][d][vo/gpu-next/libplacebo]     VK_EXT_descriptor_buffer
[   0.097][d][vo/gpu-next/libplacebo]     VK_EXT_descriptor_indexing
[   0.097][d][vo/gpu-next/libplacebo]     VK_EXT_device_fault
[   0.097][d][vo/gpu-next/libplacebo]     VK_EXT_device_generated_commands
[   0.097][d][vo/gpu-next/libplacebo]     VK_EXT_discard_rectangles
[   0.097][d][vo/gpu-next/libplacebo]     VK_EXT_display_control
[   0.097][d][vo/gpu-next/libplacebo]     VK_EXT_dynamic_rendering_unused_attachments
[   0.097][d][vo/gpu-next/libplacebo]     VK_EXT_extended_dynamic_state
[   0.097][d][vo/gpu-next/libplacebo]     VK_EXT_extended_dynamic_state2
[   0.097][d][vo/gpu-next/libplacebo]     VK_EXT_extended_dynamic_state3
[   0.097][d][vo/gpu-next/libplacebo]     VK_EXT_external_memory_dma_buf
[   0.097][d][vo/gpu-next/libplacebo]     VK_EXT_external_memory_host
[   0.097][d][vo/gpu-next/libplacebo]     VK_EXT_fragment_shader_interlock
[   0.097][d][vo/gpu-next/libplacebo]     VK_EXT_global_priority
[   0.097][d][vo/gpu-next/libplacebo]     VK_EXT_global_priority_query
[   0.097][d][vo/gpu-next/libplacebo]     VK_EXT_graphics_pipeline_library
[   0.097][d][vo/gpu-next/libplacebo]     VK_EXT_host_image_copy
[   0.097][d][vo/gpu-next/libplacebo]     VK_EXT_host_query_reset
[   0.097][d][vo/gpu-next/libplacebo]     VK_EXT_image_2d_view_of_3d
[   0.097][d][vo/gpu-next/libplacebo]     VK_EXT_image_drm_format_modifier
[   0.097][d][vo/gpu-next/libplacebo]     VK_EXT_image_robustness
[   0.097][d][vo/gpu-next/libplacebo]     VK_EXT_image_sliced_view_of_3d
[   0.097][d][vo/gpu-next/libplacebo]     VK_EXT_image_view_min_lod
[   0.097][d][vo/gpu-next/libplacebo]     VK_EXT_index_type_uint8
[   0.097][d][vo/gpu-next/libplacebo]     VK_EXT_inline_uniform_block
[   0.097][d][vo/gpu-next/libplacebo]     VK_EXT_legacy_vertex_attributes
[   0.097][d][vo/gpu-next/libplacebo]     VK_EXT_line_rasterization
[   0.097][d][vo/gpu-next/libplacebo]     VK_EXT_load_store_op_none
[   0.097][d][vo/gpu-next/libplacebo]     VK_EXT_map_memory_placed
[   0.097][d][vo/gpu-next/libplacebo]     VK_EXT_memory_budget
[   0.097][d][vo/gpu-next/libplacebo]     VK_EXT_memory_priority
[   0.097][d][vo/gpu-next/libplacebo]     VK_EXT_mesh_shader
[   0.097][d][vo/gpu-next/libplacebo]     VK_EXT_multi_draw
[   0.097][d][vo/gpu-next/libplacebo]     VK_EXT_mutable_descriptor_type
[   0.097][d][vo/gpu-next/libplacebo]     VK_EXT_nested_command_buffer
[   0.097][d][vo/gpu-next/libplacebo]     VK_EXT_non_seamless_cube_map
[   0.097][d][vo/gpu-next/libplacebo]     VK_EXT_pageable_device_local_memory
[   0.097][d][vo/gpu-next/libplacebo]     VK_EXT_pci_bus_info
[   0.097][d][vo/gpu-next/libplacebo]     VK_EXT_physical_device_drm
[   0.097][d][vo/gpu-next/libplacebo]     VK_EXT_pipeline_creation_cache_control
[   0.097][d][vo/gpu-next/libplacebo]     VK_EXT_pipeline_creation_feedback
[   0.097][d][vo/gpu-next/libplacebo]     VK_EXT_pipeline_library_group_handles
[   0.097][d][vo/gpu-next/libplacebo]     VK_EXT_pipeline_robustness
[   0.097][d][vo/gpu-next/libplacebo]     VK_EXT_post_depth_coverage
[   0.097][d][vo/gpu-next/libplacebo]     VK_EXT_primitive_topology_list_restart
[   0.097][d][vo/gpu-next/libplacebo]     VK_EXT_primitives_generated_query
[   0.097][d][vo/gpu-next/libplacebo]     VK_EXT_private_data
[   0.097][d][vo/gpu-next/libplacebo]     VK_EXT_provoking_vertex
[   0.097][d][vo/gpu-next/libplacebo]     VK_EXT_queue_family_foreign
[   0.097][d][vo/gpu-next/libplacebo]     VK_EXT_robustness2
[   0.097][d][vo/gpu-next/libplacebo]     VK_EXT_sample_locations
[   0.097][d][vo/gpu-next/libplacebo]     VK_EXT_sampler_filter_minmax
[   0.097][d][vo/gpu-next/libplacebo]     VK_EXT_scalar_block_layout
[   0.097][d][vo/gpu-next/libplacebo]     VK_EXT_separate_stencil_usage
[   0.097][d][vo/gpu-next/libplacebo]     VK_EXT_shader_atomic_float
[   0.097][d][vo/gpu-next/libplacebo]     VK_EXT_shader_demote_to_helper_invocation
[   0.097][d][vo/gpu-next/libplacebo]     VK_EXT_shader_image_atomic_int64
[   0.097][d][vo/gpu-next/libplacebo]     VK_EXT_shader_module_identifier
[   0.097][d][vo/gpu-next/libplacebo]     VK_EXT_shader_object
[   0.097][d][vo/gpu-next/libplacebo]     VK_EXT_shader_replicated_composites
[   0.097][d][vo/gpu-next/libplacebo]     VK_EXT_shader_subgroup_ballot
[   0.097][d][vo/gpu-next/libplacebo]     VK_EXT_shader_subgroup_vote
[   0.097][d][vo/gpu-next/libplacebo]     VK_EXT_shader_viewport_index_layer
[   0.097][d][vo/gpu-next/libplacebo]     VK_EXT_subgroup_size_control
[   0.097][d][vo/gpu-next/libplacebo]     VK_EXT_swapchain_maintenance1
[   0.097][d][vo/gpu-next/libplacebo]     VK_EXT_texel_buffer_alignment
[   0.097][d][vo/gpu-next/libplacebo]     VK_EXT_tooling_info
[   0.097][d][vo/gpu-next/libplacebo]     VK_EXT_transform_feedback
[   0.097][d][vo/gpu-next/libplacebo]     VK_EXT_vertex_attribute_divisor
[   0.097][d][vo/gpu-next/libplacebo]     VK_EXT_vertex_input_dynamic_state
[   0.097][d][vo/gpu-next/libplacebo]     VK_EXT_ycbcr_2plane_444_formats
[   0.097][d][vo/gpu-next/libplacebo]     VK_EXT_ycbcr_image_arrays
[   0.097][d][vo/gpu-next/libplacebo]     VK_NV_clip_space_w_scaling
[   0.097][d][vo/gpu-next/libplacebo]     VK_NV_compute_shader_derivatives
[   0.097][d][vo/gpu-next/libplacebo]     VK_NV_copy_memory_indirect
[   0.097][d][vo/gpu-next/libplacebo]     VK_NV_corner_sampled_image
[   0.097][d][vo/gpu-next/libplacebo]     VK_NV_coverage_reduction_mode
[   0.097][d][vo/gpu-next/libplacebo]     VK_NV_cuda_kernel_launch
[   0.097][d][vo/gpu-next/libplacebo]     VK_NV_dedicated_allocation
[   0.097][d][vo/gpu-next/libplacebo]     VK_NV_dedicated_allocation_image_aliasing
[   0.097][d][vo/gpu-next/libplacebo]     VK_NV_descriptor_pool_overallocation
[   0.097][d][vo/gpu-next/libplacebo]     VK_NV_device_diagnostic_checkpoints
[   0.097][d][vo/gpu-next/libplacebo]     VK_NV_device_diagnostics_config
[   0.097][d][vo/gpu-next/libplacebo]     VK_NV_device_generated_commands
[   0.097][d][vo/gpu-next/libplacebo]     VK_NV_device_generated_commands_compute
[   0.097][d][vo/gpu-next/libplacebo]     VK_NV_extended_sparse_address_space
[   0.097][d][vo/gpu-next/libplacebo]     VK_NV_fill_rectangle
[   0.097][d][vo/gpu-next/libplacebo]     VK_NV_fragment_coverage_to_color
[   0.097][d][vo/gpu-next/libplacebo]     VK_NV_fragment_shader_barycentric
[   0.097][d][vo/gpu-next/libplacebo]     VK_NV_fragment_shading_rate_enums
[   0.097][d][vo/gpu-next/libplacebo]     VK_NV_framebuffer_mixed_samples
[   0.097][d][vo/gpu-next/libplacebo]     VK_NV_geometry_shader_passthrough
[   0.097][d][vo/gpu-next/libplacebo]     VK_NV_inherited_viewport_scissor
[   0.097][d][vo/gpu-next/libplacebo]     VK_NV_linear_color_attachment
[   0.097][d][vo/gpu-next/libplacebo]     VK_NV_low_latency
[   0.097][d][vo/gpu-next/libplacebo]     VK_NV_low_latency2
[   0.097][d][vo/gpu-next/libplacebo]     VK_NV_memory_decompression
[   0.097][d][vo/gpu-next/libplacebo]     VK_NV_mesh_shader
[   0.097][d][vo/gpu-next/libplacebo]     VK_NV_present_metering
[   0.097][d][vo/gpu-next/libplacebo]     VK_NV_raw_access_chains
[   0.097][d][vo/gpu-next/libplacebo]     VK_NV_ray_tracing
[   0.097][d][vo/gpu-next/libplacebo]     VK_NV_ray_tracing_invocation_reorder
[   0.097][d][vo/gpu-next/libplacebo]     VK_NV_representative_fragment_test
[   0.097][d][vo/gpu-next/libplacebo]     VK_NV_sample_mask_override_coverage
[   0.097][d][vo/gpu-next/libplacebo]     VK_NV_scissor_exclusive
[   0.097][d][vo/gpu-next/libplacebo]     VK_NV_shader_atomic_float16_vector
[   0.097][d][vo/gpu-next/libplacebo]     VK_NV_shader_image_footprint
[   0.097][d][vo/gpu-next/libplacebo]     VK_NV_shader_sm_builtins
[   0.097][d][vo/gpu-next/libplacebo]     VK_NV_shader_subgroup_partitioned
[   0.097][d][vo/gpu-next/libplacebo]     VK_NV_shading_rate_image
[   0.097][d][vo/gpu-next/libplacebo]     VK_NV_viewport_array2
[   0.097][d][vo/gpu-next/libplacebo]     VK_NV_viewport_swizzle
[   0.097][d][vo/gpu-next/libplacebo]     VK_NVX_binary_import
[   0.097][d][vo/gpu-next/libplacebo]     VK_NVX_image_view_handle
[   0.097][d][vo/gpu-next/libplacebo]     VK_NVX_multiview_per_view_attributes
[   0.097][d][vo/gpu-next/libplacebo]     VK_AMD_buffer_marker
[   0.097][d][vo/gpu-next/libplacebo]     VK_GOOGLE_user_type
[   0.097][v][vo/gpu-next/libplacebo] Creating vulkan device with extensions:
[   0.097][v][vo/gpu-next/libplacebo]     VK_KHR_swapchain
[   0.097][v][vo/gpu-next/libplacebo]     VK_KHR_swapchain
[   0.097][v][vo/gpu-next/libplacebo]     VK_KHR_external_memory_fd
[   0.097][v][vo/gpu-next/libplacebo]     VK_EXT_external_memory_dma_buf
[   0.097][v][vo/gpu-next/libplacebo]     VK_EXT_external_memory_host
[   0.097][v][vo/gpu-next/libplacebo]     VK_KHR_external_semaphore_fd
[   0.097][v][vo/gpu-next/libplacebo]     VK_EXT_pci_bus_info
[   0.097][v][vo/gpu-next/libplacebo]     VK_EXT_image_drm_format_modifier
[   0.097][v][vo/gpu-next/libplacebo]     VK_EXT_descriptor_buffer
[   0.097][v][vo/gpu-next/libplacebo]     VK_EXT_shader_atomic_float
[   0.097][v][vo/gpu-next/libplacebo]     VK_EXT_shader_object
[   0.097][v][vo/gpu-next/libplacebo]     VK_KHR_video_decode_queue
[   0.097][v][vo/gpu-next/libplacebo]     VK_KHR_video_decode_h264
[   0.097][v][vo/gpu-next/libplacebo]     VK_KHR_video_decode_h265
[   0.097][v][vo/gpu-next/libplacebo]     VK_KHR_video_queue
[   0.676][v][vo/gpu-next/libplacebo] Spent 579.325 ms creating vulkan device (slow!)
[   0.676][d][vo/gpu-next/libplacebo] Restricting QF 0 from 16 queues to 1
[   0.676][d][vo/gpu-next/libplacebo] Restricting QF 1 from 2 queues to 1
[   0.676][d][vo/gpu-next/libplacebo] Restricting QF 2 from 8 queues to 1
[   0.676][v][vo/gpu-next/libplacebo] Memory heaps supported by device:
[   0.676][v][vo/gpu-next/libplacebo]     0: flags 0x1 size 6144M
[   0.676][v][vo/gpu-next/libplacebo]     1: flags 0x0 size   11G
[   0.676][v][vo/gpu-next/libplacebo]     2: flags 0x1 size  246M
[   0.676][d][vo/gpu-next/libplacebo] Memory types supported by device:
[   0.676][d][vo/gpu-next/libplacebo]     0: flags 0x0 heap 1
[   0.676][d][vo/gpu-next/libplacebo]     1: flags 0x1 heap 0
[   0.676][d][vo/gpu-next/libplacebo]     2: flags 0x1 heap 0
[   0.676][d][vo/gpu-next/libplacebo]     3: flags 0x6 heap 1
[   0.676][d][vo/gpu-next/libplacebo]     4: flags 0xe heap 1
[   0.676][d][vo/gpu-next/libplacebo]     5: flags 0x7 heap 2
[   0.676][v][vo/gpu-next/libplacebo] Memory summary:     0 used     0 res     0 alloc, efficiency 100.00%, utilization 100.00%, max page:  384M
[   0.676][v][vo/gpu-next/libplacebo] shaderc SPIR-V version 1.6 rev 1
[   0.676][v][vo/gpu-next/libplacebo] Initialized SPIR-V compiler 'shaderc'
[   0.676][d][vo/gpu-next/libplacebo] DRM format modifier LINEAR of format r8 supports fewer caps (0x1dc03) than optimal tiling (0x1dd83), may result in limited capability!
[   0.676][d][vo/gpu-next/libplacebo] DRM format modifier LINEAR of format rg8 supports fewer caps (0x1dc03) than optimal tiling (0x1dd83), may result in limited capability!
[   0.676][d][vo/gpu-next/libplacebo] DRM format modifier LINEAR of format rgba8 supports fewer caps (0x1dc03) than optimal tiling (0x1dd83), may result in limited capability!
[   0.676][d][vo/gpu-next/libplacebo] DRM format modifier LINEAR of format rgba16hf supports fewer caps (0x1dc07) than optimal tiling (0x1dd87), may result in limited capability!
[   0.676][d][vo/gpu-next/libplacebo] DRM format modifier LINEAR of format rgba16f supports fewer caps (0x1dc07) than optimal tiling (0x1dd87), may result in limited capability!
[   0.676][d][vo/gpu-next/libplacebo] DRM format modifier LINEAR of format bgra8 supports fewer caps (0x1dc03) than optimal tiling (0x1dd83), may result in limited capability!
[   0.676][d][vo/gpu-next/libplacebo] DRM format modifier LINEAR of format bgr565 supports fewer caps (0x1dc01) than optimal tiling (0x1dd81), may result in limited capability!
[   0.676][d][vo/gpu-next/libplacebo] DRM format modifier LINEAR of format bgr5a1 supports fewer caps (0x1dc01) than optimal tiling (0x1dd81), may result in limited capability!
[   0.676][d][vo/gpu-next/libplacebo] DRM format modifier LINEAR of format rgb10a2 supports fewer caps (0x1dc03) than optimal tiling (0x1dd83), may result in limited capability!
[   0.676][d][vo/gpu-next/libplacebo] DRM format modifier LINEAR of format bgr10a2 supports fewer caps (0x1dc01) than optimal tiling (0x1dd81), may result in limited capability!
[   0.676][d][vo/gpu-next/libplacebo] Minimum texel alignment: 48
[   0.676][v][vo/gpu-next/libplacebo] GPU information:
[   0.676][v][vo/gpu-next/libplacebo]     GLSL version: 450 (vulkan)
[   0.676][v][vo/gpu-next/libplacebo]       max_shmem_size:            49152
[   0.676][v][vo/gpu-next/libplacebo]       max_group_threads:         1024
[   0.676][v][vo/gpu-next/libplacebo]       max_group_size[0]:         1024
[   0.676][v][vo/gpu-next/libplacebo]       max_group_size[1]:         1024
[   0.676][v][vo/gpu-next/libplacebo]       max_group_size[2]:         64
[   0.676][v][vo/gpu-next/libplacebo]       subgroup_size:             32
[   0.676][v][vo/gpu-next/libplacebo]       min_gather_offset:         -32
[   0.676][v][vo/gpu-next/libplacebo]       max_gather_offset:         31
[   0.676][v][vo/gpu-next/libplacebo]     Limits:
[   0.676][v][vo/gpu-next/libplacebo]       thread_safe:               1
[   0.676][v][vo/gpu-next/libplacebo]       callbacks:                 1
[   0.676][v][vo/gpu-next/libplacebo]       max_buf_size:              12467930112
[   0.676][v][vo/gpu-next/libplacebo]       max_ubo_size:              65536
[   0.676][v][vo/gpu-next/libplacebo]       max_ssbo_size:             4294967295
[   0.676][v][vo/gpu-next/libplacebo]       max_vbo_size:              6442450944
[   0.676][v][vo/gpu-next/libplacebo]       max_mapped_size:           12467930112
[   0.677][v][vo/gpu-next/libplacebo]       max_buffer_texels:         134217728
[   0.677][v][vo/gpu-next/libplacebo]       align_host_ptr:            4096
[   0.677][v][vo/gpu-next/libplacebo]       host_cached:               1
[   0.677][v][vo/gpu-next/libplacebo]       max_tex_1d_dim:            32768
[   0.677][v][vo/gpu-next/libplacebo]       max_tex_2d_dim:            32768
[   0.677][v][vo/gpu-next/libplacebo]       max_tex_3d_dim:            16384
[   0.677][v][vo/gpu-next/libplacebo]       blittable_1d_3d:           1
[   0.677][v][vo/gpu-next/libplacebo]       buf_transfer:              1
[   0.677][v][vo/gpu-next/libplacebo]       align_tex_xfer_pitch:      1
[   0.677][v][vo/gpu-next/libplacebo]       align_tex_xfer_offset:     4
[   0.677][v][vo/gpu-next/libplacebo]       max_variable_comps:        0
[   0.677][v][vo/gpu-next/libplacebo]       max_constants:             18446744073709551615
[   0.677][v][vo/gpu-next/libplacebo]       max_pushc_size:            256
[   0.677][v][vo/gpu-next/libplacebo]       align_vertex_stride:       1
[   0.677][v][vo/gpu-next/libplacebo]       max_dispatch[0]:           2147483647
[   0.677][v][vo/gpu-next/libplacebo]       max_dispatch[1]:           65535
[   0.677][v][vo/gpu-next/libplacebo]       max_dispatch[2]:           65535
[   0.677][v][vo/gpu-next/libplacebo]       fragment_queues:           1
[   0.677][v][vo/gpu-next/libplacebo]       compute_queues:            1
[   0.677][v][vo/gpu-next/libplacebo]     External API interop:
[   0.677][v][vo/gpu-next/libplacebo]       UUID: CE:46:DC:1F:47:D2:95:59:78:E7:A6:20:5E:82:E7:0C
[   0.677][v][vo/gpu-next/libplacebo]       PCI: 0000:01:00:0
[   0.677][v][vo/gpu-next/libplacebo]       buf export caps: 0x19
[   0.677][v][vo/gpu-next/libplacebo]       buf import caps: 0x19
[   0.677][v][vo/gpu-next/libplacebo]       tex export caps: 0x19
[   0.677][v][vo/gpu-next/libplacebo]       tex import caps: 0x19
[   0.677][v][vo/gpu-next/libplacebo]       sync export caps: 0x1
[   0.677][v][vo/gpu-next/libplacebo]       sync import caps: 0x0
[   0.677][d][vo/gpu-next/libplacebo] GPU texture formats:
[   0.677][d][vo/gpu-next/libplacebo]     NAME                 TYPE   SIZE COMP CAPS         EMU DEPTH         HOST_BITS     GLSL_TYPE  GLSL_FMT   FOURCC
[   0.677][d][vo/gpu-next/libplacebo]     r8                   UNORM  1    R    SsLRbBVutHWG n   {8  0  0  0 } {8  0  0  0 } float      r8         R8    
[   0.677][d][vo/gpu-next/libplacebo]     r8s                  SNORM  1    R    SsLRbBVutHWG n   {8  0  0  0 } {8  0  0  0 } float      r8_snorm         
[   0.677][d][vo/gpu-next/libplacebo]     rg8                  UNORM  2    RG   SsLRbBVutHWG n   {8  8  0  0 } {8  8  0  0 } vec2       rg8        GR88  
[   0.677][d][vo/gpu-next/libplacebo]     rg8s                 SNORM  2    RG   SsLRbBVutHWG n   {8  8  0  0 } {8  8  0  0 } vec2       rg8_snorm        
[   0.677][d][vo/gpu-next/libplacebo]     rgba8                UNORM  4    RGBA SsLRbBVutHWG n   {8  8  8  8 } {8  8  8  8 } vec4       rgba8      AB24  
[   0.677][d][vo/gpu-next/libplacebo]     rgba8s               SNORM  4    RGBA SsLRbBVutHWG n   {8  8  8  8 } {8  8  8  8 } vec4       rgba8_snorm       
[   0.677][d][vo/gpu-next/libplacebo]     bgra8                UNORM  4    BGRA SsLRbBVutHWG n   {8  8  8  8 } {8  8  8  8 } vec4       rgba8      AR24  
[   0.677][d][vo/gpu-next/libplacebo]     rgb10a2              UNORM  4    RGBA SsLRbBVutHWG n   {10 10 10 2 } {10 10 10 2 } vec4       rgb10_a2   AB30  
[   0.677][d][vo/gpu-next/libplacebo]     r16                  UNORM  2    R    SsLRbBVutHWG n   {16 0  0  0 } {16 0  0  0 } float      r16        R16   
[   0.677][d][vo/gpu-next/libplacebo]     r16hf                FLOAT  2    R    SsLRbBVutHWG n   {16 0  0  0 } {16 0  0  0 } float      r16f             
[   0.677][d][vo/gpu-next/libplacebo]     r16s                 SNORM  2    R    SsLRbBVutHWG n   {16 0  0  0 } {16 0  0  0 } float      r16_snorm        
[   0.677][d][vo/gpu-next/libplacebo]     rg16                 UNORM  4    RG   SsLRbBVutHWG n   {16 16 0  0 } {16 16 0  0 } vec2       rg16       GR32  
[   0.677][d][vo/gpu-next/libplacebo]     rg16hf               FLOAT  4    RG   SsLRbBVutHWG n   {16 16 0  0 } {16 16 0  0 } vec2       rg16f            
[   0.677][d][vo/gpu-next/libplacebo]     rg16s                SNORM  4    RG   SsLRbBVutHWG n   {16 16 0  0 } {16 16 0  0 } vec2       rg16_snorm       
[   0.677][d][vo/gpu-next/libplacebo]     rgba16               UNORM  8    RGBA SsLRbBVutHWG n   {16 16 16 16} {16 16 16 16} vec4       rgba16     AB48  
[   0.677][d][vo/gpu-next/libplacebo]     rgba16hf             FLOAT  8    RGBA SsLRbBVutHWG n   {16 16 16 16} {16 16 16 16} vec4       rgba16f    AB4H  
[   0.677][d][vo/gpu-next/libplacebo]     rgba16s              SNORM  8    RGBA SsLRbBVutHWG n   {16 16 16 16} {16 16 16 16} vec4       rgba16_snorm       
[   0.677][d][vo/gpu-next/libplacebo]     r32f                 FLOAT  4    R    SsLRbBVutHWG n   {32 0  0  0 } {32 0  0  0 } float      r32f             
[   0.677][d][vo/gpu-next/libplacebo]     rg32f                FLOAT  8    RG   SsLRbBVutHWG n   {32 32 0  0 } {32 32 0  0 } vec2       rg32f            
[   0.677][d][vo/gpu-next/libplacebo]     rgba32f              FLOAT  16   RGBA SsLRbBVutHWG n   {32 32 32 32} {32 32 32 32} vec4       rgba32f          
[   0.677][d][vo/gpu-next/libplacebo]     bgr5a1               UNORM  2    BGRA S-LRbB-u-H-G n   {5  5  5  1 } {5  5  5  1 } vec4                  AR15  
[   0.677][d][vo/gpu-next/libplacebo]     bgr565               UNORM  2    BGR  S-LRbB-u-H-G n   {5  6  5  0 } {5  6  5  0 } vec3                  RG16  
[   0.677][d][vo/gpu-next/libplacebo]     bgr10a2              UNORM  4    BGRA S-LRbBVu-H-G n   {10 10 10 2 } {10 10 10 2 } vec4                  AR30  
[   0.677][d][vo/gpu-next/libplacebo]     r8i                  SINT   1    R    Ss-R-BVutHWG n   {8  0  0  0 } {8  0  0  0 } int        r8i              
[   0.677][d][vo/gpu-next/libplacebo]     r8u                  UINT   1    R    Ss-R-BVutHWG n   {8  0  0  0 } {8  0  0  0 } uint       r8ui             
[   0.677][d][vo/gpu-next/libplacebo]     rg8i                 SINT   2    RG   Ss-R-BVutHWG n   {8  8  0  0 } {8  8  0  0 } ivec2      rg8i             
[   0.677][d][vo/gpu-next/libplacebo]     rg8u                 UINT   2    RG   Ss-R-BVutHWG n   {8  8  0  0 } {8  8  0  0 } uvec2      rg8ui            
[   0.677][d][vo/gpu-next/libplacebo]     rgba8i               SINT   4    RGBA Ss-R-BVutHWG n   {8  8  8  8 } {8  8  8  8 } ivec4      rgba8i           
[   0.677][d][vo/gpu-next/libplacebo]     rgba8u               UINT   4    RGBA Ss-R-BVutHWG n   {8  8  8  8 } {8  8  8  8 } uvec4      rgba8ui          
[   0.677][d][vo/gpu-next/libplacebo]     rgb10a2u             UINT   4    RGBA Ss-R-BVutHWG n   {10 10 10 2 } {10 10 10 2 } uvec4      rgb10_a2ui       
[   0.677][d][vo/gpu-next/libplacebo]     r16i                 SINT   2    R    Ss-R-BVutHWG n   {16 0  0  0 } {16 0  0  0 } int        r16i             
[   0.677][d][vo/gpu-next/libplacebo]     r16u                 UINT   2    R    Ss-R-BVutHWG n   {16 0  0  0 } {16 0  0  0 } uint       r16ui            
[   0.677][d][vo/gpu-next/libplacebo]     rg16i                SINT   4    RG   Ss-R-BVutHWG n   {16 16 0  0 } {16 16 0  0 } ivec2      rg16i            
[   0.677][d][vo/gpu-next/libplacebo]     rg16u                UINT   4    RG   Ss-R-BVutHWG n   {16 16 0  0 } {16 16 0  0 } uvec2      rg16ui           
[   0.677][d][vo/gpu-next/libplacebo]     rgba16i              SINT   8    RGBA Ss-R-BVutHWG n   {16 16 16 16} {16 16 16 16} ivec4      rgba16i          
[   0.677][d][vo/gpu-next/libplacebo]     rgba16u              UINT   8    RGBA Ss-R-BVutHWG n   {16 16 16 16} {16 16 16 16} uvec4      rgba16ui         
[   0.677][d][vo/gpu-next/libplacebo]     r32i                 SINT   4    R    Ss-R-BVutHWG n   {32 0  0  0 } {32 0  0  0 } int        r32i             
[   0.677][d][vo/gpu-next/libplacebo]     r32u                 UINT   4    R    Ss-R-BVutHWG n   {32 0  0  0 } {32 0  0  0 } uint       r32ui            
[   0.677][d][vo/gpu-next/libplacebo]     rg32i                SINT   8    RG   Ss-R-BVutHWG n   {32 32 0  0 } {32 32 0  0 } ivec2      rg32i            
[   0.677][d][vo/gpu-next/libplacebo]     rg32u                UINT   8    RG   Ss-R-BVutHWG n   {32 32 0  0 } {32 32 0  0 } uvec2      rg32ui           
[   0.677][d][vo/gpu-next/libplacebo]     rgba32i              SINT   16   RGBA Ss-R-BVutHWG n   {32 32 32 32} {32 32 32 32} ivec4      rgba32i          
[   0.677][d][vo/gpu-next/libplacebo]     rgba32u              UINT   16   RGBA Ss-R-BVutHWG n   {32 32 32 32} {32 32 32 32} uvec4      rgba32ui         
[   0.677][d][vo/gpu-next/libplacebo]     a1rgb5               UNORM  2    ARGB S-L----u-H-G n   {1  5  5  5 } {1  5  5  5 } vec4                  BA15  
[   0.677][d][vo/gpu-next/libplacebo]     a1bgr5               UNORM  2    ABGR S-L----u-H-G n   {1  5  5  5 } {1  5  5  5 } vec4                  RA15  
[   0.677][d][vo/gpu-next/libplacebo]     gr4                  UNORM  1    GR   S-L----u-H-G n   {4  4  0  0 } {4  4  0  0 } vec2                        
[   0.677][d][vo/gpu-next/libplacebo]     argb4                UNORM  2    ARGB S-L----u-H-G n   {4  4  4  4 } {4  4  4  4 } vec4                  BA12  
[   0.677][d][vo/gpu-next/libplacebo]     abgr4                UNORM  2    ABGR S-L----u-H-G n   {4  4  4  4 } {4  4  4  4 } vec4                  RA12  
[   0.677][d][vo/gpu-next/libplacebo]     rgb565               UNORM  2    RGB  S-L----u-H-G n   {5  6  5  0 } {5  6  5  0 } vec3                  BG16  
[   0.677][d][vo/gpu-next/libplacebo]     rx10                 UNORM  2    R    S-L------H-G n   {10 0  0  0 } {16 0  0  0 }                             
[   0.677][d][vo/gpu-next/libplacebo]     rxgx10               UNORM  4    RG   S-L------H-G n   {10 10 0  0 } {16 16 0  0 }                             
[   0.677][d][vo/gpu-next/libplacebo]     rx12                 UNORM  2    R    S-L------H-G n   {12 0  0  0 } {16 0  0  0 }                             
[   0.677][d][vo/gpu-next/libplacebo]     rxgx12               UNORM  4    RG   S-L------H-G n   {12 12 0  0 } {16 16 0  0 }                             
[   0.677][d][vo/gpu-next/libplacebo]     bgra8i               SINT   4    BGRA S-----Vu-H-G n   {8  8  8  8 } {8  8  8  8 } ivec4                       
[   0.677][d][vo/gpu-next/libplacebo]     bgra8u               UINT   4    BGRA S-----Vu-H-G n   {8  8  8  8 } {8  8  8  8 } uvec4                       
[   0.677][d][vo/gpu-next/libplacebo]     bgr10a2u             UINT   4    BGRA S-----Vu-H-G n   {10 10 10 2 } {10 10 10 2 } uvec4                       
[   0.677][d][vo/gpu-next/libplacebo]     rgb8i                SINT   3    RGB  ------V--H-- n   {8  8  8  0 } {8  8  8  0 } ivec3                       
[   0.677][d][vo/gpu-next/libplacebo]     rgb8s                SNORM  3    RGB  ------V--H-- n   {8  8  8  0 } {8  8  8  0 } vec3                        
[   0.677][d][vo/gpu-next/libplacebo]     rgb8u                UINT   3    RGB  ------V--H-- n   {8  8  8  0 } {8  8  8  0 } uvec3                       
[   0.677][d][vo/gpu-next/libplacebo]     bgr8                 UNORM  3    BGR  ------V--H-- n   {8  8  8  0 } {8  8  8  0 } vec3                  RG24  
[   0.677][d][vo/gpu-next/libplacebo]     bgr8i                SINT   3    BGR  ------V--H-- n   {8  8  8  0 } {8  8  8  0 } ivec3                       
[   0.677][d][vo/gpu-next/libplacebo]     bgr8u                UINT   3    BGR  ------V--H-- n   {8  8  8  0 } {8  8  8  0 } uvec3                       
[   0.677][d][vo/gpu-next/libplacebo]     rgb10a2i             SINT   4    RGBA ------V--H-- n   {10 10 10 2 } {10 10 10 2 } ivec4                       
[   0.677][d][vo/gpu-next/libplacebo]     rgb10a2s             SNORM  4    RGBA ------V--H-- n   {10 10 10 2 } {10 10 10 2 } vec4                        
[   0.677][d][vo/gpu-next/libplacebo]     bgr10a2i             SINT   4    BGRA ------V--H-- n   {10 10 10 2 } {10 10 10 2 } ivec4                       
[   0.677][d][vo/gpu-next/libplacebo]     bgr10a2s             SNORM  4    BGRA ------V--H-- n   {10 10 10 2 } {10 10 10 2 } vec4                        
[   0.677][d][vo/gpu-next/libplacebo]     rgb16hf              FLOAT  6    RGB  ------V--H-- n   {16 16 16 0 } {16 16 16 0 } vec3                        
[   0.677][d][vo/gpu-next/libplacebo]     rgb16i               SINT   6    RGB  ------V--H-- n   {16 16 16 0 } {16 16 16 0 } ivec3                       
[   0.677][d][vo/gpu-next/libplacebo]     rgb16s               SNORM  6    RGB  ------V--H-- n   {16 16 16 0 } {16 16 16 0 } vec3                        
[   0.677][d][vo/gpu-next/libplacebo]     rgb16u               UINT   6    RGB  ------V--H-- n   {16 16 16 0 } {16 16 16 0 } uvec3                       
[   0.677][d][vo/gpu-next/libplacebo]     rgb32f               FLOAT  12   RGB  ------Vu-H-- n   {32 32 32 0 } {32 32 32 0 } vec3                        
[   0.677][d][vo/gpu-next/libplacebo]     rgb32i               SINT   12   RGB  ------Vu-H-- n   {32 32 32 0 } {32 32 32 0 } ivec3                       
[   0.677][d][vo/gpu-next/libplacebo]     rgb32u               UINT   12   RGB  ------Vu-H-- n   {32 32 32 0 } {32 32 32 0 } uvec3                       
[   0.677][d][vo/gpu-next/libplacebo]     rgb8                 UNORM  3    RGB  SsLRbBV--HWG y   {8  8  8  0 } {8  8  8  0 } vec3       rgba8      BG24  
[   0.677][d][vo/gpu-next/libplacebo]     rgb16                UNORM  6    RGB  SsLRbBV--HWG y   {16 16 16 0 } {16 16 16 0 } vec3       rgba16           
[   0.677][d][vo/gpu-next/libplacebo]     r16f                 FLOAT  4    R    SsLRbB---HWG y   {16 0  0  0 } {32 0  0  0 }            r16f             
[   0.677][d][vo/gpu-next/libplacebo]     rg16f                FLOAT  8    RG   SsLRbB---HWG y   {16 16 0  0 } {32 32 0  0 }            rg16f            
[   0.677][d][vo/gpu-next/libplacebo]     rgba16f              FLOAT  16   RGBA SsLRbB---HWG y   {16 16 16 16} {32 32 32 32}            rgba16f          
[   0.677][d][vo/gpu-next/libplacebo]     rgb16f               FLOAT  12   RGB  ---------H-- y   {16 16 16 0 } {32 32 32 0 }                             
[   0.677][d][vo/gpu-next/libplacebo]     g8_b8_r8_420         UNORM  0         ------------ n   {8  8  8  0 } {0  0  0  0 }                       YU12  
[   0.677][d][vo/gpu-next/libplacebo]     g8_b8_r8_422         UNORM  0         ------------ n   {8  8  8  0 } {0  0  0  0 }                       YU16  
[   0.677][d][vo/gpu-next/libplacebo]     g8_b8_r8_444         UNORM  0         ------------ n   {8  8  8  0 } {0  0  0  0 }                       YU24  
[   0.677][d][vo/gpu-next/libplacebo]     g8_br8_420           UNORM  0         ------------ n   {8  8  8  0 } {0  0  0  0 }                       NV12  
[   0.677][d][vo/gpu-next/libplacebo]     g8_br8_422           UNORM  0         ------------ n   {8  8  8  0 } {0  0  0  0 }                       NV16  
[   0.677][d][vo/gpu-next/libplacebo]     g8_br8_444           UNORM  0         ------------ n   {8  8  8  0 } {0  0  0  0 }                       NV24  
[   0.677][d][vo/gpu-next/libplacebo]     gx10_bx10_rx10_420   UNORM  0         ------------ n   {10 10 10 0 } {0  0  0  0 }                             
[   0.677][d][vo/gpu-next/libplacebo]     gx10_bx10_rx10_422   UNORM  0         ------------ n   {10 10 10 0 } {0  0  0  0 }                             
[   0.677][d][vo/gpu-next/libplacebo]     gx10_bx10_rx10_444   UNORM  0         ------------ n   {10 10 10 0 } {0  0  0  0 }                       Q410  
[   0.677][d][vo/gpu-next/libplacebo]     gx10_bxrx10_420      UNORM  0         ------------ n   {10 10 10 0 } {0  0  0  0 }                       P010  
[   0.677][d][vo/gpu-next/libplacebo]     gx10_bxrx10_422      UNORM  0         ------------ n   {10 10 10 0 } {0  0  0  0 }                       P210  
[   0.677][d][vo/gpu-next/libplacebo]     gx10_bxrx10_444      UNORM  0         ------------ n   {10 10 10 0 } {0  0  0  0 }                             
[   0.677][d][vo/gpu-next/libplacebo]     gx12_bx12_rx12_420   UNORM  0         ------------ n   {12 12 12 0 } {0  0  0  0 }                             
[   0.677][d][vo/gpu-next/libplacebo]     gx12_bx12_rx12_422   UNORM  0         ------------ n   {12 12 12 0 } {0  0  0  0 }                             
[   0.677][d][vo/gpu-next/libplacebo]     gx12_bx12_rx12_444   UNORM  0         ------------ n   {12 12 12 0 } {0  0  0  0 }                             
[   0.677][d][vo/gpu-next/libplacebo]     gx12_bxrx12_420      UNORM  0         ------------ n   {12 12 12 0 } {0  0  0  0 }                       P012  
[   0.677][d][vo/gpu-next/libplacebo]     gx12_bxrx12_422      UNORM  0         ------------ n   {12 12 12 0 } {0  0  0  0 }                             
[   0.677][d][vo/gpu-next/libplacebo]     gx12_bxrx12_444      UNORM  0         ------------ n   {12 12 12 0 } {0  0  0  0 }                             
[   0.677][d][vo/gpu-next/libplacebo]     g16_b16_r16_420      UNORM  0         ------------ n   {16 16 16 0 } {0  0  0  0 }                             
[   0.677][d][vo/gpu-next/libplacebo]     g16_b16_r16_422      UNORM  0         ------------ n   {16 16 16 0 } {0  0  0  0 }                             
[   0.677][d][vo/gpu-next/libplacebo]     g16_b16_r16_444      UNORM  0         ------------ n   {16 16 16 0 } {0  0  0  0 }                             
[   0.677][d][vo/gpu-next/libplacebo]     g16_br16_420         UNORM  0         ------------ n   {16 16 16 0 } {0  0  0  0 }                       P016  
[   0.677][d][vo/gpu-next/libplacebo]     g16_br16_422         UNORM  0         ------------ n   {16 16 16 0 } {0  0  0  0 }                             
[   0.677][d][vo/gpu-next/libplacebo]     g16_br16_444         UNORM  0         ------------ n   {16 16 16 0 } {0  0  0  0 }                             
[   0.677][v][vo/gpu-next/libplacebo] Available surface configurations:
[   0.677][v][vo/gpu-next/libplacebo]     0: VK_FORMAT_R8G8B8A8_SRGB                  VK_COLOR_SPACE_SRGB_NONLINEAR_KHR
[   0.677][v][vo/gpu-next/libplacebo]     1: VK_FORMAT_R8G8B8A8_UNORM                 VK_COLOR_SPACE_SRGB_NONLINEAR_KHR
[   0.677][v][vo/gpu-next/libplacebo]     2: VK_FORMAT_R16G16B16A16_SFLOAT            VK_COLOR_SPACE_SRGB_NONLINEAR_KHR
[   0.677][v][vo/gpu-next/libplacebo]     3: VK_FORMAT_B8G8R8A8_SRGB                  VK_COLOR_SPACE_SRGB_NONLINEAR_KHR
[   0.677][v][vo/gpu-next/libplacebo]     4: VK_FORMAT_B8G8R8A8_UNORM                 VK_COLOR_SPACE_SRGB_NONLINEAR_KHR
[   0.677][v][vo/gpu-next/libplacebo]     5: VK_FORMAT_A2R10G10B10_UNORM_PACK32       VK_COLOR_SPACE_SRGB_NONLINEAR_KHR
[   0.677][v][vo/gpu-next/libplacebo]     6: VK_FORMAT_A2B10G10R10_UNORM_PACK32       VK_COLOR_SPACE_SRGB_NONLINEAR_KHR
[   0.677][v][vo/gpu-next/libplacebo] Picked surface configuration 5: VK_FORMAT_A2R10G10B10_UNORM_PACK32 + VK_COLOR_SPACE_SRGB_NONLINEAR_KHR
[   0.677][d][global] config path: 'cache/shaders_cache' -> '/home/zen/.config/mpv/cache/shaders_cache'
[   0.677][d][global] user path: '~~/cache/shaders_cache' -> '/home/zen/.config/mpv/cache/shaders_cache'
[   0.677][d][global] cache path: '' -> '/home/zen/.cache/mpv'
[   0.677][d][global] config path: 'shaders/igv/KrigBilateral.glsl' -> '/home/zen/.config/mpv/shaders/igv/KrigBilateral.glsl'
[   0.677][d][global] user path: '~~/shaders/igv/KrigBilateral.glsl' -> '/home/zen/.config/mpv/shaders/igv/KrigBilateral.glsl'
[   0.677][v][vo/gpu-next/libplacebo] Registering hook pass: KrigBilateral Downscaling Y pass 1
[   0.677][v][vo/gpu-next/libplacebo] Registering hook pass: KrigBilateral Downscaling Y pass 2
[   0.677][v][vo/gpu-next/libplacebo] Registering hook pass: KrigBilateral Upscaling UV
[   0.677][d][vo/gpu-next/libplacebo] Loaded user shader:
[   0.677][d][vo/gpu-next/libplacebo] [  1] // KrigBilateral by Shiandow
[   0.677][d][vo/gpu-next/libplacebo] [  2] //
[   0.677][d][vo/gpu-next/libplacebo] [  3] // This library is free software; you can redistribute it and/or
[   0.677][d][vo/gpu-next/libplacebo] [  4] // modify it under the terms of the GNU Lesser General Public
[   0.677][d][vo/gpu-next/libplacebo] [  5] // License as published by the Free Software Foundation; either
[   0.677][d][vo/gpu-next/libplacebo] [  6] // version 3.0 of the License, or (at your option) any later version.
[   0.677][d][vo/gpu-next/libplacebo] [  7] // 
[   0.677][d][vo/gpu-next/libplacebo] [  8] // This library is distributed in the hope that it will be useful,
[   0.677][d][vo/gpu-next/libplacebo] [  9] // but WITHOUT ANY WARRANTY; without even the implied warranty of
[   0.677][d][vo/gpu-next/libplacebo] [ 10] // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
[   0.677][d][vo/gpu-next/libplacebo] [ 11] // Lesser General Public License for more details.
[   0.677][d][vo/gpu-next/libplacebo] [ 12] // 
[   0.677][d][vo/gpu-next/libplacebo] [ 13] // You should have received a copy of the GNU Lesser General Public
[   0.677][d][vo/gpu-next/libplacebo] [ 14] // License along with this library.
[   0.677][d][vo/gpu-next/libplacebo] [ 15] 
[   0.677][d][vo/gpu-next/libplacebo] [ 16] //!HOOK CHROMA
[   0.677][d][vo/gpu-next/libplacebo] [ 17] //!BIND LUMA
[   0.677][d][vo/gpu-next/libplacebo] [ 18] //!BIND HOOKED
[   0.677][d][vo/gpu-next/libplacebo] [ 19] //!SAVE LOWRES_Y
[   0.677][d][vo/gpu-next/libplacebo] [ 20] //!WIDTH LUMA.w
[   0.677][d][vo/gpu-next/libplacebo] [ 21] //!WHEN CHROMA.w LUMA.w <
[   0.677][d][vo/gpu-next/libplacebo] [ 22] //!DESC KrigBilateral Downscaling Y pass 1
[   0.677][d][vo/gpu-next/libplacebo] [ 23] 
[   0.677][d][vo/gpu-next/libplacebo] [ 24] #define offset      vec2(0)
[   0.677][d][vo/gpu-next/libplacebo] [ 25] 
[   0.677][d][vo/gpu-next/libplacebo] [ 26] #define axis        1
[   0.677][d][vo/gpu-next/libplacebo] [ 27] 
[   0.677][d][vo/gpu-next/libplacebo] [ 28] #define Kernel(x)   dot(vec3(0.42659, -0.49656, 0.076849), cos(vec3(0, 1, 2) * acos(-1.) * (x + 1.)))
[   0.677][d][vo/gpu-next/libplacebo] [ 29] 
[   0.677][d][vo/gpu-next/libplacebo] [ 30] vec4 hook() {
[   0.677][d][vo/gpu-next/libplacebo] [ 31]     // Calculate bounds
[   0.677][d][vo/gpu-next/libplacebo] [ 32]     float low  = ceil((LUMA_pos - CHROMA_pt) * LUMA_size - offset - 0.5)[axis];
[   0.677][d][vo/gpu-next/libplacebo] [ 33]     float high = floor((LUMA_pos + CHROMA_pt) * LUMA_size - offset - 0.5)[axis];
[   0.677][d][vo/gpu-next/libplacebo] [ 34] 
[   0.677][d][vo/gpu-next/libplacebo] [ 35]     float W = 0.0;
[   0.677][d][vo/gpu-next/libplacebo] [ 36]     vec4 avg = vec4(0);
[   0.677][d][vo/gpu-next/libplacebo] [ 37]     vec2 pos = LUMA_pos;
[   0.677][d][vo/gpu-next/libplacebo] [ 38] 
[   0.677][d][vo/gpu-next/libplacebo] [ 39]     for (float k = low; k <= high; k++) {
[   0.677][d][vo/gpu-next/libplacebo] [ 40]         pos[axis] = LUMA_pt[axis] * (k - offset[axis] + 0.5);
[   0.677][d][vo/gpu-next/libplacebo] [ 41]         float rel = (pos[axis] - LUMA_pos[axis])*CHROMA_size[axis];
[   0.677][d][vo/gpu-next/libplacebo] [ 42]         float w = Kernel(rel);
[   0.677][d][vo/gpu-next/libplacebo] [ 43] 
[   0.677][d][vo/gpu-next/libplacebo] [ 44]         vec4 y = textureGrad(LUMA_raw, pos, vec2(0.0), vec2(0.0)).xxxx * LUMA_mul;
[   0.677][d][vo/gpu-next/libplacebo] [ 45]         y.y *= y.y;
[   0.677][d][vo/gpu-next/libplacebo] [ 46]         avg += w * y;
[   0.677][d][vo/gpu-next/libplacebo] [ 47]         W += w;
[   0.677][d][vo/gpu-next/libplacebo] [ 48]     }
[   0.677][d][vo/gpu-next/libplacebo] [ 49]     avg /= W;
[   0.677][d][vo/gpu-next/libplacebo] [ 50]     avg.y = abs(avg.y - avg.x * avg.x);
[   0.677][d][vo/gpu-next/libplacebo] [ 51]     return avg;
[   0.677][d][vo/gpu-next/libplacebo] [ 52] }
[   0.677][d][vo/gpu-next/libplacebo] [ 53] 
[   0.677][d][vo/gpu-next/libplacebo] [ 54] //!HOOK CHROMA
[   0.677][d][vo/gpu-next/libplacebo] [ 55] //!BIND LOWRES_Y
[   0.677][d][vo/gpu-next/libplacebo] [ 56] //!BIND HOOKED
[   0.677][d][vo/gpu-next/libplacebo] [ 57] //!SAVE LOWRES_Y
[   0.677][d][vo/gpu-next/libplacebo] [ 58] //!WHEN CHROMA.w LUMA.w <
[   0.677][d][vo/gpu-next/libplacebo] [ 59] //!DESC KrigBilateral Downscaling Y pass 2
[   0.677][d][vo/gpu-next/libplacebo] [ 60] 
[   0.677][d][vo/gpu-next/libplacebo] [ 61] #define offset      vec2(0)
[   0.677][d][vo/gpu-next/libplacebo] [ 62] 
[   0.677][d][vo/gpu-next/libplacebo] [ 63] #define axis        0
[   0.677][d][vo/gpu-next/libplacebo] [ 64] 
[   0.677][d][vo/gpu-next/libplacebo] [ 65] #define Kernel(x)   dot(vec3(0.42659, -0.49656, 0.076849), cos(vec3(0, 1, 2) * acos(-1.) * (x + 1.)))
[   0.677][d][vo/gpu-next/libplacebo] [ 66] 
[   0.677][d][vo/gpu-next/libplacebo] [ 67] vec4 hook() {
[   0.677][d][vo/gpu-next/libplacebo] [ 68]     // Calculate bounds
[   0.677][d][vo/gpu-next/libplacebo] [ 69]     float low  = ceil((LOWRES_Y_pos - CHROMA_pt) * LOWRES_Y_size - offset - 0.5)[axis];
[   0.677][d][vo/gpu-next/libplacebo] [ 70]     float high = floor((LOWRES_Y_pos + CHROMA_pt) * LOWRES_Y_size - offset - 0.5)[axis];
[   0.677][d][vo/gpu-next/libplacebo] [ 71] 
[   0.677][d][vo/gpu-next/libplacebo] [ 72]     float W = 0.0;
[   0.677][d][vo/gpu-next/libplacebo] [ 73]     vec4 avg = vec4(0);
[   0.677][d][vo/gpu-next/libplacebo] [ 74]     vec2 pos = LOWRES_Y_pos;
[   0.677][d][vo/gpu-next/libplacebo] [ 75] 
[   0.677][d][vo/gpu-next/libplacebo] [ 76]     for (float k = low; k <= high; k++) {
[   0.677][d][vo/gpu-next/libplacebo] [ 77]         pos[axis] = LOWRES_Y_pt[axis] * (k - offset[axis] + 0.5);
[   0.677][d][vo/gpu-next/libplacebo] [ 78]         float rel = (pos[axis] - LOWRES_Y_pos[axis])*CHROMA_size[axis];
[   0.677][d][vo/gpu-next/libplacebo] [ 79]         float w = Kernel(rel);
[   0.677][d][vo/gpu-next/libplacebo] [ 80] 
[   0.677][d][vo/gpu-next/libplacebo] [ 81]         vec4 y = textureGrad(LOWRES_Y_raw, pos, vec2(0.0), vec2(0.0)).xxxx * LOWRES_Y_mul;
[   0.677][d][vo/gpu-next/libplacebo] [ 82]         y.y *= y.y;
[   0.677][d][vo/gpu-next/libplacebo] [ 83]         avg += w * y;
[   0.677][d][vo/gpu-next/libplacebo] [ 84]         W += w;
[   0.677][d][vo/gpu-next/libplacebo] [ 85]     }
[   0.677][d][vo/gpu-next/libplacebo] [ 86]     avg /= W;
[   0.677][d][vo/gpu-next/libplacebo] [ 87]     avg.y = abs(avg.y - avg.x * avg.x) + LOWRES_Y_texOff(0).y;
[   0.677][d][vo/gpu-next/libplacebo] [ 88]     return avg;
[   0.677][d][vo/gpu-next/libplacebo] [ 89] }
[   0.677][d][vo/gpu-next/libplacebo] [ 90] 
[   0.677][d][vo/gpu-next/libplacebo] [ 91] //!HOOK CHROMA
[   0.677][d][vo/gpu-next/libplacebo] [ 92] //!BIND HOOKED
[   0.677][d][vo/gpu-next/libplacebo] [ 93] //!BIND LUMA
[   0.677][d][vo/gpu-next/libplacebo] [ 94] //!BIND LOWRES_Y
[   0.677][d][vo/gpu-next/libplacebo] [ 95] //!WIDTH LUMA.w
[   0.677][d][vo/gpu-next/libplacebo] [ 96] //!HEIGHT LUMA.h
[   0.677][d][vo/gpu-next/libplacebo] [ 97] //!WHEN CHROMA.w LUMA.w <
[   0.677][d][vo/gpu-next/libplacebo] [ 98] //!OFFSET ALIGN
[   0.677][d][vo/gpu-next/libplacebo] [ 99] //!DESC KrigBilateral Upscaling UV
[   0.677][d][vo/gpu-next/libplacebo] [100] 
[   0.677][d][vo/gpu-next/libplacebo] [101] #define sigma_nsq   256.0/(255.0*255.0)
[   0.677][d][vo/gpu-next/libplacebo] [102] #define N           8
[   0.677][d][vo/gpu-next/libplacebo] [103] #define sqr(x)      dot(x,x)
[   0.677][d][vo/gpu-next/libplacebo] [104] 
[   0.677][d][vo/gpu-next/libplacebo] [105] #define M(i,j)      Mx[min(i,j)*N + max(i,j) - (min(i,j)*(min(i,j)+1))/2]
[   0.677][d][vo/gpu-next/libplacebo] [106] 
[   0.677][d][vo/gpu-next/libplacebo] [107] #define C(i,j)      (inversesqrt(1.0 + (X[i].y + X[j].y) / Var) * exp(-0.5 * (sqr(X[i].x - X[j].x) / (localVar + X[i].y + X[j].y) + sqr((coords[i] - coords[j]) / radius))) /*+ (X[i].x - y) * (X[j].x - y) / Var*/)  // commented out part works well only on test patterns
[   0.677][d][vo/gpu-next/libplacebo] [108] #define c(i)        (inversesqrt(1.0 + X[i].y / Var) * exp(-0.5 * (sqr(X[i].x - y) / (localVar + X[i].y) + sqr((coords[i] - offset) / radius))))
[   0.677][d][vo/gpu-next/libplacebo] [109] 
[   0.677][d][vo/gpu-next/libplacebo] [110] #define getnsum(i)  X[i] = vec4(LOWRES_Y_tex(LOWRES_Y_pt*(pos+coords[i]+vec2(0.5))).xy, \
[   0.677][d][vo/gpu-next/libplacebo] [111]                                 CHROMA_tex(CHROMA_pt*(pos+coords[i]+vec2(0.5))).xy); \
[   0.677][d][vo/gpu-next/libplacebo] [112]                     w = clamp(1.5 - abs(coords[i]), 0.0, 1.0); \
[   0.677][d][vo/gpu-next/libplacebo] [113]                     total += w.x*w.y*vec4(X[i].x, X[i].x * X[i].x, X[i].y, 1.0);
[   0.677][d][vo/gpu-next/libplacebo] [114] 
[   0.677][d][vo/gpu-next/libplacebo] [115] #define I3(f, n)    f(n) f(n+1) f(n+2)
[   0.677][d][vo/gpu-next/libplacebo] [116] #define I9(f, n)    I3(f, n) I3(f, n+3) I3(f, n+6)
[   0.677][d][vo/gpu-next/libplacebo] [117] 
[   0.677][d][vo/gpu-next/libplacebo] [118] vec4 hook() {
[   0.677][d][vo/gpu-next/libplacebo] [119]     vec2 pos = CHROMA_pos * HOOKED_size - vec2(0.5);
[   0.677][d][vo/gpu-next/libplacebo] [120]     vec2 offset = pos - round(pos);
[   0.677][d][vo/gpu-next/libplacebo] [121]     pos -= offset;
[   0.677][d][vo/gpu-next/libplacebo] [122] 
[   0.677][d][vo/gpu-next/libplacebo] [123]     vec2 coords[N+1];
[   0.677][d][vo/gpu-next/libplacebo] [124]     vec4 X[N+1];
[   0.677][d][vo/gpu-next/libplacebo] [125]     vec2 w;
[   0.677][d][vo/gpu-next/libplacebo] [126]     vec4 total = vec4(0);
[   0.677][d][vo/gpu-next/libplacebo] [127] 
[   0.677][d][vo/gpu-next/libplacebo] [128]     coords[0] = vec2(-1,-1); coords[1] = vec2(-1, 0); coords[2] = vec2(-1, 1);
[   0.677][d][vo/gpu-next/libplacebo] [129]     coords[3] = vec2( 0,-1); coords[4] = vec2( 0, 1); coords[5] = vec2( 1,-1);
[   0.677][d][vo/gpu-next/libplacebo] [130]     coords[6] = vec2( 1, 0); coords[7] = vec2( 1, 1); coords[8] = vec2( 0, 0);
[   0.677][d][vo/gpu-next/libplacebo] [131] 
[   0.677][d][vo/gpu-next/libplacebo] [132]     I9(getnsum, 0)
[   0.677][d][vo/gpu-next/libplacebo] [133] 
[   0.677][d][vo/gpu-next/libplacebo] [134]     total.xyz /= total.w;
[   0.677][d][vo/gpu-next/libplacebo] [135]     float localVar = abs(total.y - total.x * total.x) + sigma_nsq;
[   0.677][d][vo/gpu-next/libplacebo] [136]     float Var = localVar + total.z;
[   0.677][d][vo/gpu-next/libplacebo] [137]     float radius = 1.5;  // mix(1.5, 1.0, sigma_nsq / Var);
[   0.677][d][vo/gpu-next/libplacebo] [138] 
[   0.677][d][vo/gpu-next/libplacebo] [139]     float y = LUMA_texOff(0).x;
[   0.677][d][vo/gpu-next/libplacebo] [140]     float Mx[(N*(N+1))/2];
[   0.677][d][vo/gpu-next/libplacebo] [141]     float b[N];
[   0.677][d][vo/gpu-next/libplacebo] [142]     vec2 interp = X[N].zw;
[   0.677][d][vo/gpu-next/libplacebo] [143] 
[   0.677][d][vo/gpu-next/libplacebo] [144]     b[0] = c(0) - c(N) - C(0,N) + C(N,N); M(0, 0) = C(0,0) - C(0,N) - C(0,N) + C(N,N); M(0, 1) = C(0,1) - C(1,N) - C(0,N) + C(N,N); M(0, 2) = C(0,2) - C(2,N) - C(0,N) + C(N,N); M(0, 3) = C(0,3) - C(3,N) - C(0,N) + C(N,N); M(0, 4) = C(0,4) - C(4,N) - C(0,N) + C(N,N); M(0, 5) = C(0,5) - C(5,N) - C(0,N) + C(N,N); M(0, 6) = C(0,6) - C(6,N) - C(0,N) + C(N,N); M(0, 7) = C(0,7) - C(7,N) - C(0,N) + C(N,N);
[   0.677][d][vo/gpu-next/libplacebo] [145]     b[1] = c(1) - c(N) - C(1,N) + C(N,N); M(1, 1) = C(1,1) - C(1,N) - C(1,N) + C(N,N); M(1, 2) = C(1,2) - C(2,N) - C(1,N) + C(N,N); M(1, 3) = C(1,3) - C(3,N) - C(1,N) + C(N,N); M(1, 4) = C(1,4) - C(4,N) - C(1,N) + C(N,N); M(1, 5) = C(1,5) - C(5,N) - C(1,N) + C(N,N); M(1, 6) = C(1,6) - C(6,N) - C(1,N) + C(N,N); M(1, 7) = C(1,7) - C(7,N) - C(1,N) + C(N,N);
[   0.677][d][vo/gpu-next/libplacebo] [146]     b[2] = c(2) - c(N) - C(2,N) + C(N,N); M(2, 2) = C(2,2) - C(2,N) - C(2,N) + C(N,N); M(2, 3) = C(2,3) - C(3,N) - C(2,N) + C(N,N); M(2, 4) = C(2,4) - C(4,N) - C(2,N) + C(N,N); M(2, 5) = C(2,5) - C(5,N) - C(2,N) + C(N,N); M(2, 6) = C(2,6) - C(6,N) - C(2,N) + C(N,N); M(2, 7) = C(2,7) - C(7,N) - C(2,N) + C(N,N);
[   0.677][d][vo/gpu-next/libplacebo] [147]     b[3] = c(3) - c(N) - C(3,N) + C(N,N); M(3, 3) = C(3,3) - C(3,N) - C(3,N) + C(N,N); M(3, 4) = C(3,4) - C(4,N) - C(3,N) + C(N,N); M(3, 5) = C(3,5) - C(5,N) - C(3,N) + C(N,N); M(3, 6) = C(3,6) - C(6,N) - C(3,N) + C(N,N); M(3, 7) = C(3,7) - C(7,N) - C(3,N) + C(N,N);
[   0.677][d][vo/gpu-next/libplacebo] [148]     b[4] = c(4) - c(N) - C(4,N) + C(N,N); M(4, 4) = C(4,4) - C(4,N) - C(4,N) + C(N,N); M(4, 5) = C(4,5) - C(5,N) - C(4,N) + C(N,N); M(4, 6) = C(4,6) - C(6,N) - C(4,N) + C(N,N); M(4, 7) = C(4,7) - C(7,N) - C(4,N) + C(N,N);
[   0.677][d][vo/gpu-next/libplacebo] [149]     b[5] = c(5) - c(N) - C(5,N) + C(N,N); M(5, 5) = C(5,5) - C(5,N) - C(5,N) + C(N,N); M(5, 6) = C(5,6) - C(6,N) - C(5,N) + C(N,N); M(5, 7) = C(5,7) - C(7,N) - C(5,N) + C(N,N);
[   0.677][d][vo/gpu-next/libplacebo] [150]     b[6] = c(6) - c(N) - C(6,N) + C(N,N); M(6, 6) = C(6,6) - C(6,N) - C(6,N) + C(N,N); M(6, 7) = C(6,7) - C(7,N) - C(6,N) + C(N,N);
[   0.677][d][vo/gpu-next/libplacebo] [151]     b[7] = c(7) - c(N) - C(7,N) + C(N,N); M(7, 7) = C(7,7) - C(7,N) - C(7,N) + C(N,N);
[   0.677][d][vo/gpu-next/libplacebo] [152] 
[   0.677][d][vo/gpu-next/libplacebo] [153]     b[1] -= b[0] * M(0, 1) / M(0, 0); M(1, 1) -= M(0, 1) * M(0, 1) / M(0, 0); M(1, 2) -= M(0, 2) * M(0, 1) / M(0, 0); M(1, 3) -= M(0, 3) * M(0, 1) / M(0, 0); M(1, 4) -= M(0, 4) * M(0, 1) / M(0, 0); M(1, 5) -= M(0, 5) * M(0, 1) / M(0, 0); M(1, 6) -= M(0, 6) * M(0, 1) / M(0, 0); M(1, 7) -= M(0, 7) * M(0, 1) / M(0, 0);
[   0.677][d][vo/gpu-next/libplacebo] [154]     b[2] -= b[0] * M(0, 2) / M(0, 0); M(2, 2) -= M(0, 2) * M(0, 2) / M(0, 0); M(2, 3) -= M(0, 3) * M(0, 2) / M(0, 0); M(2, 4) -= M(0, 4) * M(0, 2) / M(0, 0); M(2, 5) -= M(0, 5) * M(0, 2) / M(0, 0); M(2, 6) -= M(0, 6) * M(0, 2) / M(0, 0); M(2, 7) -= M(0, 7) * M(0, 2) / M(0, 0);
[   0.677][d][vo/gpu-next/libplacebo] [155]     b[3] -= b[0] * M(0, 3) / M(0, 0); M(3, 3) -= M(0, 3) * M(0, 3) / M(0, 0); M(3, 4) -= M(0, 4) * M(0, 3) / M(0, 0); M(3, 5) -= M(0, 5) * M(0, 3) / M(0, 0); M(3, 6) -= M(0, 6) * M(0, 3) / M(0, 0); M(3, 7) -= M(0, 7) * M(0, 3) / M(0, 0);
[   0.677][d][vo/gpu-next/libplacebo] [156]     b[4] -= b[0] * M(0, 4) / M(0, 0); M(4, 4) -= M(0, 4) * M(0, 4) / M(0, 0); M(4, 5) -= M(0, 5) * M(0, 4) / M(0, 0); M(4, 6) -= M(0, 6) * M(0, 4) / M(0, 0); M(4, 7) -= M(0, 7) * M(0, 4) / M(0, 0);
[   0.677][d][vo/gpu-next/libplacebo] [157]     b[5] -= b[0] * M(0, 5) / M(0, 0); M(5, 5) -= M(0, 5) * M(0, 5) / M(0, 0); M(5, 6) -= M(0, 6) * M(0, 5) / M(0, 0); M(5, 7) -= M(0, 7) * M(0, 5) / M(0, 0);
[   0.677][d][vo/gpu-next/libplacebo] [158]     b[6] -= b[0] * M(0, 6) / M(0, 0); M(6, 6) -= M(0, 6) * M(0, 6) / M(0, 0); M(6, 7) -= M(0, 7) * M(0, 6) / M(0, 0);
[   0.678][d][vo/gpu-next/libplacebo] [159]     b[7] -= b[0] * M(0, 7) / M(0, 0); M(7, 7) -= M(0, 7) * M(0, 7) / M(0, 0);
[   0.678][d][vo/gpu-next/libplacebo] [160] 
[   0.678][d][vo/gpu-next/libplacebo] [161]     b[2] -= b[1] * M(1, 2) / M(1, 1); M(2, 2) -= M(1, 2) * M(1, 2) / M(1, 1); M(2, 3) -= M(1, 3) * M(1, 2) / M(1, 1); M(2, 4) -= M(1, 4) * M(1, 2) / M(1, 1); M(2, 5) -= M(1, 5) * M(1, 2) / M(1, 1); M(2, 6) -= M(1, 6) * M(1, 2) / M(1, 1); M(2, 7) -= M(1, 7) * M(1, 2) / M(1, 1);
[   0.678][d][vo/gpu-next/libplacebo] [162]     b[3] -= b[1] * M(1, 3) / M(1, 1); M(3, 3) -= M(1, 3) * M(1, 3) / M(1, 1); M(3, 4) -= M(1, 4) * M(1, 3) / M(1, 1); M(3, 5) -= M(1, 5) * M(1, 3) / M(1, 1); M(3, 6) -= M(1, 6) * M(1, 3) / M(1, 1); M(3, 7) -= M(1, 7) * M(1, 3) / M(1, 1);
[   0.678][d][vo/gpu-next/libplacebo] [163]     b[4] -= b[1] * M(1, 4) / M(1, 1); M(4, 4) -= M(1, 4) * M(1, 4) / M(1, 1); M(4, 5) -= M(1, 5) * M(1, 4) / M(1, 1); M(4, 6) -= M(1, 6) * M(1, 4) / M(1, 1); M(4, 7) -= M(1, 7) * M(1, 4) / M(1, 1);
[   0.678][d][vo/gpu-next/libplacebo] [164]     b[5] -= b[1] * M(1, 5) / M(1, 1); M(5, 5) -= M(1, 5) * M(1, 5) / M(1, 1); M(5, 6) -= M(1, 6) * M(1, 5) / M(1, 1); M(5, 7) -= M(1, 7) * M(1, 5) / M(1, 1);
[   0.678][d][vo/gpu-next/libplacebo] [165]     b[6] -= b[1] * M(1, 6) / M(1, 1); M(6, 6) -= M(1, 6) * M(1, 6) / M(1, 1); M(6, 7) -= M(1, 7) * M(1, 6) / M(1, 1);
[   0.678][d][vo/gpu-next/libplacebo] [166]     b[7] -= b[1] * M(1, 7) / M(1, 1); M(7, 7) -= M(1, 7) * M(1, 7) / M(1, 1);
[   0.678][d][vo/gpu-next/libplacebo] [167] 
[   0.678][d][vo/gpu-next/libplacebo] [168]     b[3] -= b[2] * M(2, 3) / M(2, 2); M(3, 3) -= M(2, 3) * M(2, 3) / M(2, 2); M(3, 4) -= M(2, 4) * M(2, 3) / M(2, 2); M(3, 5) -= M(2, 5) * M(2, 3) / M(2, 2); M(3, 6) -= M(2, 6) * M(2, 3) / M(2, 2); M(3, 7) -= M(2, 7) * M(2, 3) / M(2, 2);
[   0.678][d][vo/gpu-next/libplacebo] [169]     b[4] -= b[2] * M(2, 4) / M(2, 2); M(4, 4) -= M(2, 4) * M(2, 4) / M(2, 2); M(4, 5) -= M(2, 5) * M(2, 4) / M(2, 2); M(4, 6) -= M(2, 6) * M(2, 4) / M(2, 2); M(4, 7) -= M(2, 7) * M(2, 4) / M(2, 2);
[   0.678][d][vo/gpu-next/libplacebo] [170]     b[5] -= b[2] * M(2, 5) / M(2, 2); M(5, 5) -= M(2, 5) * M(2, 5) / M(2, 2); M(5, 6) -= M(2, 6) * M(2, 5) / M(2, 2); M(5, 7) -= M(2, 7) * M(2, 5) / M(2, 2);
[   0.678][d][vo/gpu-next/libplacebo] [171]     b[6] -= b[2] * M(2, 6) / M(2, 2); M(6, 6) -= M(2, 6) * M(2, 6) / M(2, 2); M(6, 7) -= M(2, 7) * M(2, 6) / M(2, 2);
[   0.678][d][vo/gpu-next/libplacebo] [172]     b[7] -= b[2] * M(2, 7) / M(2, 2); M(7, 7) -= M(2, 7) * M(2, 7) / M(2, 2);
[   0.678][d][vo/gpu-next/libplacebo] [173] 
[   0.678][d][vo/gpu-next/libplacebo] [174]     b[4] -= b[3] * M(3, 4) / M(3, 3); M(4, 4) -= M(3, 4) * M(3, 4) / M(3, 3); M(4, 5) -= M(3, 5) * M(3, 4) / M(3, 3); M(4, 6) -= M(3, 6) * M(3, 4) / M(3, 3); M(4, 7) -= M(3, 7) * M(3, 4) / M(3, 3);
[   0.678][d][vo/gpu-next/libplacebo] [175]     b[5] -= b[3] * M(3, 5) / M(3, 3); M(5, 5) -= M(3, 5) * M(3, 5) / M(3, 3); M(5, 6) -= M(3, 6) * M(3, 5) / M(3, 3); M(5, 7) -= M(3, 7) * M(3, 5) / M(3, 3);
[   0.678][d][vo/gpu-next/libplacebo] [176]     b[6] -= b[3] * M(3, 6) / M(3, 3); M(6, 6) -= M(3, 6) * M(3, 6) / M(3, 3); M(6, 7) -= M(3, 7) * M(3, 6) / M(3, 3);
[   0.678][d][vo/gpu-next/libplacebo] [177]     b[7] -= b[3] * M(3, 7) / M(3, 3); M(7, 7) -= M(3, 7) * M(3, 7) / M(3, 3);
[   0.678][d][vo/gpu-next/libplacebo] [178] 
[   0.678][d][vo/gpu-next/libplacebo] [179]     b[5] -= b[4] * M(4, 5) / M(4, 4); M(5, 5) -= M(4, 5) * M(4, 5) / M(4, 4); M(5, 6) -= M(4, 6) * M(4, 5) / M(4, 4); M(5, 7) -= M(4, 7) * M(4, 5) / M(4, 4);
[   0.678][d][vo/gpu-next/libplacebo] [180]     b[6] -= b[4] * M(4, 6) / M(4, 4); M(6, 6) -= M(4, 6) * M(4, 6) / M(4, 4); M(6, 7) -= M(4, 7) * M(4, 6) / M(4, 4);
[   0.678][d][vo/gpu-next/libplacebo] [181]     b[7] -= b[4] * M(4, 7) / M(4, 4); M(7, 7) -= M(4, 7) * M(4, 7) / M(4, 4);
[   0.678][d][vo/gpu-next/libplacebo] [182] 
[   0.678][d][vo/gpu-next/libplacebo] [183]     b[6] -= b[5] * M(5, 6) / M(5, 5); M(6, 6) -= M(5, 6) * M(5, 6) / M(5, 5); M(6, 7) -= M(5, 7) * M(5, 6) / M(5, 5);
[   0.678][d][vo/gpu-next/libplacebo] [184]     b[7] -= b[5] * M(5, 7) / M(5, 5); M(7, 7) -= M(5, 7) * M(5, 7) / M(5, 5);
[   0.678][d][vo/gpu-next/libplacebo] [185] 
[   0.678][d][vo/gpu-next/libplacebo] [186]     b[7] -= b[6] * M(6, 7) / M(6, 6); M(7, 7) -= M(6, 7) * M(6, 7) / M(6, 6);
[   0.678][d][vo/gpu-next/libplacebo] [187] 
[   0.678][d][vo/gpu-next/libplacebo] [188]     b[7] /= M(7, 7);
[   0.678][d][vo/gpu-next/libplacebo] [189]     interp += b[7] * (X[7] - X[N]).zw;
[   0.678][d][vo/gpu-next/libplacebo] [190] 
[   0.678][d][vo/gpu-next/libplacebo] [191]     b[6] -= M(6, 7) * b[7]; b[6] /= M(6, 6);
[   0.678][d][vo/gpu-next/libplacebo] [192]     interp += b[6] * (X[6] - X[N]).zw;
[   0.678][d][vo/gpu-next/libplacebo] [193] 
[   0.678][d][vo/gpu-next/libplacebo] [194]     b[5] -= M(5, 6) * b[6]; b[5] -= M(5, 7) * b[7]; b[5] /= M(5, 5);
[   0.678][d][vo/gpu-next/libplacebo] [195]     interp += b[5] * (X[5] - X[N]).zw;
[   0.678][d][vo/gpu-next/libplacebo] [196] 
[   0.678][d][vo/gpu-next/libplacebo] [197]     b[4] -= M(4, 5) * b[5]; b[4] -= M(4, 6) * b[6]; b[4] -= M(4, 7) * b[7]; b[4] /= M(4, 4);
[   0.678][d][vo/gpu-next/libplacebo] [198]     interp += b[4] * (X[4] - X[N]).zw;
[   0.678][d][vo/gpu-next/libplacebo] [199] 
[   0.678][d][vo/gpu-next/libplacebo] [200]     b[3] -= M(3, 4) * b[4]; b[3] -= M(3, 5) * b[5]; b[3] -= M(3, 6) * b[6]; b[3] -= M(3, 7) * b[7]; b[3] /= M(3, 3);
[   0.678][d][vo/gpu-next/libplacebo] [201]     interp += b[3] * (X[3] - X[N]).zw;
[   0.678][d][vo/gpu-next/libplacebo] [202] 
[   0.678][d][vo/gpu-next/libplacebo] [203]     b[2] -= M(2, 3) * b[3]; b[2] -= M(2, 4) * b[4]; b[2] -= M(2, 5) * b[5]; b[2] -= M(2, 6) * b[6]; b[2] -= M(2, 7) * b[7]; b[2] /= M(2, 2);
[   0.678][d][vo/gpu-next/libplacebo] [204]     interp += b[2] * (X[2] - X[N]).zw;
[   0.678][d][vo/gpu-next/libplacebo] [205] 
[   0.678][d][vo/gpu-next/libplacebo] [206]     b[1] -= M(1, 2) * b[2]; b[1] -= M(1, 3) * b[3]; b[1] -= M(1, 4) * b[4]; b[1] -= M(1, 5) * b[5]; b[1] -= M(1, 6) * b[6]; b[1] -= M(1, 7) * b[7]; b[1] /= M(1, 1);
[   0.678][d][vo/gpu-next/libplacebo] [207]     interp += b[1] * (X[1] - X[N]).zw;
[   0.678][d][vo/gpu-next/libplacebo] [208] 
[   0.678][d][vo/gpu-next/libplacebo] [209]     b[0] -= M(0, 1) * b[1]; b[0] -= M(0, 2) * b[2]; b[0] -= M(0, 3) * b[3]; b[0] -= M(0, 4) * b[4]; b[0] -= M(0, 5) * b[5]; b[0] -= M(0, 6) * b[6]; b[0] -= M(0, 7) * b[7]; b[0] /= M(0, 0);
[   0.678][d][vo/gpu-next/libplacebo] [210]     interp += b[0] * (X[0] - X[N]).zw;
[   0.678][d][vo/gpu-next/libplacebo] [211] 
[   0.678][d][vo/gpu-next/libplacebo] [212]     return interp.xyxy;
[   0.678][d][vo/gpu-next/libplacebo] [213] }
[   0.678][d][global] config path: 'shaders/AMD-FSR/AMD-FSR-EASU_rgb.glsl' -> '/home/zen/.config/mpv/shaders/AMD-FSR/AMD-FSR-EASU_rgb.glsl'
[   0.678][d][global] user path: '~~/shaders/AMD-FSR/AMD-FSR-EASU_rgb.glsl' -> '/home/zen/.config/mpv/shaders/AMD-FSR/AMD-FSR-EASU_rgb.glsl'
[   0.678][v][vo/gpu-next/libplacebo] Registering hook pass: AMD-FSR-EASU_rgb
[   0.678][d][vo/gpu-next/libplacebo] Loaded user shader:
[   0.678][d][vo/gpu-next/libplacebo] [  1] // Copyright (c) 2021 Advanced Micro Devices, Inc. All rights reserved.
[   0.678][d][vo/gpu-next/libplacebo] [  2] //
[   0.678][d][vo/gpu-next/libplacebo] [  3] // Permission is hereby granted, free of charge, to any person obtaining a copy
[   0.678][d][vo/gpu-next/libplacebo] [  4] // of this software and associated documentation files (the "Software"), to deal
[   0.678][d][vo/gpu-next/libplacebo] [  5] // in the Software without restriction, including without limitation the rights
[   0.678][d][vo/gpu-next/libplacebo] [  6] // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
[   0.678][d][vo/gpu-next/libplacebo] [  7] // copies of the Software, and to permit persons to whom the Software is
[   0.678][d][vo/gpu-next/libplacebo] [  8] // furnished to do so, subject to the following conditions:
[   0.678][d][vo/gpu-next/libplacebo] [  9] //
[   0.678][d][vo/gpu-next/libplacebo] [ 10] // The above copyright notice and this permission notice shall be included in
[   0.678][d][vo/gpu-next/libplacebo] [ 11] // all copies or substantial portions of the Software.
[   0.678][d][vo/gpu-next/libplacebo] [ 12] //
[   0.678][d][vo/gpu-next/libplacebo] [ 13] // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
[   0.678][d][vo/gpu-next/libplacebo] [ 14] // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
[   0.678][d][vo/gpu-next/libplacebo] [ 15] // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
[   0.678][d][vo/gpu-next/libplacebo] [ 16] // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
[   0.678][d][vo/gpu-next/libplacebo] [ 17] // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
[   0.678][d][vo/gpu-next/libplacebo] [ 18] // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
[   0.678][d][vo/gpu-next/libplacebo] [ 19] // THE SOFTWARE.
[   0.678][d][vo/gpu-next/libplacebo] [ 20] 
[   0.678][d][vo/gpu-next/libplacebo] [ 21] // Mod of AMD-FSR.glsl
[   0.678][d][vo/gpu-next/libplacebo] [ 22] 
[   0.678][d][vo/gpu-next/libplacebo] [ 23] //!HOOK MAIN
[   0.678][d][vo/gpu-next/libplacebo] [ 24] //!BIND HOOKED
[   0.678][d][vo/gpu-next/libplacebo] [ 25] //!DESC AMD-FSR-EASU_rgb
[   0.678][d][vo/gpu-next/libplacebo] [ 26] //!WHEN OUTPUT.w OUTPUT.h * MAIN.w MAIN.h * / 1.0 >
[   0.678][d][vo/gpu-next/libplacebo] [ 27] //!WIDTH OUTPUT.w
[   0.678][d][vo/gpu-next/libplacebo] [ 28] //!HEIGHT OUTPUT.h
[   0.678][d][vo/gpu-next/libplacebo] [ 29] 
[   0.678][d][vo/gpu-next/libplacebo] [ 30] // User variables
[   0.678][d][vo/gpu-next/libplacebo] [ 31] #define FSR_EASU_PASSTHROUGH_ALPHA 1 // If set to 1, preserves transparency in the image. Can be disabled for more performance. 0 or 1.
[   0.678][d][vo/gpu-next/libplacebo] [ 32] 
[   0.678][d][vo/gpu-next/libplacebo] [ 33] // Shader code
[   0.678][d][vo/gpu-next/libplacebo] [ 34] 
[   0.678][d][vo/gpu-next/libplacebo] [ 35] float APrxLoRcpF1(float a) {
[   0.678][d][vo/gpu-next/libplacebo] [ 36] 	return uintBitsToFloat(uint(0x7ef07ebb) - floatBitsToUint(a));
[   0.678][d][vo/gpu-next/libplacebo] [ 37] }
[   0.678][d][vo/gpu-next/libplacebo] [ 38] 
[   0.678][d][vo/gpu-next/libplacebo] [ 39] float APrxLoRsqF1(float a) {
[   0.678][d][vo/gpu-next/libplacebo] [ 40] 	return uintBitsToFloat(uint(0x5f347d74) - (floatBitsToUint(a) >> uint(1)));
[   0.678][d][vo/gpu-next/libplacebo] [ 41] }
[   0.678][d][vo/gpu-next/libplacebo] [ 42] 
[   0.678][d][vo/gpu-next/libplacebo] [ 43] vec3 AMin3F3(vec3 x, vec3 y, vec3 z) {
[   0.678][d][vo/gpu-next/libplacebo] [ 44] 	return min(x, min(y, z));
[   0.678][d][vo/gpu-next/libplacebo] [ 45] }
[   0.678][d][vo/gpu-next/libplacebo] [ 46] 
[   0.678][d][vo/gpu-next/libplacebo] [ 47] vec3 AMax3F3(vec3 x, vec3 y, vec3 z) {
[   0.678][d][vo/gpu-next/libplacebo] [ 48] 	return max(x, max(y, z));
[   0.678][d][vo/gpu-next/libplacebo] [ 49] }
[   0.678][d][vo/gpu-next/libplacebo] [ 50] 
[   0.678][d][vo/gpu-next/libplacebo] [ 51]  // Filtering for a given tap for the scalar.
[   0.678][d][vo/gpu-next/libplacebo] [ 52]  void FsrEasuTap(
[   0.678][d][vo/gpu-next/libplacebo] [ 53] 	inout vec3 aC,  // Accumulated color, with negative lobe.
[   0.678][d][vo/gpu-next/libplacebo] [ 54] 	inout float aW, // Accumulated weight.
[   0.678][d][vo/gpu-next/libplacebo] [ 55] 	vec2 off,       // Pixel offset from resolve position to tap.
[   0.678][d][vo/gpu-next/libplacebo] [ 56] 	vec2 dir,       // Gradient direction.
[   0.678][d][vo/gpu-next/libplacebo] [ 57] 	vec2 len,       // Length.
[   0.678][d][vo/gpu-next/libplacebo] [ 58] 	float lob,      // Negative lobe strength.
[   0.678][d][vo/gpu-next/libplacebo] [ 59] 	float clp,      // Clipping point.
[   0.678][d][vo/gpu-next/libplacebo] [ 60] 	vec3 c){        // Tap color.
[   0.678][d][vo/gpu-next/libplacebo] [ 61] 	// Rotate offset by direction.
[   0.678][d][vo/gpu-next/libplacebo] [ 62] 	vec2 v;
[   0.678][d][vo/gpu-next/libplacebo] [ 63] 	v.x = (off.x * ( dir.x)) + (off.y * dir.y);
[   0.678][d][vo/gpu-next/libplacebo] [ 64] 	v.y = (off.x * (-dir.y)) + (off.y * dir.x);
[   0.678][d][vo/gpu-next/libplacebo] [ 65] 	// Anisotropy.
[   0.678][d][vo/gpu-next/libplacebo] [ 66] 	v *= len;
[   0.678][d][vo/gpu-next/libplacebo] [ 67] 	// Compute distance^2.
[   0.678][d][vo/gpu-next/libplacebo] [ 68] 	float d2 = v.x * v.x + v.y * v.y;
[   0.678][d][vo/gpu-next/libplacebo] [ 69] 	// Limit to the window as at corner, 2 taps can easily be outside.
[   0.678][d][vo/gpu-next/libplacebo] [ 70] 	d2 = min(d2, clp);
[   0.678][d][vo/gpu-next/libplacebo] [ 71] 	// Approximation of lancos2 without sin() or rcp(), or sqrt() to get x.
[   0.678][d][vo/gpu-next/libplacebo] [ 72] 	//  (25/16 * (2/5 * x^2 - 1)^2 - (25/16 - 1)) * (1/4 * x^2 - 1)^2
[   0.678][d][vo/gpu-next/libplacebo] [ 73] 	//  |_______________________________________|   |_______________|
[   0.678][d][vo/gpu-next/libplacebo] [ 74] 	//                   base                             window
[   0.678][d][vo/gpu-next/libplacebo] [ 75] 	// The general form of the 'base' is,
[   0.678][d][vo/gpu-next/libplacebo] [ 76] 	//  (a*(b*x^2-1)^2-(a-1))
[   0.678][d][vo/gpu-next/libplacebo] [ 77] 	// Where 'a=1/(2*b-b^2)' and 'b' moves around the negative lobe.
[   0.678][d][vo/gpu-next/libplacebo] [ 78] 	float wB = float(2.0 / 5.0) * d2 + float(-1.0);
[   0.678][d][vo/gpu-next/libplacebo] [ 79] 	float wA = lob * d2 + float(-1.0);
[   0.678][d][vo/gpu-next/libplacebo] [ 80] 	wB *= wB;
[   0.678][d][vo/gpu-next/libplacebo] [ 81] 	wA *= wA;
[   0.678][d][vo/gpu-next/libplacebo] [ 82] 	wB = float(25.0 / 16.0) * wB + float(-(25.0 / 16.0 - 1.0));
[   0.678][d][vo/gpu-next/libplacebo] [ 83] 	float w = wB * wA;
[   0.678][d][vo/gpu-next/libplacebo] [ 84] 	// Do weighted average.
[   0.678][d][vo/gpu-next/libplacebo] [ 85] 	aC += c * w;
[   0.678][d][vo/gpu-next/libplacebo] [ 86] 	aW += w;
[   0.678][d][vo/gpu-next/libplacebo] [ 87] }
[   0.678][d][vo/gpu-next/libplacebo] [ 88] 
[   0.678][d][vo/gpu-next/libplacebo] [ 89] // Accumulate direction and length.
[   0.678][d][vo/gpu-next/libplacebo] [ 90] void FsrEasuSet(
[   0.678][d][vo/gpu-next/libplacebo] [ 91] 	inout vec2 dir,
[   0.678][d][vo/gpu-next/libplacebo] [ 92] 	inout float len,
[   0.678][d][vo/gpu-next/libplacebo] [ 93] 	vec2 pp,
[   0.678][d][vo/gpu-next/libplacebo] [ 94] 	bool biS, bool biT, bool biU, bool biV,
[   0.678][d][vo/gpu-next/libplacebo] [ 95] 	float lA, float lB, float lC, float lD, float lE){
[   0.678][d][vo/gpu-next/libplacebo] [ 96] 	// Compute bilinear weight, branches factor out as predicates are compiler time immediates.
[   0.678][d][vo/gpu-next/libplacebo] [ 97] 	//  s t
[   0.678][d][vo/gpu-next/libplacebo] [ 98] 	//  u v
[   0.678][d][vo/gpu-next/libplacebo] [ 99] 	float w = float(0.0);
[   0.678][d][vo/gpu-next/libplacebo] [100] 	if(biS) w = (float(1.0) - pp.x) * (float(1.0) - pp.y);
[   0.678][d][vo/gpu-next/libplacebo] [101] 	if(biT) w = pp.x * (float(1.0) - pp.y);
[   0.678][d][vo/gpu-next/libplacebo] [102] 	if(biU) w = (float(1.0) - pp.x) * pp.y;
[   0.678][d][vo/gpu-next/libplacebo] [103] 	if(biV) w = pp.x * pp.y;
[   0.678][d][vo/gpu-next/libplacebo] [104] 	// Direction is the '+' diff.
[   0.678][d][vo/gpu-next/libplacebo] [105] 	//    a
[   0.678][d][vo/gpu-next/libplacebo] [106] 	//  b c d
[   0.678][d][vo/gpu-next/libplacebo] [107] 	//    e
[   0.678][d][vo/gpu-next/libplacebo] [108] 	// Then takes magnitude from abs average of both sides of 'c'.
[   0.678][d][vo/gpu-next/libplacebo] [109] 	// Length converts gradient reversal to 0, smoothly to non-reversal at 1, shaped, then adding horz and vert terms.
[   0.678][d][vo/gpu-next/libplacebo] [110] 	float dc = lD - lC;
[   0.678][d][vo/gpu-next/libplacebo] [111] 	float cb = lC - lB;
[   0.678][d][vo/gpu-next/libplacebo] [112] 	float lenX = max(abs(dc), abs(cb));
[   0.678][d][vo/gpu-next/libplacebo] [113] 	lenX = APrxLoRcpF1(lenX);
[   0.678][d][vo/gpu-next/libplacebo] [114] 	float dirX = lD - lB;
[   0.678][d][vo/gpu-next/libplacebo] [115] 	dir.x += dirX * w;
[   0.678][d][vo/gpu-next/libplacebo] [116] 	lenX = clamp(abs(dirX) * lenX, float(0.0), float(1.0));
[   0.678][d][vo/gpu-next/libplacebo] [117] 	lenX *= lenX;
[   0.678][d][vo/gpu-next/libplacebo] [118] 	len += lenX * w;
[   0.678][d][vo/gpu-next/libplacebo] [119] 	// Repeat for the y axis.
[   0.678][d][vo/gpu-next/libplacebo] [120] 	float ec = lE - lC;
[   0.678][d][vo/gpu-next/libplacebo] [121] 	float ca = lC - lA;
[   0.678][d][vo/gpu-next/libplacebo] [122] 	float lenY = max(abs(ec), abs(ca));
[   0.678][d][vo/gpu-next/libplacebo] [123] 	lenY = APrxLoRcpF1(lenY);
[   0.678][d][vo/gpu-next/libplacebo] [124] 	float dirY = lE - lA;
[   0.678][d][vo/gpu-next/libplacebo] [125] 	dir.y += dirY * w;
[   0.678][d][vo/gpu-next/libplacebo] [126] 	lenY = clamp(abs(dirY) * lenY, float(0.0), float(1.0));
[   0.678][d][vo/gpu-next/libplacebo] [127] 	lenY *= lenY;
[   0.678][d][vo/gpu-next/libplacebo] [128] 	len += lenY * w;
[   0.678][d][vo/gpu-next/libplacebo] [129] }
[   0.678][d][vo/gpu-next/libplacebo] [130] 
[   0.678][d][vo/gpu-next/libplacebo] [131] vec4 hook() {
[   0.678][d][vo/gpu-next/libplacebo] [132] 	//------------------------------------------------------------------------------------------------------------------------------
[   0.678][d][vo/gpu-next/libplacebo] [133] 	// Get position of 'f'.
[   0.678][d][vo/gpu-next/libplacebo] [134] 	vec2 pp = HOOKED_pos * HOOKED_size - vec2(0.5);
[   0.678][d][vo/gpu-next/libplacebo] [135] 	vec2 fp = floor(pp);
[   0.678][d][vo/gpu-next/libplacebo] [136] 	pp -= fp;
[   0.678][d][vo/gpu-next/libplacebo] [137] 	//------------------------------------------------------------------------------------------------------------------------------
[   0.678][d][vo/gpu-next/libplacebo] [138] 	// 12-tap kernel.
[   0.678][d][vo/gpu-next/libplacebo] [139] 	//    b c
[   0.678][d][vo/gpu-next/libplacebo] [140] 	//  e f g h
[   0.678][d][vo/gpu-next/libplacebo] [141] 	//  i j k l
[   0.678][d][vo/gpu-next/libplacebo] [142] 	//    n o
[   0.678][d][vo/gpu-next/libplacebo] [143] 	// Gather 4 ordering.
[   0.678][d][vo/gpu-next/libplacebo] [144] 	//  a b
[   0.678][d][vo/gpu-next/libplacebo] [145] 	//  r g
[   0.678][d][vo/gpu-next/libplacebo] [146] 	// For packed FP16, need either {rg} or {ab} so using the following setup for gather in all versions,
[   0.678][d][vo/gpu-next/libplacebo] [147] 	//    a b    <- unused (z)
[   0.678][d][vo/gpu-next/libplacebo] [148] 	//    r g
[   0.678][d][vo/gpu-next/libplacebo] [149] 	//  a b a b
[   0.678][d][vo/gpu-next/libplacebo] [150] 	//  r g r g
[   0.678][d][vo/gpu-next/libplacebo] [151] 	//    a b
[   0.678][d][vo/gpu-next/libplacebo] [152] 	//    r g    <- unused (z)
[   0.678][d][vo/gpu-next/libplacebo] [153] 	// Allowing dead-code removal to remove the 'z's.
[   0.678][d][vo/gpu-next/libplacebo] [154] 	
[   0.678][d][vo/gpu-next/libplacebo] [155]  #if (defined(HOOKED_gather) && (__VERSION__ >= 400 || (GL_ES && __VERSION__ >= 310)))
[   0.678][d][vo/gpu-next/libplacebo] [156] 	vec4 bczzR = HOOKED_gather(vec2((fp + vec2(1.0, -1.0)) * HOOKED_pt), 0);
[   0.678][d][vo/gpu-next/libplacebo] [157] 	vec4 bczzG = HOOKED_gather(vec2((fp + vec2(1.0, -1.0)) * HOOKED_pt), 1);
[   0.678][d][vo/gpu-next/libplacebo] [158] 	vec4 bczzB = HOOKED_gather(vec2((fp + vec2(1.0, -1.0)) * HOOKED_pt), 2);
[   0.678][d][vo/gpu-next/libplacebo] [159] 	
[   0.678][d][vo/gpu-next/libplacebo] [160] 	vec4 ijfeR = HOOKED_gather(vec2((fp + vec2(0.0, 1.0)) * HOOKED_pt), 0);
[   0.678][d][vo/gpu-next/libplacebo] [161] 	vec4 ijfeG = HOOKED_gather(vec2((fp + vec2(0.0, 1.0)) * HOOKED_pt), 1);
[   0.678][d][vo/gpu-next/libplacebo] [162] 	vec4 ijfeB = HOOKED_gather(vec2((fp + vec2(0.0, 1.0)) * HOOKED_pt), 2);
[   0.678][d][vo/gpu-next/libplacebo] [163] 	
[   0.678][d][vo/gpu-next/libplacebo] [164] 	vec4 klhgR = HOOKED_gather(vec2((fp + vec2(2.0, 1.0)) * HOOKED_pt), 0);
[   0.678][d][vo/gpu-next/libplacebo] [165] 	vec4 klhgG = HOOKED_gather(vec2((fp + vec2(2.0, 1.0)) * HOOKED_pt), 1);
[   0.678][d][vo/gpu-next/libplacebo] [166] 	vec4 klhgB = HOOKED_gather(vec2((fp + vec2(2.0, 1.0)) * HOOKED_pt), 2);
[   0.678][d][vo/gpu-next/libplacebo] [167] 	
[   0.678][d][vo/gpu-next/libplacebo] [168] 	vec4 zzonR = HOOKED_gather(vec2((fp + vec2(1.0, 3.0)) * HOOKED_pt), 0);
[   0.678][d][vo/gpu-next/libplacebo] [169] 	vec4 zzonG = HOOKED_gather(vec2((fp + vec2(1.0, 3.0)) * HOOKED_pt), 1);
[   0.678][d][vo/gpu-next/libplacebo] [170] 	vec4 zzonB = HOOKED_gather(vec2((fp + vec2(1.0, 3.0)) * HOOKED_pt), 2);
[   0.678][d][vo/gpu-next/libplacebo] [171] #else
[   0.678][d][vo/gpu-next/libplacebo] [172] 	// pre-OpenGL 4.0 compatibility
[   0.678][d][vo/gpu-next/libplacebo] [173] 	vec3 b = HOOKED_tex(vec2((fp + vec2(0.5, -0.5)) * HOOKED_pt)).rgb;
[   0.678][d][vo/gpu-next/libplacebo] [174] 	vec3 c = HOOKED_tex(vec2((fp + vec2(1.5, -0.5)) * HOOKED_pt)).rgb;
[   0.678][d][vo/gpu-next/libplacebo] [175] 	
[   0.678][d][vo/gpu-next/libplacebo] [176] 	vec3 e = HOOKED_tex(vec2((fp + vec2(-0.5, 0.5)) * HOOKED_pt)).rgb;
[   0.678][d][vo/gpu-next/libplacebo] [177] 	vec3 f = HOOKED_tex(vec2((fp + vec2( 0.5, 0.5)) * HOOKED_pt)).rgb;
[   0.678][d][vo/gpu-next/libplacebo] [178] 	vec3 g = HOOKED_tex(vec2((fp + vec2( 1.5, 0.5)) * HOOKED_pt)).rgb;
[   0.678][d][vo/gpu-next/libplacebo] [179] 	vec3 h = HOOKED_tex(vec2((fp + vec2( 2.5, 0.5)) * HOOKED_pt)).rgb;
[   0.678][d][vo/gpu-next/libplacebo] [180] 	
[   0.678][d][vo/gpu-next/libplacebo] [181] 	vec3 i = HOOKED_tex(vec2((fp + vec2(-0.5, 1.5)) * HOOKED_pt)).rgb;
[   0.678][d][vo/gpu-next/libplacebo] [182] 	vec3 j = HOOKED_tex(vec2((fp + vec2( 0.5, 1.5)) * HOOKED_pt)).rgb;
[   0.678][d][vo/gpu-next/libplacebo] [183] 	vec3 k = HOOKED_tex(vec2((fp + vec2( 1.5, 1.5)) * HOOKED_pt)).rgb;
[   0.678][d][vo/gpu-next/libplacebo] [184] 	vec3 l = HOOKED_tex(vec2((fp + vec2( 2.5, 1.5)) * HOOKED_pt)).rgb;
[   0.678][d][vo/gpu-next/libplacebo] [185] 	
[   0.678][d][vo/gpu-next/libplacebo] [186] 	vec3 n = HOOKED_tex(vec2((fp + vec2(0.5, 2.5) ) * HOOKED_pt)).rgb;
[   0.678][d][vo/gpu-next/libplacebo] [187] 	vec3 o = HOOKED_tex(vec2((fp + vec2(1.5, 2.5) ) * HOOKED_pt)).rgb;
[   0.678][d][vo/gpu-next/libplacebo] [188] 
[   0.678][d][vo/gpu-next/libplacebo] [189] 	vec4 bczzR = vec4(b.r, c.r, 0.0, 0.0);
[   0.678][d][vo/gpu-next/libplacebo] [190] 	vec4 bczzG = vec4(b.g, c.g, 0.0, 0.0);
[   0.678][d][vo/gpu-next/libplacebo] [191] 	vec4 bczzB = vec4(b.b, c.b, 0.0, 0.0);
[   0.678][d][vo/gpu-next/libplacebo] [192] 	
[   0.678][d][vo/gpu-next/libplacebo] [193] 	vec4 ijfeR = vec4(i.r, j.r, f.r, e.r);
[   0.678][d][vo/gpu-next/libplacebo] [194] 	vec4 ijfeG = vec4(i.g, j.g, f.g, e.g);
[   0.678][d][vo/gpu-next/libplacebo] [195] 	vec4 ijfeB = vec4(i.b, j.b, f.b, e.b);
[   0.678][d][vo/gpu-next/libplacebo] [196] 	
[   0.678][d][vo/gpu-next/libplacebo] [197] 	vec4 klhgR = vec4(k.r, l.r, h.r, g.r);
[   0.678][d][vo/gpu-next/libplacebo] [198] 	vec4 klhgG = vec4(k.g, l.g, h.g, g.g);
[   0.678][d][vo/gpu-next/libplacebo] [199] 	vec4 klhgB = vec4(k.b, l.b, h.b, g.b);
[   0.678][d][vo/gpu-next/libplacebo] [200] 	
[   0.678][d][vo/gpu-next/libplacebo] [201] 	vec4 zzonR = vec4(0.0, 0.0, o.r, n.r);
[   0.678][d][vo/gpu-next/libplacebo] [202] 	vec4 zzonG = vec4(0.0, 0.0, o.g, n.g);
[   0.678][d][vo/gpu-next/libplacebo] [203] 	vec4 zzonB = vec4(0.0, 0.0, o.b, n.b);
[   0.678][d][vo/gpu-next/libplacebo] [204] #endif
[   0.678][d][vo/gpu-next/libplacebo] [205] 	//------------------------------------------------------------------------------------------------------------------------------
[   0.678][d][vo/gpu-next/libplacebo] [206] 	// Simplest multi-channel approximate luma possible (luma times 2, in 2 FMA/MAD).
[   0.678][d][vo/gpu-next/libplacebo] [207] 	vec4 bczzL = bczzB * vec4(0.5) + (bczzR * vec4(0.5) + bczzG);
[   0.678][d][vo/gpu-next/libplacebo] [208] 	vec4 ijfeL = ijfeB * vec4(0.5) + (ijfeR * vec4(0.5) + ijfeG);
[   0.678][d][vo/gpu-next/libplacebo] [209] 	vec4 klhgL = klhgB * vec4(0.5) + (klhgR * vec4(0.5) + klhgG);
[   0.678][d][vo/gpu-next/libplacebo] [210] 	vec4 zzonL = zzonB * vec4(0.5) + (zzonR * vec4(0.5) + zzonG);
[   0.678][d][vo/gpu-next/libplacebo] [211] 	// Rename.
[   0.678][d][vo/gpu-next/libplacebo] [212] 	float bL = bczzL.x;
[   0.678][d][vo/gpu-next/libplacebo] [213] 	float cL = bczzL.y;
[   0.678][d][vo/gpu-next/libplacebo] [214] 	float iL = ijfeL.x;
[   0.678][d][vo/gpu-next/libplacebo] [215] 	float jL = ijfeL.y;
[   0.678][d][vo/gpu-next/libplacebo] [216] 	float fL = ijfeL.z;
[   0.678][d][vo/gpu-next/libplacebo] [217] 	float eL = ijfeL.w;
[   0.678][d][vo/gpu-next/libplacebo] [218] 	float kL = klhgL.x;
[   0.678][d][vo/gpu-next/libplacebo] [219] 	float lL = klhgL.y;
[   0.678][d][vo/gpu-next/libplacebo] [220] 	float hL = klhgL.z;
[   0.678][d][vo/gpu-next/libplacebo] [221] 	float gL = klhgL.w;
[   0.678][d][vo/gpu-next/libplacebo] [222] 	float oL = zzonL.z;
[   0.678][d][vo/gpu-next/libplacebo] [223] 	float nL = zzonL.w;
[   0.678][d][vo/gpu-next/libplacebo] [224] 	// Accumulate for bilinear interpolation.
[   0.678][d][vo/gpu-next/libplacebo] [225] 	vec2 dir = vec2(0.0);
[   0.678][d][vo/gpu-next/libplacebo] [226] 	float len = float(0.0);
[   0.678][d][vo/gpu-next/libplacebo] [227] 	FsrEasuSet(dir, len, pp, true, false, false, false, bL, eL, fL, gL, jL);
[   0.678][d][vo/gpu-next/libplacebo] [228] 	FsrEasuSet(dir, len, pp, false, true, false, false, cL, fL, gL, hL, kL);
[   0.678][d][vo/gpu-next/libplacebo] [229] 	FsrEasuSet(dir, len, pp, false, false, true, false, fL, iL, jL, kL, nL);
[   0.678][d][vo/gpu-next/libplacebo] [230] 	FsrEasuSet(dir, len, pp, false, false, false, true, gL, jL, kL, lL, oL);
[   0.678][d][vo/gpu-next/libplacebo] [231] 	//------------------------------------------------------------------------------------------------------------------------------
[   0.678][d][vo/gpu-next/libplacebo] [232] 	// Normalize with approximation, and cleanup close to zero.
[   0.678][d][vo/gpu-next/libplacebo] [233] 	vec2 dir2 = dir * dir;
[   0.678][d][vo/gpu-next/libplacebo] [234] 	float dirR = dir2.x + dir2.y;
[   0.678][d][vo/gpu-next/libplacebo] [235] 	bool zro = dirR < float(1.0 / 32768.0);
[   0.678][d][vo/gpu-next/libplacebo] [236] 	dirR = APrxLoRsqF1(dirR);
[   0.678][d][vo/gpu-next/libplacebo] [237] 	dirR = zro ? float(1.0) : dirR;
[   0.678][d][vo/gpu-next/libplacebo] [238] 	dir.x = zro ? float(1.0) : dir.x;
[   0.678][d][vo/gpu-next/libplacebo] [239] 	dir *= vec2(dirR);
[   0.678][d][vo/gpu-next/libplacebo] [240] 	// Transform from {0 to 2} to {0 to 1} range, and shape with square.
[   0.678][d][vo/gpu-next/libplacebo] [241] 	len = len * float(0.5);
[   0.678][d][vo/gpu-next/libplacebo] [242] 	len *= len;
[   0.678][d][vo/gpu-next/libplacebo] [243] 	// Stretch kernel {1.0 vert|horz, to sqrt(2.0) on diagonal}.
[   0.678][d][vo/gpu-next/libplacebo] [244] 	float stretch = (dir.x * dir.x + dir.y * dir.y) * APrxLoRcpF1(max(abs(dir.x), abs(dir.y)));
[   0.678][d][vo/gpu-next/libplacebo] [245] 	// Anisotropic length after rotation,
[   0.678][d][vo/gpu-next/libplacebo] [246] 	//  x := 1.0 lerp to 'stretch' on edges
[   0.678][d][vo/gpu-next/libplacebo] [247] 	//  y := 1.0 lerp to 2x on edges
[   0.678][d][vo/gpu-next/libplacebo] [248] 	vec2 len2 = vec2(float(1.0) + (stretch - float(1.0)) * len, float(1.0) + float(-0.5) * len);
[   0.678][d][vo/gpu-next/libplacebo] [249] 	// Based on the amount of 'edge',
[   0.678][d][vo/gpu-next/libplacebo] [250] 	// the window shifts from +/-{sqrt(2.0) to slightly beyond 2.0}.
[   0.678][d][vo/gpu-next/libplacebo] [251] 	float lob = float(0.5) + float((1.0 / 4.0 - 0.04) - 0.5) * len;
[   0.678][d][vo/gpu-next/libplacebo] [252] 	// Set distance^2 clipping point to the end of the adjustable window.
[   0.678][d][vo/gpu-next/libplacebo] [253] 	float clp = APrxLoRcpF1(lob);
[   0.678][d][vo/gpu-next/libplacebo] [254] 	//------------------------------------------------------------------------------------------------------------------------------
[   0.678][d][vo/gpu-next/libplacebo] [255] 	// Accumulation mixed with min/max of 4 nearest.
[   0.678][d][vo/gpu-next/libplacebo] [256] 	//    b c
[   0.678][d][vo/gpu-next/libplacebo] [257] 	//  e f g h
[   0.678][d][vo/gpu-next/libplacebo] [258] 	//  i j k l
[   0.678][d][vo/gpu-next/libplacebo] [259] 	//    n o
[   0.678][d][vo/gpu-next/libplacebo] [260] 	vec3 min4 = min(AMin3F3(vec3(ijfeR.z, ijfeG.z, ijfeB.z), vec3(klhgR.w, klhgG.w, klhgB.w), vec3(ijfeR.y, ijfeG.y, ijfeB.y)), vec3(klhgR.x, klhgG.x, klhgB.x));
[   0.678][d][vo/gpu-next/libplacebo] [261] 	vec3 max4 = max(AMax3F3(vec3(ijfeR.z, ijfeG.z, ijfeB.z), vec3(klhgR.w, klhgG.w, klhgB.w), vec3(ijfeR.y, ijfeG.y, ijfeB.y)), vec3(klhgR.x, klhgG.x, klhgB.x));
[   0.678][d][vo/gpu-next/libplacebo] [262] 
[   0.678][d][vo/gpu-next/libplacebo] [263] 	// Accumulation.
[   0.678][d][vo/gpu-next/libplacebo] [264] 	vec3 aC = vec3(0.0);
[   0.678][d][vo/gpu-next/libplacebo] [265] 	float aW = float(0.0);
[   0.678][d][vo/gpu-next/libplacebo] [266] 	FsrEasuTap(aC, aW, vec2( 0.0,-1.0) - pp,dir, len2, lob, clp, vec3(bczzR.x, bczzG.x, bczzB.x)); // b
[   0.678][d][vo/gpu-next/libplacebo] [267] 	FsrEasuTap(aC, aW, vec2( 1.0,-1.0) - pp,dir, len2, lob, clp, vec3(bczzR.y, bczzG.y, bczzB.y)); // c
[   0.678][d][vo/gpu-next/libplacebo] [268] 	FsrEasuTap(aC, aW, vec2(-1.0, 1.0) - pp,dir, len2, lob, clp, vec3(ijfeR.x, ijfeG.x, ijfeB.x)); // i
[   0.678][d][vo/gpu-next/libplacebo] [269] 	FsrEasuTap(aC, aW, vec2( 0.0, 1.0) - pp,dir, len2, lob, clp, vec3(ijfeR.y, ijfeG.y, ijfeB.y)); // j
[   0.678][d][vo/gpu-next/libplacebo] [270] 	FsrEasuTap(aC, aW, vec2( 0.0, 0.0) - pp,dir, len2, lob, clp, vec3(ijfeR.z, ijfeG.z, ijfeB.z)); // f
[   0.678][d][vo/gpu-next/libplacebo] [271] 	FsrEasuTap(aC, aW, vec2(-1.0, 0.0) - pp,dir, len2, lob, clp, vec3(ijfeR.w, ijfeG.w, ijfeB.w)); // e
[   0.678][d][vo/gpu-next/libplacebo] [272] 	FsrEasuTap(aC, aW, vec2( 1.0, 1.0) - pp,dir, len2, lob, clp, vec3(klhgR.x, klhgG.x, klhgB.x)); // k
[   0.678][d][vo/gpu-next/libplacebo] [273] 	FsrEasuTap(aC, aW, vec2( 2.0, 1.0) - pp,dir, len2, lob, clp, vec3(klhgR.y, klhgG.y, klhgB.y)); // l
[   0.678][d][vo/gpu-next/libplacebo] [274] 	FsrEasuTap(aC, aW, vec2( 2.0, 0.0) - pp,dir, len2, lob, clp, vec3(klhgR.z, klhgG.z, klhgB.z)); // h
[   0.678][d][vo/gpu-next/libplacebo] [275] 	FsrEasuTap(aC, aW, vec2( 1.0, 0.0) - pp,dir, len2, lob, clp, vec3(klhgR.w, klhgG.w, klhgB.w)); // g
[   0.678][d][vo/gpu-next/libplacebo] [276] 	FsrEasuTap(aC, aW, vec2( 1.0, 2.0) - pp,dir, len2, lob, clp, vec3(zzonR.z, zzonG.z, zzonB.z)); // o
[   0.679][d][vo/gpu-next/libplacebo] [277] 	FsrEasuTap(aC, aW, vec2( 0.0, 2.0) - pp,dir, len2, lob, clp, vec3(zzonR.w, zzonG.w, zzonB.w)); // n
[   0.679][d][vo/gpu-next/libplacebo] [278] 	//------------------------------------------------------------------------------------------------------------------------------
[   0.679][d][vo/gpu-next/libplacebo] [279] 	// Normalize and dering.
[   0.679][d][vo/gpu-next/libplacebo] [280] 	vec4 pix;
[   0.679][d][vo/gpu-next/libplacebo] [281] 	pix.rgb = min(max4, max(min4, aC * vec3(1.0 / aW)));
[   0.679][d][vo/gpu-next/libplacebo] [282] 
[   0.679][d][vo/gpu-next/libplacebo] [283] 	#if (FSR_EASU_PASSTHROUGH_ALPHA == 1)
[   0.679][d][vo/gpu-next/libplacebo] [284] 		pix.a = HOOKED_tex(HOOKED_pos).a;
[   0.679][d][vo/gpu-next/libplacebo] [285] 	#else
[   0.679][d][vo/gpu-next/libplacebo] [286] 		pix.a = float(1.0);
[   0.679][d][vo/gpu-next/libplacebo] [287] 	#endif
[   0.679][d][vo/gpu-next/libplacebo] [288] 	return pix;
[   0.679][d][vo/gpu-next/libplacebo] [289] }
[   0.679][d][vo/gpu-next/libplacebo] [290] 
[   0.679][d][global] config path: 'shaders/igv/SSimDownscaler.glsl' -> '/home/zen/.config/mpv/shaders/igv/SSimDownscaler.glsl'
[   0.679][d][global] user path: '~~/shaders/igv/SSimDownscaler.glsl' -> '/home/zen/.config/mpv/shaders/igv/SSimDownscaler.glsl'
[   0.679][v][vo/gpu-next/libplacebo] Registering hook pass: SSimDownscaler L2 pass 1
[   0.679][v][vo/gpu-next/libplacebo] Registering hook pass: SSimDownscaler L2 pass 2
[   0.679][v][vo/gpu-next/libplacebo] Registering hook pass: SSimDownscaler mean & R
[   0.679][v][vo/gpu-next/libplacebo] Registering hook pass: SSimDownscaler final pass
[   0.679][d][vo/gpu-next/libplacebo] Loaded user shader:
[   0.679][d][vo/gpu-next/libplacebo] [  1] // This library is free software; you can redistribute it and/or
[   0.679][d][vo/gpu-next/libplacebo] [  2] // modify it under the terms of the GNU Lesser General Public
[   0.679][d][vo/gpu-next/libplacebo] [  3] // License as published by the Free Software Foundation; either
[   0.679][d][vo/gpu-next/libplacebo] [  4] // version 3.0 of the License, or (at your option) any later version.
[   0.679][d][vo/gpu-next/libplacebo] [  5] // 
[   0.679][d][vo/gpu-next/libplacebo] [  6] // This library is distributed in the hope that it will be useful,
[   0.679][d][vo/gpu-next/libplacebo] [  7] // but WITHOUT ANY WARRANTY; without even the implied warranty of
[   0.679][d][vo/gpu-next/libplacebo] [  8] // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
[   0.679][d][vo/gpu-next/libplacebo] [  9] // Lesser General Public License for more details.
[   0.679][d][vo/gpu-next/libplacebo] [ 10] // 
[   0.679][d][vo/gpu-next/libplacebo] [ 11] // You should have received a copy of the GNU Lesser General Public
[   0.679][d][vo/gpu-next/libplacebo] [ 12] // License along with this library.
[   0.679][d][vo/gpu-next/libplacebo] [ 13] 
[   0.679][d][vo/gpu-next/libplacebo] [ 14] //!HOOK POSTKERNEL
[   0.679][d][vo/gpu-next/libplacebo] [ 15] //!BIND PREKERNEL
[   0.679][d][vo/gpu-next/libplacebo] [ 16] //!BIND HOOKED
[   0.679][d][vo/gpu-next/libplacebo] [ 17] //!SAVE L2
[   0.679][d][vo/gpu-next/libplacebo] [ 18] //!WIDTH NATIVE_CROPPED.w
[   0.679][d][vo/gpu-next/libplacebo] [ 19] //!WHEN NATIVE_CROPPED.h POSTKERNEL.h >
[   0.679][d][vo/gpu-next/libplacebo] [ 20] //!COMPONENTS 3
[   0.679][d][vo/gpu-next/libplacebo] [ 21] //!DESC SSimDownscaler L2 pass 1
[   0.679][d][vo/gpu-next/libplacebo] [ 22] 
[   0.679][d][vo/gpu-next/libplacebo] [ 23] #define axis 1
[   0.679][d][vo/gpu-next/libplacebo] [ 24] 
[   0.679][d][vo/gpu-next/libplacebo] [ 25] #define offset      vec2(0,0)
[   0.679][d][vo/gpu-next/libplacebo] [ 26] 
[   0.679][d][vo/gpu-next/libplacebo] [ 27] #define MN(B,C,x)   (x < 1.0 ? ((2.-1.5*B-(C))*x + (-3.+2.*B+C))*x*x + (1.-(B)/3.) : (((-(B)/6.-(C))*x + (B+5.*C))*x + (-2.*B-8.*C))*x+((4./3.)*B+4.*C))
[   0.679][d][vo/gpu-next/libplacebo] [ 28] #define Kernel(x)   MN(.0, .5, abs(x))
[   0.679][d][vo/gpu-next/libplacebo] [ 29] #define taps        2.0
[   0.679][d][vo/gpu-next/libplacebo] [ 30] 
[   0.679][d][vo/gpu-next/libplacebo] [ 31] vec4 hook() {
[   0.679][d][vo/gpu-next/libplacebo] [ 32]     vec2 base = PREKERNEL_pt * (PREKERNEL_pos * input_size + tex_offset);
[   0.679][d][vo/gpu-next/libplacebo] [ 33] 
[   0.679][d][vo/gpu-next/libplacebo] [ 34]     float low  = ceil((PREKERNEL_pos - taps*POSTKERNEL_pt) * input_size - offset + tex_offset - 0.5)[axis];
[   0.679][d][vo/gpu-next/libplacebo] [ 35]     float high = floor((PREKERNEL_pos + taps*POSTKERNEL_pt) * input_size - offset + tex_offset - 0.5)[axis];
[   0.679][d][vo/gpu-next/libplacebo] [ 36] 
[   0.679][d][vo/gpu-next/libplacebo] [ 37]     float W = 0.0;
[   0.679][d][vo/gpu-next/libplacebo] [ 38]     vec4 avg = vec4(0);
[   0.679][d][vo/gpu-next/libplacebo] [ 39]     vec2 pos = base;
[   0.679][d][vo/gpu-next/libplacebo] [ 40] 
[   0.679][d][vo/gpu-next/libplacebo] [ 41]     for (float k = low; k <= high; k++) {
[   0.679][d][vo/gpu-next/libplacebo] [ 42]         pos[axis] = PREKERNEL_pt[axis] * (k - offset[axis] + 0.5);
[   0.679][d][vo/gpu-next/libplacebo] [ 43]         float rel = (pos[axis] - base[axis])*POSTKERNEL_size[axis];
[   0.679][d][vo/gpu-next/libplacebo] [ 44]         float w = Kernel(rel);
[   0.679][d][vo/gpu-next/libplacebo] [ 45] 
[   0.679][d][vo/gpu-next/libplacebo] [ 46]         vec4 tex = textureLod(PREKERNEL_raw, pos, 0.0) * PREKERNEL_mul;
[   0.679][d][vo/gpu-next/libplacebo] [ 47]         avg += w * tex * tex;
[   0.679][d][vo/gpu-next/libplacebo] [ 48]         W += w;
[   0.679][d][vo/gpu-next/libplacebo] [ 49]     }
[   0.679][d][vo/gpu-next/libplacebo] [ 50]     avg /= W;
[   0.679][d][vo/gpu-next/libplacebo] [ 51] 
[   0.679][d][vo/gpu-next/libplacebo] [ 52]     return avg;
[   0.679][d][vo/gpu-next/libplacebo] [ 53] }
[   0.679][d][vo/gpu-next/libplacebo] [ 54] 
[   0.679][d][vo/gpu-next/libplacebo] [ 55] //!HOOK POSTKERNEL
[   0.679][d][vo/gpu-next/libplacebo] [ 56] //!BIND L2
[   0.679][d][vo/gpu-next/libplacebo] [ 57] //!BIND HOOKED
[   0.679][d][vo/gpu-next/libplacebo] [ 58] //!SAVE L2
[   0.679][d][vo/gpu-next/libplacebo] [ 59] //!WHEN NATIVE_CROPPED.w POSTKERNEL.w >
[   0.679][d][vo/gpu-next/libplacebo] [ 60] //!COMPONENTS 3
[   0.679][d][vo/gpu-next/libplacebo] [ 61] //!DESC SSimDownscaler L2 pass 2
[   0.679][d][vo/gpu-next/libplacebo] [ 62] 
[   0.679][d][vo/gpu-next/libplacebo] [ 63] #define axis 0
[   0.679][d][vo/gpu-next/libplacebo] [ 64] 
[   0.679][d][vo/gpu-next/libplacebo] [ 65] #define offset      vec2(0,0)
[   0.679][d][vo/gpu-next/libplacebo] [ 66] 
[   0.679][d][vo/gpu-next/libplacebo] [ 67] #define MN(B,C,x)   (x < 1.0 ? ((2.-1.5*B-(C))*x + (-3.+2.*B+C))*x*x + (1.-(B)/3.) : (((-(B)/6.-(C))*x + (B+5.*C))*x + (-2.*B-8.*C))*x+((4./3.)*B+4.*C))
[   0.679][d][vo/gpu-next/libplacebo] [ 68] #define Kernel(x)   MN(.0, .5, abs(x))
[   0.679][d][vo/gpu-next/libplacebo] [ 69] #define taps        2.0
[   0.679][d][vo/gpu-next/libplacebo] [ 70] 
[   0.679][d][vo/gpu-next/libplacebo] [ 71] vec4 hook() {
[   0.679][d][vo/gpu-next/libplacebo] [ 72]     float low  = ceil((L2_pos - taps*POSTKERNEL_pt) * L2_size - offset - 0.5)[axis];
[   0.679][d][vo/gpu-next/libplacebo] [ 73]     float high = floor((L2_pos + taps*POSTKERNEL_pt) * L2_size - offset - 0.5)[axis];
[   0.679][d][vo/gpu-next/libplacebo] [ 74] 
[   0.679][d][vo/gpu-next/libplacebo] [ 75]     float W = 0.0;
[   0.679][d][vo/gpu-next/libplacebo] [ 76]     vec4 avg = vec4(0);
[   0.679][d][vo/gpu-next/libplacebo] [ 77]     vec2 pos = L2_pos;
[   0.679][d][vo/gpu-next/libplacebo] [ 78] 
[   0.679][d][vo/gpu-next/libplacebo] [ 79]     for (float k = low; k <= high; k++) {
[   0.679][d][vo/gpu-next/libplacebo] [ 80]         pos[axis] = L2_pt[axis] * (k - offset[axis] + 0.5);
[   0.679][d][vo/gpu-next/libplacebo] [ 81]         float rel = (pos[axis] - L2_pos[axis])*POSTKERNEL_size[axis];
[   0.679][d][vo/gpu-next/libplacebo] [ 82]         float w = Kernel(rel);
[   0.679][d][vo/gpu-next/libplacebo] [ 83] 
[   0.679][d][vo/gpu-next/libplacebo] [ 84]         avg += w * textureLod(L2_raw, pos, 0.0) * L2_mul;
[   0.679][d][vo/gpu-next/libplacebo] [ 85]         W += w;
[   0.679][d][vo/gpu-next/libplacebo] [ 86]     }
[   0.679][d][vo/gpu-next/libplacebo] [ 87]     avg /= W;
[   0.679][d][vo/gpu-next/libplacebo] [ 88] 
[   0.679][d][vo/gpu-next/libplacebo] [ 89]     return avg;
[   0.679][d][vo/gpu-next/libplacebo] [ 90] }
[   0.679][d][vo/gpu-next/libplacebo] [ 91] 
[   0.679][d][vo/gpu-next/libplacebo] [ 92] //!HOOK POSTKERNEL
[   0.679][d][vo/gpu-next/libplacebo] [ 93] //!BIND HOOKED
[   0.679][d][vo/gpu-next/libplacebo] [ 94] //!BIND L2
[   0.679][d][vo/gpu-next/libplacebo] [ 95] //!SAVE MR
[   0.679][d][vo/gpu-next/libplacebo] [ 96] //!WHEN NATIVE_CROPPED.h POSTKERNEL.h >
[   0.679][d][vo/gpu-next/libplacebo] [ 97] //!COMPONENTS 4
[   0.679][d][vo/gpu-next/libplacebo] [ 98] //!DESC SSimDownscaler mean & R
[   0.679][d][vo/gpu-next/libplacebo] [ 99] 
[   0.679][d][vo/gpu-next/libplacebo] [100] #define oversharp   0.0
[   0.679][d][vo/gpu-next/libplacebo] [101] 
[   0.679][d][vo/gpu-next/libplacebo] [102] #define sigma_nsq   10. / (255.*255.)
[   0.679][d][vo/gpu-next/libplacebo] [103] #define locality    2.0
[   0.679][d][vo/gpu-next/libplacebo] [104] 
[   0.679][d][vo/gpu-next/libplacebo] [105] #define offset      vec2(0,0)
[   0.679][d][vo/gpu-next/libplacebo] [106] 
[   0.679][d][vo/gpu-next/libplacebo] [107] #define Kernel(x)   pow(1.0 / locality, abs(x))
[   0.679][d][vo/gpu-next/libplacebo] [108] #define taps        3.0
[   0.679][d][vo/gpu-next/libplacebo] [109] 
[   0.679][d][vo/gpu-next/libplacebo] [110] #define Luma(rgb)   ( dot(rgb, vec3(0.2126, 0.7152, 0.0722)) )
[   0.679][d][vo/gpu-next/libplacebo] [111] 
[   0.679][d][vo/gpu-next/libplacebo] [112] mat3x3 ScaleH(vec2 pos) {
[   0.679][d][vo/gpu-next/libplacebo] [113]     float low  = ceil(-0.5*taps - offset)[0];
[   0.679][d][vo/gpu-next/libplacebo] [114]     float high = floor(0.5*taps - offset)[0];
[   0.679][d][vo/gpu-next/libplacebo] [115] 
[   0.679][d][vo/gpu-next/libplacebo] [116]     float W = 0.0;
[   0.679][d][vo/gpu-next/libplacebo] [117]     mat3x3 avg = mat3x3(0);
[   0.679][d][vo/gpu-next/libplacebo] [118] 
[   0.679][d][vo/gpu-next/libplacebo] [119]     for (float k = low; k <= high; k++) {
[   0.679][d][vo/gpu-next/libplacebo] [120]         pos[0] = HOOKED_pos[0] + HOOKED_pt[0] * k;
[   0.679][d][vo/gpu-next/libplacebo] [121]         float rel = k + offset[0];
[   0.679][d][vo/gpu-next/libplacebo] [122]         float w = Kernel(rel);
[   0.679][d][vo/gpu-next/libplacebo] [123] 
[   0.679][d][vo/gpu-next/libplacebo] [124]         vec3 L = POSTKERNEL_tex(pos).rgb;
[   0.679][d][vo/gpu-next/libplacebo] [125]         avg += w * mat3x3(L, L*L, L2_tex(pos).rgb);
[   0.679][d][vo/gpu-next/libplacebo] [126]         W += w;
[   0.679][d][vo/gpu-next/libplacebo] [127]     }
[   0.679][d][vo/gpu-next/libplacebo] [128]     avg /= W;
[   0.679][d][vo/gpu-next/libplacebo] [129] 
[   0.679][d][vo/gpu-next/libplacebo] [130]     return avg;
[   0.679][d][vo/gpu-next/libplacebo] [131] }
[   0.679][d][vo/gpu-next/libplacebo] [132] 
[   0.679][d][vo/gpu-next/libplacebo] [133] vec4 hook() {
[   0.679][d][vo/gpu-next/libplacebo] [134]     vec2 pos = HOOKED_pos;
[   0.679][d][vo/gpu-next/libplacebo] [135] 
[   0.679][d][vo/gpu-next/libplacebo] [136]     float low  = ceil(-0.5*taps - offset)[1];
[   0.679][d][vo/gpu-next/libplacebo] [137]     float high = floor(0.5*taps - offset)[1];
[   0.679][d][vo/gpu-next/libplacebo] [138] 
[   0.679][d][vo/gpu-next/libplacebo] [139]     float W = 0.0;
[   0.679][d][vo/gpu-next/libplacebo] [140]     mat3x3 avg = mat3x3(0);
[   0.679][d][vo/gpu-next/libplacebo] [141] 
[   0.679][d][vo/gpu-next/libplacebo] [142]     for (float k = low; k <= high; k++) {
[   0.679][d][vo/gpu-next/libplacebo] [143]         pos[1] = HOOKED_pos[1] + HOOKED_pt[1] * k;
[   0.679][d][vo/gpu-next/libplacebo] [144]         float rel = k + offset[1];
[   0.679][d][vo/gpu-next/libplacebo] [145]         float w = Kernel(rel);
[   0.679][d][vo/gpu-next/libplacebo] [146] 
[   0.679][d][vo/gpu-next/libplacebo] [147]         avg += w * ScaleH(pos);
[   0.679][d][vo/gpu-next/libplacebo] [148]         W += w;
[   0.679][d][vo/gpu-next/libplacebo] [149]     }
[   0.679][d][vo/gpu-next/libplacebo] [150]     avg /= W;
[   0.679][d][vo/gpu-next/libplacebo] [151] 
[   0.679][d][vo/gpu-next/libplacebo] [152]     float Sl = Luma(max(avg[1] - avg[0] * avg[0], 0.));
[   0.679][d][vo/gpu-next/libplacebo] [153]     float Sh = Luma(max(avg[2] - avg[0] * avg[0], 0.));
[   0.679][d][vo/gpu-next/libplacebo] [154]     return vec4(avg[0], mix(sqrt((Sh + sigma_nsq) / (Sl + sigma_nsq)) * (1. + oversharp), clamp(Sh / Sl, 0., 1.), float(Sl > Sh)));
[   0.679][d][vo/gpu-next/libplacebo] [155] }
[   0.679][d][vo/gpu-next/libplacebo] [156] 
[   0.679][d][vo/gpu-next/libplacebo] [157] //!HOOK POSTKERNEL
[   0.679][d][vo/gpu-next/libplacebo] [158] //!BIND HOOKED
[   0.679][d][vo/gpu-next/libplacebo] [159] //!BIND MR
[   0.679][d][vo/gpu-next/libplacebo] [160] //!WHEN NATIVE_CROPPED.h POSTKERNEL.h >
[   0.679][d][vo/gpu-next/libplacebo] [161] //!DESC SSimDownscaler final pass
[   0.679][d][vo/gpu-next/libplacebo] [162] 
[   0.679][d][vo/gpu-next/libplacebo] [163] #define locality    2.0
[   0.679][d][vo/gpu-next/libplacebo] [164] 
[   0.679][d][vo/gpu-next/libplacebo] [165] #define offset      vec2(0,0)
[   0.679][d][vo/gpu-next/libplacebo] [166] 
[   0.679][d][vo/gpu-next/libplacebo] [167] #define Kernel(x)   pow(1.0 / locality, abs(x))
[   0.679][d][vo/gpu-next/libplacebo] [168] #define taps        3.0
[   0.679][d][vo/gpu-next/libplacebo] [169] 
[   0.679][d][vo/gpu-next/libplacebo] [170] #define Gamma(x)    ( pow(x, vec3(1.0/2.0)) )
[   0.679][d][vo/gpu-next/libplacebo] [171] #define GammaInv(x) ( pow(clamp(x, 0.0, 1.0), vec3(2.0)) )
[   0.679][d][vo/gpu-next/libplacebo] [172] 
[   0.679][d][vo/gpu-next/libplacebo] [173] mat3x3 ScaleH(vec2 pos) {
[   0.679][d][vo/gpu-next/libplacebo] [174]     float low  = ceil(-0.5*taps - offset)[0];
[   0.679][d][vo/gpu-next/libplacebo] [175]     float high = floor(0.5*taps - offset)[0];
[   0.679][d][vo/gpu-next/libplacebo] [176] 
[   0.679][d][vo/gpu-next/libplacebo] [177]     float W = 0.0;
[   0.679][d][vo/gpu-next/libplacebo] [178]     mat3x3 avg = mat3x3(0);
[   0.679][d][vo/gpu-next/libplacebo] [179] 
[   0.679][d][vo/gpu-next/libplacebo] [180]     for (float k = low; k <= high; k++) {
[   0.679][d][vo/gpu-next/libplacebo] [181]         pos[0] = HOOKED_pos[0] + HOOKED_pt[0] * k;
[   0.679][d][vo/gpu-next/libplacebo] [182]         float rel = k + offset[0];
[   0.679][d][vo/gpu-next/libplacebo] [183]         float w = Kernel(rel);
[   0.679][d][vo/gpu-next/libplacebo] [184] 
[   0.679][d][vo/gpu-next/libplacebo] [185]         vec4 MR = MR_tex(pos);
[   0.679][d][vo/gpu-next/libplacebo] [186]         avg += w * mat3x3(MR.a*MR.rgb, MR.rgb, MR.aaa);
[   0.679][d][vo/gpu-next/libplacebo] [187]         W += w;
[   0.679][d][vo/gpu-next/libplacebo] [188]     }
[   0.679][d][vo/gpu-next/libplacebo] [189]     avg /= W;
[   0.679][d][vo/gpu-next/libplacebo] [190] 
[   0.679][d][vo/gpu-next/libplacebo] [191]     return avg;
[   0.679][d][vo/gpu-next/libplacebo] [192] }
[   0.679][d][vo/gpu-next/libplacebo] [193] 
[   0.679][d][vo/gpu-next/libplacebo] [194] vec4 hook() {
[   0.679][d][vo/gpu-next/libplacebo] [195]     vec2 pos = HOOKED_pos;
[   0.679][d][vo/gpu-next/libplacebo] [196] 
[   0.679][d][vo/gpu-next/libplacebo] [197]     float low  = ceil(-0.5*taps - offset)[1];
[   0.679][d][vo/gpu-next/libplacebo] [198]     float high = floor(0.5*taps - offset)[1];
[   0.679][d][vo/gpu-next/libplacebo] [199] 
[   0.679][d][vo/gpu-next/libplacebo] [200]     float W = 0.0;
[   0.679][d][vo/gpu-next/libplacebo] [201]     mat3x3 avg = mat3x3(0);
[   0.679][d][vo/gpu-next/libplacebo] [202] 
[   0.679][d][vo/gpu-next/libplacebo] [203]     for (float k = low; k <= high; k++) {
[   0.679][d][vo/gpu-next/libplacebo] [204]         pos[1] = HOOKED_pos[1] + HOOKED_pt[1] * k;
[   0.679][d][vo/gpu-next/libplacebo] [205]         float rel = k + offset[1];
[   0.679][d][vo/gpu-next/libplacebo] [206]         float w = Kernel(rel);
[   0.679][d][vo/gpu-next/libplacebo] [207] 
[   0.679][d][vo/gpu-next/libplacebo] [208]         avg += w * ScaleH(pos);
[   0.679][d][vo/gpu-next/libplacebo] [209]         W += w;
[   0.679][d][vo/gpu-next/libplacebo] [210]     }
[   0.679][d][vo/gpu-next/libplacebo] [211]     avg /= W;
[   0.679][d][vo/gpu-next/libplacebo] [212]     vec4 L = POSTKERNEL_texOff(0);
[   0.679][d][vo/gpu-next/libplacebo] [213]     return vec4(avg[1] + avg[2] * L.rgb - avg[0], L.a);
[   0.679][d][vo/gpu-next/libplacebo] [214] }
[   0.679][d][vo/gpu-next] Render options updated, resetting render state.
[   0.680][v][vo/gpu-next] Assuming 100.000000 FPS for display sync.
[   0.680][v][vd] Container reported FPS: 29.970030
[   0.681][v][vd] Codec list:
[   0.681][v][vd]     h264 - H.264 / AVC / MPEG-4 AVC / MPEG-4 part 10
[   0.681][v][vd]     h264_v4l2m2m (h264) - V4L2 mem2mem H.264 decoder wrapper
[   0.681][v][vd]     h264_qsv (h264) - H264 video (Intel Quick Sync Video acceleration)
[   0.681][v][vd]     h264_cuvid (h264) - Nvidia CUVID H264 decoder
[   0.681][v][vd] Opening decoder h264
[   0.681][v][vd] No hardware decoding requested.
[   0.681][v][vd] Using software decoding.
[   0.681][v][vd] Detected 8 logical cores.
[   0.681][v][vd] Requesting 9 threads for decoding.
[   0.683][v][vd] Selected decoder: h264 - H.264 / AVC / MPEG-4 AVC / MPEG-4 part 10
[   0.683][v][vf] User filter list:
[   0.683][v][vf]   (empty)
[   0.683][v][ad] Codec list:
[   0.683][v][ad]     aac - AAC (Advanced Audio Coding)
[   0.683][v][ad]     aac_fixed (aac) - AAC (Advanced Audio Coding)
[   0.683][v][ad] Opening decoder aac
[   0.683][v][ad] Requesting 1 threads for decoding.
[   0.684][v][ad] Selected decoder: aac - AAC (Advanced Audio Coding)
[   0.684][v][af] User filter list:
[   0.684][v][af]   (empty)
[   0.684][v][cplayer] Starting playback...
[   0.685][v][auto_profiles] Re-evaluating auto profile 8k-fix
[   0.685][v][cplayer] Set property: user-data/simplehistory/menu-open="no" -> 1
[   0.685][v][cplayer] Set property: user-data/simplebookmark/menu-open="no" -> 1
[   0.686][d][global] config path: 'fonts' -> '/home/zen/.config/mpv/fonts'
[   0.686][d][osd/libass] ASS library version: 0x1703000 (runtime 0x1703000)
[   0.686][v][osd/libass] libass API version: 0x1703000
[   0.686][v][osd/libass] libass source: commit: 0.17.3-0-ge46aedea0a0d17da4c4ef49d84b94a7994664ab5
[   0.686][v][osd/libass] Shaper: FriBidi 1.0.15 (SIMPLE) HarfBuzz-ng 11.2.1 (COMPLEX)
[   0.686][d][global] config path: 'subfont.ttf' -/-> '/home/zen/.config/mpv/subfont.ttf'
[   0.686][d][global] config path: 'subfont.ttf' -/-> '/home/zen/.mpv/subfont.ttf'
[   0.686][d][global] config path: 'subfont.ttf' -/-> '/etc/mpv/subfont.ttf'
[   0.686][d][global] config path: 'fonts.conf' -/-> '/home/zen/.config/mpv/fonts.conf'
[   0.686][d][global] config path: 'fonts.conf' -/-> '/home/zen/.mpv/fonts.conf'
[   0.686][d][global] config path: 'fonts.conf' -/-> '/etc/mpv/fonts.conf'
[   0.686][v][osd/libass] Setting up fonts...
[   0.687][v][osd/libass] Loading font file '/home/zen/.config/mpv/fonts/modernx-osc-icon.ttf'
[   0.687][v][osd/libass] Loading font file '/home/zen/.config/mpv/fonts/MaterialIconsRound-Regular.otf'
[   0.687][v][osd/libass] Loading font file '/home/zen/.config/mpv/fonts/Material-Design-Iconic-Font.ttf'
[   0.687][v][osd/libass] Loading font file '/home/zen/.config/mpv/fonts/uosc_textures.ttf'
[   0.691][v][osd/libass] Using font provider fontconfig
[   0.691][v][osd/libass] Done.
[   0.692][v][cplayer] Set property: user-data/smartcopypaste/menu-open="no" -> 1
[   0.692][d][cplayer] Run command: normalize-path, flags=64, args=[filename="/home/zen/Downloads/Video/FSDSS-125.mkv"]
[   0.692][v][cplayer] Set property: user-data/display_name="" -> 1
[   0.692][d][global] config path: 'fonts' -> '/home/zen/.config/mpv/fonts'
[   0.692][d][osd/libass] ASS library version: 0x1703000 (runtime 0x1703000)
[   0.692][v][osd/libass] libass API version: 0x1703000
[   0.692][v][osd/libass] libass source: commit: 0.17.3-0-ge46aedea0a0d17da4c4ef49d84b94a7994664ab5
[   0.692][v][osd/libass] Shaper: FriBidi 1.0.15 (SIMPLE) HarfBuzz-ng 11.2.1 (COMPLEX)
[   0.692][d][global] config path: 'subfont.ttf' -/-> '/home/zen/.config/mpv/subfont.ttf'
[   0.692][d][global] config path: 'subfont.ttf' -/-> '/home/zen/.mpv/subfont.ttf'
[   0.692][d][global] config path: 'subfont.ttf' -/-> '/etc/mpv/subfont.ttf'
[   0.692][d][global] config path: 'fonts.conf' -/-> '/home/zen/.config/mpv/fonts.conf'
[   0.692][d][global] config path: 'fonts.conf' -/-> '/home/zen/.mpv/fonts.conf'
[   0.692][d][global] config path: 'fonts.conf' -/-> '/etc/mpv/fonts.conf'
[   0.692][v][osd/libass] Setting up fonts...
[   0.693][v][osd/libass] Loading font file '/home/zen/.config/mpv/fonts/modernx-osc-icon.ttf'
[   0.693][v][osd/libass] Loading font file '/home/zen/.config/mpv/fonts/MaterialIconsRound-Regular.otf'
[   0.693][v][osd/libass] Loading font file '/home/zen/.config/mpv/fonts/Material-Design-Iconic-Font.ttf'
[   0.693][v][osd/libass] Loading font file '/home/zen/.config/mpv/fonts/uosc_textures.ttf'
[   0.697][v][osd/libass] Using font provider fontconfig
[   0.698][v][osd/libass] Done.
[   0.698][d][global] config path: 'fonts' -> '/home/zen/.config/mpv/fonts'
[   0.698][d][osd/libass] ASS library version: 0x1703000 (runtime 0x1703000)
[   0.698][v][osd/libass] libass API version: 0x1703000
[   0.698][v][osd/libass] libass source: commit: 0.17.3-0-ge46aedea0a0d17da4c4ef49d84b94a7994664ab5
[   0.698][v][osd/libass] Shaper: FriBidi 1.0.15 (SIMPLE) HarfBuzz-ng 11.2.1 (COMPLEX)
[   0.698][d][global] config path: 'subfont.ttf' -/-> '/home/zen/.config/mpv/subfont.ttf'
[   0.698][d][global] config path: 'subfont.ttf' -/-> '/home/zen/.mpv/subfont.ttf'
[   0.698][d][global] config path: 'subfont.ttf' -/-> '/etc/mpv/subfont.ttf'
[   0.698][d][global] config path: 'fonts.conf' -/-> '/home/zen/.config/mpv/fonts.conf'
[   0.698][d][global] config path: 'fonts.conf' -/-> '/home/zen/.mpv/fonts.conf'
[   0.698][d][global] config path: 'fonts.conf' -/-> '/etc/mpv/fonts.conf'
[   0.698][v][osd/libass] Setting up fonts...
[   0.699][v][osd/libass] Loading font file '/home/zen/.config/mpv/fonts/modernx-osc-icon.ttf'
[   0.699][v][osd/libass] Loading font file '/home/zen/.config/mpv/fonts/MaterialIconsRound-Regular.otf'
[   0.699][v][osd/libass] Loading font file '/home/zen/.config/mpv/fonts/Material-Design-Iconic-Font.ttf'
[   0.699][v][osd/libass] Loading font file '/home/zen/.config/mpv/fonts/uosc_textures.ttf'
[   0.703][v][osd/libass] Using font provider fontconfig
[   0.703][v][osd/libass] Done.
[   0.704][d][global] config path: 'fonts' -> '/home/zen/.config/mpv/fonts'
[   0.704][d][osd/libass] ASS library version: 0x1703000 (runtime 0x1703000)
[   0.704][v][osd/libass] libass API version: 0x1703000
[   0.704][v][osd/libass] libass source: commit: 0.17.3-0-ge46aedea0a0d17da4c4ef49d84b94a7994664ab5
[   0.704][v][osd/libass] Shaper: FriBidi 1.0.15 (SIMPLE) HarfBuzz-ng 11.2.1 (COMPLEX)
[   0.704][d][global] config path: 'subfont.ttf' -/-> '/home/zen/.config/mpv/subfont.ttf'
[   0.704][d][global] config path: 'subfont.ttf' -/-> '/home/zen/.mpv/subfont.ttf'
[   0.704][d][global] config path: 'subfont.ttf' -/-> '/etc/mpv/subfont.ttf'
[   0.704][d][global] config path: 'fonts.conf' -/-> '/home/zen/.config/mpv/fonts.conf'
[   0.704][d][global] config path: 'fonts.conf' -/-> '/home/zen/.mpv/fonts.conf'
[   0.704][d][global] config path: 'fonts.conf' -/-> '/etc/mpv/fonts.conf'
[   0.704][v][osd/libass] Setting up fonts...
[   0.705][v][osd/libass] Loading font file '/home/zen/.config/mpv/fonts/modernx-osc-icon.ttf'
[   0.705][v][osd/libass] Loading font file '/home/zen/.config/mpv/fonts/MaterialIconsRound-Regular.otf'
[   0.705][v][osd/libass] Loading font file '/home/zen/.config/mpv/fonts/Material-Design-Iconic-Font.ttf'
[   0.705][v][osd/libass] Loading font file '/home/zen/.config/mpv/fonts/uosc_textures.ttf'
[   0.710][v][osd/libass] Using font provider fontconfig
[   0.710][v][osd/libass] Done.
[   0.710][d][cplayer] Run command: normalize-path, flags=64, args=[filename="/home/zen/Downloads/Video/FSDSS-125.mkv"]
[   0.711][d][cplayer] Run command: normalize-path, flags=64, args=[filename="/home/zen/Downloads/Video/FSDSS-125.mkv"]
[   0.711][d][cplayer] Run command: overlay-remove, flags=64, args=[id="42"]
[   0.711][d][cplayer] Run command: script-message, flags=64, args=[args="thumbfast-info", args="{\"disabled\":false,\"height\":200,\"overlay_id\":42,\"available\":true,\"socket\":\"/tmp/thumbfast15836\",\"thumbnail\":\"/tmp/thumbfast.out15836\",\"width\":200}"]
[   0.711][d][cplayer] Run command: define-section, flags=64, args=[name="input_simplebookmark", contents="", flags="default"]
[   0.711][d][cplayer] Run command: normalize-path, flags=64, args=[filename="/home/zen/Downloads/Video/FSDSS-125.mkv"]
[   0.711][d][cplayer] Run command: enable-section, flags=64, args=[name="input_simplebookmark", flags="allow-hide-cursor+allow-vo-dragging"]
[   0.711][v][af] [in] 48000Hz stereo 2ch floatp
[   0.711][v][af] [userspeed] 48000Hz stereo 2ch floatp
[   0.711][v][af] [userspeed] (disabled)
[   0.711][v][af] [convert] 48000Hz stereo 2ch floatp
[   0.711][d][ffmpeg/video] h264: Reinit context to 1280x720, pix_fmt: yuv420p
[   0.711][d][vd] DR parameter change to 1280x738 yuv420p align=64
[   0.711][d][vd] Allocating new (host-cached) DR image...
[   0.712][d][vo/gpu-next/libplacebo] Allocating 5922816 memory of type 0xe (id 4) in heap 1: unknown
[   0.713][d][vo/gpu-next/libplacebo] Spent 1.072 ms allocating slab
[   0.713][d][vd] Allocating new (host-cached) DR image...
[   0.713][d][vd] Allocating new (host-cached) DR image...
[   0.714][d][vd] Allocating new (host-cached) DR image...
[   0.714][d][vd] Allocating new (host-cached) DR image...
[   0.714][d][vo/gpu-next/libplacebo] Allocating 11845632 memory of type 0xe (id 4) in heap 1: unknown
[   0.716][d][vo/gpu-next/libplacebo] Spent 1.620 ms allocating slab
[   0.716][d][vd] Allocating new (host-cached) DR image...
[   0.717][d][vd] Allocating new (host-cached) DR image...
[   0.717][d][vd] Allocating new (host-cached) DR image...
[   0.718][d][vd] Allocating new (host-cached) DR image...
[   0.719][d][vd] Allocating new (host-cached) DR image...
[   0.719][d][vd] Allocating new (host-cached) DR image...
[   0.720][v][vd] Using software decoding.
[   0.720][v][vd] Decoder format: 1280x720 [4096:4095] yuv420p auto/auto/auto/auto/auto CL=mpeg2/4/h264 crop=1280x720+0+0
[   0.720][v][vf] [in] 1280x720 [4096:4095] yuv420p bt.709/bt.709/bt.1886/limited/display CL=mpeg2/4/h264 crop=1280x720+0+0
[   0.720][v][vf] [userdeint] 1280x720 [4096:4095] yuv420p bt.709/bt.709/bt.1886/limited/display CL=mpeg2/4/h264 crop=1280x720+0+0
[   0.720][v][vf] [userdeint] (disabled)
[   0.720][v][vf] [autorotate] 1280x720 [4096:4095] yuv420p bt.709/bt.709/bt.1886/limited/display CL=mpeg2/4/h264 crop=1280x720+0+0
[   0.720][v][vf] [autorotate] (disabled)
[   0.720][v][vf] [convert] 1280x720 [4096:4095] yuv420p bt.709/bt.709/bt.1886/limited/display CL=mpeg2/4/h264 crop=1280x720+0+0
[   0.720][v][vf] [convert] (disabled)
[   0.720][v][vf] [out] 1280x720 [4096:4095] yuv420p bt.709/bt.709/bt.1886/limited/display CL=mpeg2/4/h264 crop=1280x720+0+0
[   0.720][d][cplayer] Run command: define-section, flags=64, args=[name="input_smartcopypaste_II", contents="", flags="default"]
[   0.721][v][auto_profiles] Re-evaluating auto profile 8k-fix
[   0.721][d][cplayer] Run command: define-section, flags=64, args=[name="input_forced_simplebookmark", contents="", flags="force"]
[   0.721][d][cplayer] Run command: enable-section, flags=64, args=[name="input_forced_simplebookmark", flags="allow-hide-cursor+allow-vo-dragging"]
[   0.721][d][cplayer] Run command: enable-section, flags=64, args=[name="input_smartcopypaste_II", flags="allow-hide-cursor+allow-vo-dragging"]
[   0.721][v][ao] Trying audio driver 'alsa'
[   0.721][v][ao/alsa] requested format: 48000 Hz, stereo channels, floatp
[   0.721][v][ao/alsa] using ALSA version: 1.2.14
[   0.721][v][ao/alsa] opening device 'default'
[   0.723][i][simplehistory] Added the below into history
[   0.723][i][simplehistory] FSDSS-125.mkv üïí00:00:00.000
[   0.724][d][ao/alsa] PCM setup:
[   0.724][d][ao/alsa] ---
[   0.724][d][ao/alsa] ALSA <-> PipeWire PCM I/O Plugin
[   0.724][d][ao/alsa] ---
[   0.724][d][ao/alsa] Start HW params:
[   0.724][d][ao/alsa] ---
[   0.724][d][ao/alsa] ACCESS:  MMAP_INTERLEAVED MMAP_NONINTERLEAVED RW_INTERLEAVED RW_NONINTERLEAVED
[   0.724][d][ao/alsa] FORMAT:  U8 S16_LE S24_LE S32_LE FLOAT_LE S24_3LE S24_3BE
[   0.724][d][ao/alsa] SUBFORMAT:  STD MSBITS_MAX MSBITS_20 MSBITS_24
[   0.724][d][ao/alsa] SAMPLE_BITS: [8 32]
[   0.724][d][ao/alsa] FRAME_BITS: [8 2048]
[   0.724][d][ao/alsa] CHANNELS: [1 64]
[   0.724][d][ao/alsa] RATE: [1 384000]
[   0.724][d][ao/alsa] PERIOD_TIME: (0 4294967295)
[   0.724][d][ao/alsa] PERIOD_SIZE: (0 2097152]
[   0.724][d][ao/alsa] PERIOD_BYTES: [128 2097152]
[   0.724][d][ao/alsa] PERIODS: [2 1024]
[   0.724][d][ao/alsa] BUFFER_TIME: (2 4294967295]
[   0.724][d][ao/alsa] BUFFER_SIZE: [1 4194304]
[   0.724][d][ao/alsa] BUFFER_BYTES: [256 4194304]
[   0.724][d][ao/alsa] TICK_TIME: ALL
[   0.724][d][ao/alsa] ---
[   0.724][d][ao/alsa] HW params after rate:
[   0.724][d][ao/alsa] ---
[   0.724][d][ao/alsa] ACCESS:  MMAP_INTERLEAVED MMAP_NONINTERLEAVED RW_INTERLEAVED RW_NONINTERLEAVED
[   0.724][d][ao/alsa] FORMAT:  U8 S16_LE S24_LE S32_LE FLOAT_LE S24_3LE S24_3BE
[   0.724][d][ao/alsa] SUBFORMAT:  STD MSBITS_MAX MSBITS_20 MSBITS_24
[   0.724][d][ao/alsa] SAMPLE_BITS: [8 32]
[   0.724][d][ao/alsa] FRAME_BITS: [8 2048]
[   0.724][d][ao/alsa] CHANNELS: [1 64]
[   0.724][d][ao/alsa] RATE: [1 384000]
[   0.724][d][ao/alsa] PERIOD_TIME: (0 4294967295)
[   0.724][d][ao/alsa] PERIOD_SIZE: (0 2097152]
[   0.724][d][ao/alsa] PERIOD_BYTES: [128 2097152]
[   0.724][d][ao/alsa] PERIODS: [2 1024]
[   0.724][d][ao/alsa] BUFFER_TIME: (2 4294967295]
[   0.724][d][ao/alsa] BUFFER_SIZE: [1 4194304]
[   0.724][d][ao/alsa] BUFFER_BYTES: [256 4194304]
[   0.724][d][ao/alsa] TICK_TIME: ALL
[   0.724][d][ao/alsa] ---
[   0.724][d][ao/alsa] HW params after access:
[   0.724][d][ao/alsa] ---
[   0.724][d][ao/alsa] ACCESS:  RW_INTERLEAVED
[   0.724][d][ao/alsa] FORMAT:  U8 S16_LE S24_LE S32_LE FLOAT_LE S24_3LE S24_3BE
[   0.724][d][ao/alsa] SUBFORMAT:  STD MSBITS_MAX MSBITS_20 MSBITS_24
[   0.724][d][ao/alsa] SAMPLE_BITS: [8 32]
[   0.724][d][ao/alsa] FRAME_BITS: [8 2048]
[   0.724][d][ao/alsa] CHANNELS: [1 64]
[   0.724][d][ao/alsa] RATE: [1 384000]
[   0.724][d][ao/alsa] PERIOD_TIME: (0 4294967295)
[   0.724][d][ao/alsa] PERIOD_SIZE: (0 2097152]
[   0.724][d][ao/alsa] PERIOD_BYTES: [128 2097152]
[   0.724][d][ao/alsa] PERIODS: [2 1024]
[   0.724][d][ao/alsa] BUFFER_TIME: (2 4294967295]
[   0.724][d][ao/alsa] BUFFER_SIZE: [1 4194304]
[   0.724][d][ao/alsa] BUFFER_BYTES: [256 4194304]
[   0.724][d][ao/alsa] TICK_TIME: ALL
[   0.724][d][ao/alsa] ---
[   0.724][v][ao/alsa] trying format float/14
[   0.724][d][ao/alsa] HW params after format:
[   0.724][d][ao/alsa] ---
[   0.724][d][ao/alsa] ACCESS:  RW_INTERLEAVED
[   0.724][d][ao/alsa] FORMAT:  FLOAT_LE
[   0.724][d][ao/alsa] SUBFORMAT:  STD MSBITS_MAX MSBITS_20 MSBITS_24
[   0.724][d][ao/alsa] SAMPLE_BITS: 32
[   0.724][d][ao/alsa] FRAME_BITS: [32 2048]
[   0.724][d][ao/alsa] CHANNELS: [1 64]
[   0.724][d][ao/alsa] RATE: [1 384000]
[   0.724][d][ao/alsa] PERIOD_TIME: (0 4294967295)
[   0.724][d][ao/alsa] PERIOD_SIZE: (0 524288]
[   0.724][d][ao/alsa] PERIOD_BYTES: [128 2097152]
[   0.724][d][ao/alsa] PERIODS: [2 1024]
[   0.724][d][ao/alsa] BUFFER_TIME: (2 4294967295]
[   0.724][d][ao/alsa] BUFFER_SIZE: [1 1048576]
[   0.724][d][ao/alsa] BUFFER_BYTES: [256 4194304]
[   0.724][d][ao/alsa] TICK_TIME: ALL
[   0.724][d][ao/alsa] ---
[   0.724][d][ao/alsa] HW params after channels:
[   0.724][d][ao/alsa] ---
[   0.724][d][ao/alsa] ACCESS:  RW_INTERLEAVED
[   0.724][d][ao/alsa] FORMAT:  FLOAT_LE
[   0.724][d][ao/alsa] SUBFORMAT:  STD MSBITS_MAX MSBITS_20 MSBITS_24
[   0.724][d][ao/alsa] SAMPLE_BITS: 32
[   0.724][d][ao/alsa] FRAME_BITS: 64
[   0.724][d][ao/alsa] CHANNELS: 2
[   0.724][d][ao/alsa] RATE: [1 384000]
[   0.724][d][ao/alsa] PERIOD_TIME: (41 4294967295)
[   0.724][d][ao/alsa] PERIOD_SIZE: [16 262144]
[   0.724][d][ao/alsa] PERIOD_BYTES: [128 2097152]
[   0.724][d][ao/alsa] PERIODS: [2 1024]
[   0.724][d][ao/alsa] BUFFER_TIME: (83 4294967295]
[   0.724][d][ao/alsa] BUFFER_SIZE: [32 524288]
[   0.724][d][ao/alsa] BUFFER_BYTES: [256 4194304]
[   0.724][d][ao/alsa] TICK_TIME: ALL
[   0.724][d][ao/alsa] ---
[   0.724][d][ao/alsa] HW params after rate-2:
[   0.724][d][ao/alsa] ---
[   0.724][d][ao/alsa] ACCESS:  RW_INTERLEAVED
[   0.724][d][ao/alsa] FORMAT:  FLOAT_LE
[   0.724][d][ao/alsa] SUBFORMAT:  STD MSBITS_MAX MSBITS_20 MSBITS_24
[   0.724][d][ao/alsa] SAMPLE_BITS: 32
[   0.724][d][ao/alsa] FRAME_BITS: 64
[   0.724][d][ao/alsa] CHANNELS: 2
[   0.724][d][ao/alsa] RATE: 48000
[   0.724][d][ao/alsa] PERIOD_TIME: (333 5461334)
[   0.724][d][ao/alsa] PERIOD_SIZE: [16 262144]
[   0.724][d][ao/alsa] PERIOD_BYTES: [128 2097152]
[   0.724][d][ao/alsa] PERIODS: [2 1024]
[   0.724][d][ao/alsa] BUFFER_TIME: (666 10922667)
[   0.724][d][ao/alsa] BUFFER_SIZE: [32 524288]
[   0.724][d][ao/alsa] BUFFER_BYTES: [256 4194304]
[   0.724][d][ao/alsa] TICK_TIME: ALL
[   0.724][d][ao/alsa] ---
[   0.724][d][ao/alsa] Going to set final HW params:
[   0.724][d][ao/alsa] ---
[   0.724][d][ao/alsa] ACCESS:  RW_INTERLEAVED
[   0.724][d][ao/alsa] FORMAT:  FLOAT_LE
[   0.724][d][ao/alsa] SUBFORMAT:  STD MSBITS_MAX MSBITS_20 MSBITS_24
[   0.724][d][ao/alsa] SAMPLE_BITS: 32
[   0.724][d][ao/alsa] FRAME_BITS: 64
[   0.724][d][ao/alsa] CHANNELS: 2
[   0.724][d][ao/alsa] RATE: 48000
[   0.724][d][ao/alsa] PERIOD_TIME: 25000
[   0.724][d][ao/alsa] PERIOD_SIZE: 1200
[   0.724][d][ao/alsa] PERIOD_BYTES: 9600
[   0.724][d][ao/alsa] PERIODS: 4
[   0.724][d][ao/alsa] BUFFER_TIME: 100000
[   0.724][d][ao/alsa] BUFFER_SIZE: 4800
[   0.724][d][ao/alsa] BUFFER_BYTES: 38400
[   0.724][d][ao/alsa] TICK_TIME: ALL
[   0.724][d][ao/alsa] ---
[   0.732][d][ao/alsa] Final HW params:
[   0.732][d][ao/alsa] ---
[   0.732][d][ao/alsa] ACCESS:  RW_INTERLEAVED
[   0.732][d][ao/alsa] FORMAT:  FLOAT_LE
[   0.732][d][ao/alsa] SUBFORMAT:  STD
[   0.732][d][ao/alsa] SAMPLE_BITS: 32
[   0.732][d][ao/alsa] FRAME_BITS: 64
[   0.732][d][ao/alsa] CHANNELS: 2
[   0.732][d][ao/alsa] RATE: 48000
[   0.732][d][ao/alsa] PERIOD_TIME: 25000
[   0.732][d][ao/alsa] PERIOD_SIZE: 1200
[   0.732][d][ao/alsa] PERIOD_BYTES: 9600
[   0.732][d][ao/alsa] PERIODS: 4
[   0.732][d][ao/alsa] BUFFER_TIME: 100000
[   0.732][d][ao/alsa] BUFFER_SIZE: 4800
[   0.732][d][ao/alsa] BUFFER_BYTES: 38400
[   0.732][d][ao/alsa] TICK_TIME: [0 0]
[   0.732][d][ao/alsa] ---
[   0.732][v][ao/alsa] channel map reported by ALSA: FL FR
[   0.732][v][ao/alsa] which we understand as: stereo
[   0.732][v][ao/alsa] which is what we requested.
[   0.732][v][ao/alsa] hw pausing supported: yes
[   0.732][v][ao/alsa] buffersize: 4800 samples
[   0.732][v][ao/alsa] period size: 1200 samples
[   0.732][v][ao/alsa] device buffer: 4800 samples.
[   0.732][v][ao/alsa] using soft-buffer of 9600 samples.
[   0.732][i][cplayer] AO: [alsa] 48000Hz stereo 2ch float
[   0.732][v][cplayer] AO: Description: ALSA audio output
[   0.732][v][autoconvert] inserting resampler
[   0.732][v][swresample] format change, reinitializing resampler
[   0.732][v][swresample] 48000Hz stereo floatp -> 48000Hz stereo float
[   0.732][v][af] [out] 48000Hz stereo 2ch float
[   0.732][d][vd] Allocating new (host-cached) DR image...
[   0.732][i][cplayer] VO: [gpu-next] 1280x720 => 1280x720 yuv420p
[   0.732][v][cplayer] VO: Description: Video output based on libplacebo
[   0.732][v][vo/gpu-next] reconfig to 1280x720 [4096:4095] yuv420p bt.709/bt.709/bt.1886/limited/display CL=mpeg2/4/h264 crop=1280x720+0+0
[   0.732][v][vo/gpu-next/wayland] Reconfiguring!
[   0.732][d][vo/gpu-next] max content size: 1920x1080
[   0.732][d][vo/gpu-next] monitor size: 1920x1080
[   0.732][v][vo/gpu-next] Window size: 1280x720 (Borders: l=0 t=0 r=0 b=0)
[   0.732][v][vo/gpu-next] Video source: 1280x720 (4096:4095)
[   0.732][v][vo/gpu-next] Video display: (0, 0) 1280x720 -> (0, 0) 1280x720
[   0.732][v][vo/gpu-next] Video scale: 1.000000/1.000000
[   0.732][v][vo/gpu-next] OSD borders: l=0 t=0 r=0 b=0
[   0.732][v][vo/gpu-next] Video borders: l=0 t=0 r=0 b=0
[   0.732][v][vo/gpu-next/wayland] Handling resize on the vk side
[   0.732][d][vo/gpu-next/libplacebo] Requested alpha compositing mode: VK_COMPOSITE_ALPHA_PRE_MULTIPLIED_BIT_KHR
[   0.732][d][vo/gpu-next/libplacebo] Requested surface transform: VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR
[   0.732][d][vo/gpu-next/libplacebo] Requested image count: 4 (min 2 max 8)
[   0.732][d][vo/gpu-next/libplacebo] Requested image size: 1280x720 (min 1x1 < cur -1x-1 < max 16384x16384)
[   0.732][d][vo/gpu-next/libplacebo] (Re)creating swapchain of size 1280x720
[   0.736][v][vo/gpu-next] Window size: 1280x720 (Borders: l=0 t=0 r=0 b=0)
[   0.736][v][vo/gpu-next] Video source: 1280x720 (4096:4095)
[   0.736][v][vo/gpu-next] Video display: (0, 0) 1280x720 -> (0, 0) 1280x720
[   0.736][v][vo/gpu-next] Video scale: 1.000000/1.000000
[   0.736][v][vo/gpu-next] OSD borders: l=0 t=0 r=0 b=0
[   0.736][v][vo/gpu-next] Video borders: l=0 t=0 r=0 b=0
[   0.736][d][vo/gpu-next/libplacebo] First frame received with non-zero PTS 0.021333
[   0.737][d][vo/gpu-next/libplacebo] (Re)creating 1280x720x0 texture with format r8: ../src/utils/upload.c:245
[   0.737][d][vo/gpu-next/libplacebo] Allocating 3932160 memory of type 0x1 (id 1) in heap 0: ../src/utils/upload.c:245
[   0.737][d][vo/gpu-next/libplacebo] Spent 0.202 ms allocating slab
[   0.738][d][vo/gpu-next/libplacebo] (Re)creating 640x360x0 texture with format r8: ../src/utils/upload.c:245
[   0.738][d][vo/gpu-next/libplacebo] (Re)creating 640x360x0 texture with format r8: ../src/utils/upload.c:245
[   0.738][d][vo/gpu-next/libplacebo] (Re)creating 1280x720x0 texture with format r8: ../src/utils/upload.c:245
[   0.738][d][vo/gpu-next/libplacebo] (Re)creating 640x360x0 texture with format r8: ../src/utils/upload.c:245
[   0.738][d][vo/gpu-next/libplacebo] Allocating 1966080 memory of type 0x1 (id 1) in heap 0: ../src/utils/upload.c:245
[   0.738][d][vo/gpu-next/libplacebo] Spent 0.157 ms allocating slab
[   0.738][d][vo/gpu-next/libplacebo] (Re)creating 640x360x0 texture with format r8: ../src/utils/upload.c:245
[   0.738][d][vo/gpu-next/libplacebo] (Re)creating 1280x720x0 texture with format rgba16hf: src/renderer.c:3491
[   0.738][d][vo/gpu-next/libplacebo] Allocating 7864320 memory of type 0x1 (id 1) in heap 0: src/renderer.c:3491
[   0.738][d][vo/gpu-next/libplacebo] Spent 0.045 ms allocating slab
[   0.738][d][vo/gpu-next/libplacebo] (Re)creating 640x360x0 texture with format rg8: src/renderer.c:1652
[   0.738][d][vo/gpu-next/libplacebo] Allocating 3932160 memory of type 0x1 (id 1) in heap 0: ../src/utils/upload.c:245
[   0.738][d][vo/gpu-next/libplacebo] Spent 0.164 ms allocating slab
[   0.738][d][vo/gpu-next/libplacebo] vertex shader source:
[   0.738][d][vo/gpu-next/libplacebo] [  1] #version 450
[   0.738][d][vo/gpu-next/libplacebo] [  2] #extension GL_KHR_shader_subgroup_basic : enable 
[   0.738][d][vo/gpu-next/libplacebo] [  3] #extension GL_KHR_shader_subgroup_vote : enable 
[   0.738][d][vo/gpu-next/libplacebo] [  4] #extension GL_KHR_shader_subgroup_arithmetic : enable 
[   0.738][d][vo/gpu-next/libplacebo] [  5] #extension GL_KHR_shader_subgroup_ballot : enable 
[   0.738][d][vo/gpu-next/libplacebo] [  6] #extension GL_KHR_shader_subgroup_shuffle : enable 
[   0.738][d][vo/gpu-next/libplacebo] [  7] #extension GL_KHR_shader_subgroup_clustered : enable 
[   0.738][d][vo/gpu-next/libplacebo] [  8] #extension GL_KHR_shader_subgroup_quad : enable 
[   0.738][d][vo/gpu-next/libplacebo] [  9] #extension GL_ARB_texture_gather : enable
[   0.738][d][vo/gpu-next/libplacebo] [ 10] layout(constant_id=0) const float _4 = 1; 
[   0.738][d][vo/gpu-next/libplacebo] [ 11] layout(constant_id=1) const float _8004 = 1; 
[   0.738][d][vo/gpu-next/libplacebo] [ 12] layout(binding=0) uniform  sampler2D _2;
[   0.738][d][vo/gpu-next/libplacebo] [ 13] layout(binding=1) uniform  sampler2D _8002;
[   0.738][d][vo/gpu-next/libplacebo] [ 14] layout(location=0) in vec2 _7;
[   0.738][d][vo/gpu-next/libplacebo] [ 15] layout(location=0) out vec2 _3;
[   0.738][d][vo/gpu-next/libplacebo] [ 16] layout(location=1) in vec2 _8;
[   0.738][d][vo/gpu-next/libplacebo] [ 17] layout(location=1) out vec2 _8003;
[   0.738][d][vo/gpu-next/libplacebo] [ 18] layout(location=2) in vec2 _9;
[   0.738][d][vo/gpu-next/libplacebo] [ 19] void main() {
[   0.738][d][vo/gpu-next/libplacebo] [ 20] _3 = _7;
[   0.738][d][vo/gpu-next/libplacebo] [ 21] _8003 = _8;
[   0.738][d][vo/gpu-next/libplacebo] [ 22] vec2 va_pos = _9; 
[   0.738][d][vo/gpu-next/libplacebo] [ 23] gl_Position = vec4(va_pos, 0.0, 1.0); 
[   0.738][d][vo/gpu-next/libplacebo] [ 24] }
[   0.738][d][vo/gpu-next/libplacebo] fragment shader source:
[   0.738][d][vo/gpu-next/libplacebo] [  1] #version 450
[   0.738][d][vo/gpu-next/libplacebo] [  2] #extension GL_KHR_shader_subgroup_basic : enable 
[   0.738][d][vo/gpu-next/libplacebo] [  3] #extension GL_KHR_shader_subgroup_vote : enable 
[   0.738][d][vo/gpu-next/libplacebo] [  4] #extension GL_KHR_shader_subgroup_arithmetic : enable 
[   0.738][d][vo/gpu-next/libplacebo] [  5] #extension GL_KHR_shader_subgroup_ballot : enable 
[   0.738][d][vo/gpu-next/libplacebo] [  6] #extension GL_KHR_shader_subgroup_shuffle : enable 
[   0.738][d][vo/gpu-next/libplacebo] [  7] #extension GL_KHR_shader_subgroup_clustered : enable 
[   0.738][d][vo/gpu-next/libplacebo] [  8] #extension GL_KHR_shader_subgroup_quad : enable 
[   0.738][d][vo/gpu-next/libplacebo] [  9] #extension GL_ARB_texture_gather : enable
[   0.738][d][vo/gpu-next/libplacebo] [ 10] layout(constant_id=0) const float _4 = 1; 
[   0.738][d][vo/gpu-next/libplacebo] [ 11] layout(constant_id=1) const float _8004 = 1; 
[   0.738][d][vo/gpu-next/libplacebo] [ 12] layout(binding=0) uniform  sampler2D _2;
[   0.738][d][vo/gpu-next/libplacebo] [ 13] layout(binding=1) uniform  sampler2D _8002;
[   0.738][d][vo/gpu-next/libplacebo] [ 14] layout(location=0) in vec2 _3;
[   0.738][d][vo/gpu-next/libplacebo] [ 15] layout(location=1) in vec2 _8003;
[   0.738][d][vo/gpu-next/libplacebo] [ 16] layout(location=0) out vec4 out_color;
[   0.738][d][vo/gpu-next/libplacebo] [ 17] 
[   0.738][d][vo/gpu-next/libplacebo] [ 18] vec4 _8001() {
[   0.738][d][vo/gpu-next/libplacebo] [ 19] // pl_shader_sample_direct                            
[   0.738][d][vo/gpu-next/libplacebo] [ 20] vec4 color = vec4(_8004) * textureLod(_8002, _8003, 0.0);   
[   0.738][d][vo/gpu-next/libplacebo] [ 21] return color;
[   0.738][d][vo/gpu-next/libplacebo] [ 22] }
[   0.738][d][vo/gpu-next/libplacebo] [ 23] 
[   0.738][d][vo/gpu-next/libplacebo] [ 24] vec4 _1() {
[   0.738][d][vo/gpu-next/libplacebo] [ 25] // pl_shader_sample_direct                            
[   0.738][d][vo/gpu-next/libplacebo] [ 26] vec4 color = vec4(_4) * textureLod(_2, _3, 0.0);   
[   0.738][d][vo/gpu-next/libplacebo] [ 27] {                 
[   0.738][d][vo/gpu-next/libplacebo] [ 28] vec4 tmp = _8001(); 
[   0.738][d][vo/gpu-next/libplacebo] [ 29] color[1] = tmp[0]; 
[   0.738][d][vo/gpu-next/libplacebo] [ 30] } 
[   0.738][d][vo/gpu-next/libplacebo] [ 31] return color;
[   0.738][d][vo/gpu-next/libplacebo] [ 32] }
[   0.738][d][vo/gpu-next/libplacebo] [ 33] 
[   0.738][d][vo/gpu-next/libplacebo] [ 34] void main() {
[   0.738][d][vo/gpu-next/libplacebo] [ 35] out_color = _1();
[   0.738][d][vo/gpu-next/libplacebo] [ 36] }
[   0.738][d][vo/gpu-next/libplacebo] Specialization constant values:
[   0.738][d][vo/gpu-next/libplacebo]   constant_id=0: 1.000000
[   0.738][d][vo/gpu-next/libplacebo]   constant_id=1: 1.000000
[   0.738][d][vo/gpu-next] cache_load_obj: key(9915afd1b4be85d2), size(848), load time(0.021 ms)
[   0.738][d][vo/gpu-next/libplacebo] Re-using cached SPIR-V object 0x9915afd1b4be85d2
[   0.738][d][vo/gpu-next] cache_load_obj: key(c2c9cfdd40a306e3), size(856), load time(0.008 ms)
[   0.738][d][vo/gpu-next/libplacebo] Re-using cached SPIR-V object 0xc2c9cfdd40a306e3
[   0.738][d][vo/gpu-next] cache_load_obj: key(342f4c302b3c973f), size(13485), load time(0.013 ms)
[   0.738][d][vo/gpu-next/libplacebo] Spent 0.003 ms compiling shader
[   0.738][d][vo/gpu-next] cache_save_obj: key(9915afd1b4be85d2), size(848)
[   0.738][d][vo/gpu-next] cache_save_obj: key(c2c9cfdd40a306e3), size(856)
[   0.739][d][vo/gpu-next/libplacebo] Spent 0.104 ms creating pipeline
[   0.739][d][vo/gpu-next] cache_save_obj: key(342f4c302b3c973f), size(13485)
[   0.739][d][vo/gpu-next/libplacebo] Pass statistics: size 0, SPIR-V: vert 0 frag 0 comp 0
[   0.739][d][vo/gpu-next/libplacebo] Allocating 258048 memory of type 0x7 (id 5) in heap 2: ../src/gpu/utils.c:1173
[   0.739][d][vo/gpu-next/libplacebo] Spent 0.113 ms allocating slab
[   0.739][d][vo/gpu-next/libplacebo] (Re)creating 1280x360x0 texture with format rgba16hf: src/renderer.c:1011
[   0.739][d][vo/gpu-next/libplacebo] Allocating 3932160 memory of type 0x1 (id 1) in heap 0: src/renderer.c:1011
[   0.739][d][vo/gpu-next/libplacebo] Spent 0.050 ms allocating slab
[   0.739][d][vo/gpu-next/libplacebo] vertex shader source:
[   0.739][d][vo/gpu-next/libplacebo] [  1] #version 450
[   0.739][d][vo/gpu-next/libplacebo] [  2] #extension GL_KHR_shader_subgroup_basic : enable 
[   0.739][d][vo/gpu-next/libplacebo] [  3] #extension GL_KHR_shader_subgroup_vote : enable 
[   0.739][d][vo/gpu-next/libplacebo] [  4] #extension GL_KHR_shader_subgroup_arithmetic : enable 
[   0.739][d][vo/gpu-next/libplacebo] [  5] #extension GL_KHR_shader_subgroup_ballot : enable 
[   0.739][d][vo/gpu-next/libplacebo] [  6] #extension GL_KHR_shader_subgroup_shuffle : enable 
[   0.739][d][vo/gpu-next/libplacebo] [  7] #extension GL_KHR_shader_subgroup_clustered : enable 
[   0.739][d][vo/gpu-next/libplacebo] [  8] #extension GL_KHR_shader_subgroup_quad : enable 
[   0.739][d][vo/gpu-next/libplacebo] [  9] #extension GL_ARB_texture_gather : enable
[   0.739][d][vo/gpu-next/libplacebo] [ 10] layout(std430, push_constant) uniform PushC {
[   0.739][d][vo/gpu-next/libplacebo] [ 11]     layout(offset=0) vec2 _4;
[   0.739][d][vo/gpu-next/libplacebo] [ 12]     layout(offset=8) vec2 _5;
[   0.739][d][vo/gpu-next/libplacebo] [ 13]     layout(offset=16) vec2 _9;
[   0.739][d][vo/gpu-next/libplacebo] [ 14]     layout(offset=24) vec2 _a;
[   0.739][d][vo/gpu-next/libplacebo] [ 15]     layout(offset=32) int _c;
[   0.739][d][vo/gpu-next/libplacebo] [ 16]     layout(offset=36) float _d;
[   0.739][d][vo/gpu-next/libplacebo] [ 17]     layout(offset=40) vec2 _e;
[   0.739][d][vo/gpu-next/libplacebo] [ 18]     layout(offset=48) vec2 _f;
[   0.739][d][vo/gpu-next/libplacebo] [ 19]     layout(offset=56) vec2 _10;
[   0.739][d][vo/gpu-next/libplacebo] [ 20] };
[   0.739][d][vo/gpu-next/libplacebo] [ 21] layout(constant_id=0) const float _6 = 1; 
[   0.739][d][vo/gpu-next/libplacebo] [ 22] layout(constant_id=1) const float _b = 1; 
[   0.739][d][vo/gpu-next/libplacebo] [ 23] layout(constant_id=2) const float _8002 = 1; 
[   0.739][d][vo/gpu-next/libplacebo] [ 24] layout(constant_id=3) const float _8003 = 1; 
[   0.739][d][vo/gpu-next/libplacebo] [ 25] layout(constant_id=4) const float _4002 = 1; 
[   0.739][d][vo/gpu-next/libplacebo] [ 26] layout(constant_id=5) const float _4003 = 1; 
[   0.739][d][vo/gpu-next/libplacebo] [ 27] layout(binding=0) uniform  sampler2D _2;
[   0.739][d][vo/gpu-next/libplacebo] [ 28] layout(binding=1) uniform  sampler2D _7;
[   0.739][d][vo/gpu-next/libplacebo] [ 29] layout(location=0) in vec2 _13;
[   0.739][d][vo/gpu-next/libplacebo] [ 30] layout(location=0) out vec2 _3;
[   0.739][d][vo/gpu-next/libplacebo] [ 31] layout(location=1) in vec2 _14;
[   0.739][d][vo/gpu-next/libplacebo] [ 32] layout(location=1) out vec2 _8;
[   0.739][d][vo/gpu-next/libplacebo] [ 33] layout(location=2) in vec2 _15;
[   0.739][d][vo/gpu-next/libplacebo] [ 34] void main() {
[   0.739][d][vo/gpu-next/libplacebo] [ 35] _3 = _13;
[   0.739][d][vo/gpu-next/libplacebo] [ 36] _8 = _14;
[   0.739][d][vo/gpu-next/libplacebo] [ 37] vec2 va_pos = _15; 
[   0.739][d][vo/gpu-next/libplacebo] [ 38] gl_Position = vec4(va_pos, 0.0, 1.0); 
[   0.739][d][vo/gpu-next/libplacebo] [ 39] }
[   0.739][d][vo/gpu-next/libplacebo] fragment shader source:
[   0.739][d][vo/gpu-next/libplacebo] [  1] #version 450
[   0.739][d][vo/gpu-next/libplacebo] [  2] #extension GL_KHR_shader_subgroup_basic : enable 
[   0.739][d][vo/gpu-next/libplacebo] [  3] #extension GL_KHR_shader_subgroup_vote : enable 
[   0.739][d][vo/gpu-next/libplacebo] [  4] #extension GL_KHR_shader_subgroup_arithmetic : enable 
[   0.739][d][vo/gpu-next/libplacebo] [  5] #extension GL_KHR_shader_subgroup_ballot : enable 
[   0.739][d][vo/gpu-next/libplacebo] [  6] #extension GL_KHR_shader_subgroup_shuffle : enable 
[   0.739][d][vo/gpu-next/libplacebo] [  7] #extension GL_KHR_shader_subgroup_clustered : enable 
[   0.739][d][vo/gpu-next/libplacebo] [  8] #extension GL_KHR_shader_subgroup_quad : enable 
[   0.739][d][vo/gpu-next/libplacebo] [  9] #extension GL_ARB_texture_gather : enable
[   0.739][d][vo/gpu-next/libplacebo] [ 10] layout(std430, push_constant) uniform PushC {
[   0.739][d][vo/gpu-next/libplacebo] [ 11]     layout(offset=0) vec2 _4;
[   0.739][d][vo/gpu-next/libplacebo] [ 12]     layout(offset=8) vec2 _5;
[   0.739][d][vo/gpu-next/libplacebo] [ 13]     layout(offset=16) vec2 _9;
[   0.739][d][vo/gpu-next/libplacebo] [ 14]     layout(offset=24) vec2 _a;
[   0.739][d][vo/gpu-next/libplacebo] [ 15]     layout(offset=32) int _c;
[   0.739][d][vo/gpu-next/libplacebo] [ 16]     layout(offset=36) float _d;
[   0.739][d][vo/gpu-next/libplacebo] [ 17]     layout(offset=40) vec2 _e;
[   0.739][d][vo/gpu-next/libplacebo] [ 18]     layout(offset=48) vec2 _f;
[   0.739][d][vo/gpu-next/libplacebo] [ 19]     layout(offset=56) vec2 _10;
[   0.739][d][vo/gpu-next/libplacebo] [ 20] };
[   0.739][d][vo/gpu-next/libplacebo] [ 21] layout(constant_id=0) const float _6 = 1; 
[   0.739][d][vo/gpu-next/libplacebo] [ 22] layout(constant_id=1) const float _b = 1; 
[   0.739][d][vo/gpu-next/libplacebo] [ 23] layout(constant_id=2) const float _8002 = 1; 
[   0.739][d][vo/gpu-next/libplacebo] [ 24] layout(constant_id=3) const float _8003 = 1; 
[   0.739][d][vo/gpu-next/libplacebo] [ 25] layout(constant_id=4) const float _4002 = 1; 
[   0.739][d][vo/gpu-next/libplacebo] [ 26] layout(constant_id=5) const float _4003 = 1; 
[   0.739][d][vo/gpu-next/libplacebo] [ 27] layout(binding=0) uniform  sampler2D _2;
[   0.739][d][vo/gpu-next/libplacebo] [ 28] layout(binding=1) uniform  sampler2D _7;
[   0.739][d][vo/gpu-next/libplacebo] [ 29] layout(location=0) in vec2 _3;
[   0.739][d][vo/gpu-next/libplacebo] [ 30] layout(location=1) in vec2 _8;
[   0.739][d][vo/gpu-next/libplacebo] [ 31] layout(location=0) out vec4 out_color;
[   0.739][d][vo/gpu-next/libplacebo] [ 32] 
[   0.739][d][vo/gpu-next/libplacebo] [ 33] #define LUMA_raw _2 
[   0.739][d][vo/gpu-next/libplacebo] [ 34] #define LUMA_pos _3 
[   0.739][d][vo/gpu-next/libplacebo] [ 35] #define LUMA_map _3_map 
[   0.739][d][vo/gpu-next/libplacebo] [ 36] #define LUMA_size vec2(textureSize(_2, 0)) 
[   0.739][d][vo/gpu-next/libplacebo] [ 37] #define LUMA_pt _4 
[   0.739][d][vo/gpu-next/libplacebo] [ 38] #define LUMA_off _5 
[   0.739][d][vo/gpu-next/libplacebo] [ 39] #define LUMA_mul _6 
[   0.739][d][vo/gpu-next/libplacebo] [ 40] #define LUMA_rot mat2(1.0, 0.0, 0.0, 1.0) 
[   0.739][d][vo/gpu-next/libplacebo] [ 41] #define LUMA_tex(pos) (_6 * vec4(textureLod(_2, pos, 0.0))) 
[   0.739][d][vo/gpu-next/libplacebo] [ 42] #define LUMA_texOff(off) (LUMA_tex(_3 + _4 * vec2(off))) 
[   0.739][d][vo/gpu-next/libplacebo] [ 43] #define LUMA_gather(pos, c) (_6 * vec4(textureGather(_2, pos, c))) 
[   0.739][d][vo/gpu-next/libplacebo] [ 44] #define CHROMA_raw _7 
[   0.739][d][vo/gpu-next/libplacebo] [ 45] #define CHROMA_pos _8 
[   0.739][d][vo/gpu-next/libplacebo] [ 46] #define CHROMA_map _8_map 
[   0.739][d][vo/gpu-next/libplacebo] [ 47] #define CHROMA_size vec2(textureSize(_7, 0)) 
[   0.739][d][vo/gpu-next/libplacebo] [ 48] #define CHROMA_pt _9 
[   0.739][d][vo/gpu-next/libplacebo] [ 49] #define CHROMA_off _a 
[   0.739][d][vo/gpu-next/libplacebo] [ 50] #define CHROMA_mul _b 
[   0.739][d][vo/gpu-next/libplacebo] [ 51] #define CHROMA_rot mat2(1.0, 0.0, 0.0, 1.0) 
[   0.739][d][vo/gpu-next/libplacebo] [ 52] #define CHROMA_tex(pos) (_b * vec4(textureLod(_7, pos, 0.0))) 
[   0.739][d][vo/gpu-next/libplacebo] [ 53] #define CHROMA_texOff(off) (CHROMA_tex(_8 + _9 * vec2(off))) 
[   0.739][d][vo/gpu-next/libplacebo] [ 54] #define CHROMA_gather(pos, c) (_b * vec4(textureGather(_7, pos, c))) 
[   0.739][d][vo/gpu-next/libplacebo] [ 55] #define HOOKED_raw CHROMA_raw 
[   0.739][d][vo/gpu-next/libplacebo] [ 56] #define HOOKED_pos CHROMA_pos 
[   0.739][d][vo/gpu-next/libplacebo] [ 57] #define HOOKED_size CHROMA_size 
[   0.739][d][vo/gpu-next/libplacebo] [ 58] #define HOOKED_rot CHROMA_rot 
[   0.739][d][vo/gpu-next/libplacebo] [ 59] #define HOOKED_off CHROMA_off 
[   0.740][d][vo/gpu-next/libplacebo] [ 60] #define HOOKED_pt CHROMA_pt 
[   0.740][d][vo/gpu-next/libplacebo] [ 61] #define HOOKED_map CHROMA_map 
[   0.740][d][vo/gpu-next/libplacebo] [ 62] #define HOOKED_mul CHROMA_mul 
[   0.740][d][vo/gpu-next/libplacebo] [ 63] #define HOOKED_tex CHROMA_tex 
[   0.740][d][vo/gpu-next/libplacebo] [ 64] #define HOOKED_texOff CHROMA_texOff 
[   0.740][d][vo/gpu-next/libplacebo] [ 65] #define HOOKED_gather CHROMA_gather 
[   0.740][d][vo/gpu-next/libplacebo] [ 66] #define frame _c 
[   0.740][d][vo/gpu-next/libplacebo] [ 67] #define random _d 
[   0.740][d][vo/gpu-next/libplacebo] [ 68] #define input_size _e 
[   0.740][d][vo/gpu-next/libplacebo] [ 69] #define target_size _f 
[   0.740][d][vo/gpu-next/libplacebo] [ 70] #define tex_offset _10 
[   0.740][d][vo/gpu-next/libplacebo] [ 71] vec4 _8001(vec4 color) {
[   0.740][d][vo/gpu-next/libplacebo] [ 72] // pl_shader_linearize           
[   0.740][d][vo/gpu-next/libplacebo] [ 73] color.rgb = max(color.rgb, 0.0); 
[   0.740][d][vo/gpu-next/libplacebo] [ 74] color.rgb = _8003 * pow(color.rgb + vec3(_8002), vec3(2.4)); 
[   0.740][d][vo/gpu-next/libplacebo] [ 75] return color;
[   0.740][d][vo/gpu-next/libplacebo] [ 76] }
[   0.740][d][vo/gpu-next/libplacebo] [ 77] 
[   0.740][d][vo/gpu-next/libplacebo] [ 78] #define linearize _8001 
[   0.740][d][vo/gpu-next/libplacebo] [ 79] vec4 _4001(vec4 color) {
[   0.740][d][vo/gpu-next/libplacebo] [ 80] // pl_shader_delinearize 
[   0.740][d][vo/gpu-next/libplacebo] [ 81] color.rgb = max(color.rgb, 0.0); 
[   0.740][d][vo/gpu-next/libplacebo] [ 82] color.rgb = pow(_4003 * color.rgb, vec3(1.0/2.4)) - vec3(_4002); 
[   0.740][d][vo/gpu-next/libplacebo] [ 83] return color;
[   0.740][d][vo/gpu-next/libplacebo] [ 84] }
[   0.740][d][vo/gpu-next/libplacebo] [ 85] 
[   0.740][d][vo/gpu-next/libplacebo] [ 86] #define delinearize _4001 
[   0.740][d][vo/gpu-next/libplacebo] [ 87] 
[   0.740][d][vo/gpu-next/libplacebo] [ 88] #define offset      vec2(0)
[   0.740][d][vo/gpu-next/libplacebo] [ 89] 
[   0.740][d][vo/gpu-next/libplacebo] [ 90] #define axis        1
[   0.740][d][vo/gpu-next/libplacebo] [ 91] 
[   0.740][d][vo/gpu-next/libplacebo] [ 92] #define Kernel(x)   dot(vec3(0.42659, -0.49656, 0.076849), cos(vec3(0, 1, 2) * acos(-1.) * (x + 1.)))
[   0.740][d][vo/gpu-next/libplacebo] [ 93] 
[   0.740][d][vo/gpu-next/libplacebo] [ 94] vec4 hook() {
[   0.740][d][vo/gpu-next/libplacebo] [ 95]     // Calculate bounds
[   0.740][d][vo/gpu-next/libplacebo] [ 96]     float low  = ceil((LUMA_pos - CHROMA_pt) * LUMA_size - offset - 0.5)[axis];
[   0.740][d][vo/gpu-next/libplacebo] [ 97]     float high = floor((LUMA_pos + CHROMA_pt) * LUMA_size - offset - 0.5)[axis];
[   0.740][d][vo/gpu-next/libplacebo] [ 98] 
[   0.740][d][vo/gpu-next/libplacebo] [ 99]     float W = 0.0;
[   0.740][d][vo/gpu-next/libplacebo] [100]     vec4 avg = vec4(0);
[   0.740][d][vo/gpu-next/libplacebo] [101]     vec2 pos = LUMA_pos;
[   0.740][d][vo/gpu-next/libplacebo] [102] 
[   0.740][d][vo/gpu-next/libplacebo] [103]     for (float k = low; k <= high; k++) {
[   0.740][d][vo/gpu-next/libplacebo] [104]         pos[axis] = LUMA_pt[axis] * (k - offset[axis] + 0.5);
[   0.740][d][vo/gpu-next/libplacebo] [105]         float rel = (pos[axis] - LUMA_pos[axis])*CHROMA_size[axis];
[   0.740][d][vo/gpu-next/libplacebo] [106]         float w = Kernel(rel);
[   0.740][d][vo/gpu-next/libplacebo] [107] 
[   0.740][d][vo/gpu-next/libplacebo] [108]         vec4 y = textureGrad(LUMA_raw, pos, vec2(0.0), vec2(0.0)).xxxx * LUMA_mul;
[   0.740][d][vo/gpu-next/libplacebo] [109]         y.y *= y.y;
[   0.740][d][vo/gpu-next/libplacebo] [110]         avg += w * y;
[   0.740][d][vo/gpu-next/libplacebo] [111]         W += w;
[   0.740][d][vo/gpu-next/libplacebo] [112]     }
[   0.740][d][vo/gpu-next/libplacebo] [113]     avg /= W;
[   0.740][d][vo/gpu-next/libplacebo] [114]     avg.y = abs(avg.y - avg.x * avg.x);
[   0.740][d][vo/gpu-next/libplacebo] [115]     return avg;
[   0.740][d][vo/gpu-next/libplacebo] [116] }
[   0.740][d][vo/gpu-next/libplacebo] [117] 
[   0.740][d][vo/gpu-next/libplacebo] [118] vec4 _1() {
[   0.740][d][vo/gpu-next/libplacebo] [119] vec4 color = hook(); 
[   0.740][d][vo/gpu-next/libplacebo] [120] return color;
[   0.740][d][vo/gpu-next/libplacebo] [121] }
[   0.740][d][vo/gpu-next/libplacebo] [122] 
[   0.740][d][vo/gpu-next/libplacebo] [123] void main() {
[   0.740][d][vo/gpu-next/libplacebo] [124] out_color = _1();
[   0.740][d][vo/gpu-next/libplacebo] [125] }
[   0.740][d][vo/gpu-next/libplacebo] Specialization constant values:
[   0.740][d][vo/gpu-next/libplacebo]   constant_id=0: 1.000000
[   0.740][d][vo/gpu-next/libplacebo]   constant_id=1: 1.000000
[   0.740][d][vo/gpu-next/libplacebo]   constant_id=2: 0.059585
[   0.740][d][vo/gpu-next/libplacebo]   constant_id=3: 0.870311
[   0.740][d][vo/gpu-next/libplacebo]   constant_id=4: 0.059585
[   0.740][d][vo/gpu-next/libplacebo]   constant_id=5: 1.149015
[   0.740][d][vo/gpu-next] cache_load_obj: key(84ffee52f8902a4e), size(848), load time(0.016 ms)
[   0.740][d][vo/gpu-next/libplacebo] Re-using cached SPIR-V object 0x84ffee52f8902a4e
[   0.740][d][vo/gpu-next] cache_load_obj: key(a2c3c5c3a57f9e1b), size(2548), load time(0.008 ms)
[   0.740][d][vo/gpu-next/libplacebo] Re-using cached SPIR-V object 0xa2c3c5c3a57f9e1b
[   0.740][d][vo/gpu-next] cache_load_obj: key(5071c7eea32cf5c0), size(25844), load time(0.023 ms)
[   0.740][d][vo/gpu-next/libplacebo] Spent 0.007 ms compiling shader
[   0.740][d][vo/gpu-next] cache_save_obj: key(84ffee52f8902a4e), size(848)
[   0.740][d][vo/gpu-next] cache_save_obj: key(a2c3c5c3a57f9e1b), size(2548)
[   0.740][d][vo/gpu-next/libplacebo] Spent 0.102 ms creating pipeline
[   0.740][d][vo/gpu-next] cache_save_obj: key(5071c7eea32cf5c0), size(25844)
[   0.740][d][vo/gpu-next/libplacebo] Pass statistics: size 0, SPIR-V: vert 0 frag 0 comp 0
[   0.740][d][vo/gpu-next/libplacebo] (Re)creating 640x360x0 texture with format rgba16hf: src/renderer.c:1011
[   0.740][d][vo/gpu-next/libplacebo] Allocating 7864320 memory of type 0x1 (id 1) in heap 0: ../src/utils/upload.c:245
[   0.740][d][vo/gpu-next/libplacebo] Spent 0.216 ms allocating slab
[   0.740][d][vo/gpu-next/libplacebo] vertex shader source:
[   0.740][d][vo/gpu-next/libplacebo] [  1] #version 450
[   0.740][d][vo/gpu-next/libplacebo] [  2] #extension GL_KHR_shader_subgroup_basic : enable 
[   0.740][d][vo/gpu-next/libplacebo] [  3] #extension GL_KHR_shader_subgroup_vote : enable 
[   0.740][d][vo/gpu-next/libplacebo] [  4] #extension GL_KHR_shader_subgroup_arithmetic : enable 
[   0.740][d][vo/gpu-next/libplacebo] [  5] #extension GL_KHR_shader_subgroup_ballot : enable 
[   0.740][d][vo/gpu-next/libplacebo] [  6] #extension GL_KHR_shader_subgroup_shuffle : enable 
[   0.740][d][vo/gpu-next/libplacebo] [  7] #extension GL_KHR_shader_subgroup_clustered : enable 
[   0.740][d][vo/gpu-next/libplacebo] [  8] #extension GL_KHR_shader_subgroup_quad : enable 
[   0.740][d][vo/gpu-next/libplacebo] [  9] #extension GL_ARB_texture_gather : enable
[   0.740][d][vo/gpu-next/libplacebo] [ 10] layout(std430, push_constant) uniform PushC {
[   0.740][d][vo/gpu-next/libplacebo] [ 11]     layout(offset=0) vec2 _4;
[   0.740][d][vo/gpu-next/libplacebo] [ 12]     layout(offset=8) vec2 _5;
[   0.740][d][vo/gpu-next/libplacebo] [ 13]     layout(offset=16) vec2 _9;
[   0.740][d][vo/gpu-next/libplacebo] [ 14]     layout(offset=24) vec2 _a;
[   0.740][d][vo/gpu-next/libplacebo] [ 15]     layout(offset=32) int _c;
[   0.740][d][vo/gpu-next/libplacebo] [ 16]     layout(offset=36) float _d;
[   0.740][d][vo/gpu-next/libplacebo] [ 17]     layout(offset=40) vec2 _e;
[   0.740][d][vo/gpu-next/libplacebo] [ 18]     layout(offset=48) vec2 _f;
[   0.740][d][vo/gpu-next/libplacebo] [ 19]     layout(offset=56) vec2 _10;
[   0.740][d][vo/gpu-next/libplacebo] [ 20] };
[   0.740][d][vo/gpu-next/libplacebo] [ 21] layout(constant_id=0) const float _6 = 1; 
[   0.740][d][vo/gpu-next/libplacebo] [ 22] layout(constant_id=1) const float _b = 1; 
[   0.740][d][vo/gpu-next/libplacebo] [ 23] layout(constant_id=2) const float _8002 = 1; 
[   0.740][d][vo/gpu-next/libplacebo] [ 24] layout(constant_id=3) const float _8003 = 1; 
[   0.740][d][vo/gpu-next/libplacebo] [ 25] layout(constant_id=4) const float _4002 = 1; 
[   0.740][d][vo/gpu-next/libplacebo] [ 26] layout(constant_id=5) const float _4003 = 1; 
[   0.740][d][vo/gpu-next/libplacebo] [ 27] layout(binding=0) uniform  sampler2D _2;
[   0.740][d][vo/gpu-next/libplacebo] [ 28] layout(binding=1) uniform  sampler2D _7;
[   0.740][d][vo/gpu-next/libplacebo] [ 29] layout(location=0) in vec2 _13;
[   0.740][d][vo/gpu-next/libplacebo] [ 30] layout(location=0) out vec2 _3;
[   0.740][d][vo/gpu-next/libplacebo] [ 31] layout(location=1) in vec2 _14;
[   0.740][d][vo/gpu-next/libplacebo] [ 32] layout(location=1) out vec2 _8;
[   0.740][d][vo/gpu-next/libplacebo] [ 33] layout(location=2) in vec2 _15;
[   0.740][d][vo/gpu-next/libplacebo] [ 34] void main() {
[   0.740][d][vo/gpu-next/libplacebo] [ 35] _3 = _13;
[   0.740][d][vo/gpu-next/libplacebo] [ 36] _8 = _14;
[   0.740][d][vo/gpu-next/libplacebo] [ 37] vec2 va_pos = _15; 
[   0.740][d][vo/gpu-next/libplacebo] [ 38] gl_Position = vec4(va_pos, 0.0, 1.0); 
[   0.740][d][vo/gpu-next/libplacebo] [ 39] }
[   0.740][d][vo/gpu-next/libplacebo] fragment shader source:
[   0.740][d][vo/gpu-next/libplacebo] [  1] #version 450
[   0.740][d][vo/gpu-next/libplacebo] [  2] #extension GL_KHR_shader_subgroup_basic : enable 
[   0.740][d][vo/gpu-next/libplacebo] [  3] #extension GL_KHR_shader_subgroup_vote : enable 
[   0.740][d][vo/gpu-next/libplacebo] [  4] #extension GL_KHR_shader_subgroup_arithmetic : enable 
[   0.740][d][vo/gpu-next/libplacebo] [  5] #extension GL_KHR_shader_subgroup_ballot : enable 
[   0.740][d][vo/gpu-next/libplacebo] [  6] #extension GL_KHR_shader_subgroup_shuffle : enable 
[   0.740][d][vo/gpu-next/libplacebo] [  7] #extension GL_KHR_shader_subgroup_clustered : enable 
[   0.740][d][vo/gpu-next/libplacebo] [  8] #extension GL_KHR_shader_subgroup_quad : enable 
[   0.740][d][vo/gpu-next/libplacebo] [  9] #extension GL_ARB_texture_gather : enable
[   0.740][d][vo/gpu-next/libplacebo] [ 10] layout(std430, push_constant) uniform PushC {
[   0.740][d][vo/gpu-next/libplacebo] [ 11]     layout(offset=0) vec2 _4;
[   0.740][d][vo/gpu-next/libplacebo] [ 12]     layout(offset=8) vec2 _5;
[   0.740][d][vo/gpu-next/libplacebo] [ 13]     layout(offset=16) vec2 _9;
[   0.740][d][vo/gpu-next/libplacebo] [ 14]     layout(offset=24) vec2 _a;
[   0.740][d][vo/gpu-next/libplacebo] [ 15]     layout(offset=32) int _c;
[   0.740][d][vo/gpu-next/libplacebo] [ 16]     layout(offset=36) float _d;
[   0.740][d][vo/gpu-next/libplacebo] [ 17]     layout(offset=40) vec2 _e;
[   0.740][d][vo/gpu-next/libplacebo] [ 18]     layout(offset=48) vec2 _f;
[   0.740][d][vo/gpu-next/libplacebo] [ 19]     layout(offset=56) vec2 _10;
[   0.740][d][vo/gpu-next/libplacebo] [ 20] };
[   0.740][d][vo/gpu-next/libplacebo] [ 21] layout(constant_id=0) const float _6 = 1; 
[   0.740][d][vo/gpu-next/libplacebo] [ 22] layout(constant_id=1) const float _b = 1; 
[   0.740][d][vo/gpu-next/libplacebo] [ 23] layout(constant_id=2) const float _8002 = 1; 
[   0.740][d][vo/gpu-next/libplacebo] [ 24] layout(constant_id=3) const float _8003 = 1; 
[   0.740][d][vo/gpu-next/libplacebo] [ 25] layout(constant_id=4) const float _4002 = 1; 
[   0.740][d][vo/gpu-next/libplacebo] [ 26] layout(constant_id=5) const float _4003 = 1; 
[   0.740][d][vo/gpu-next/libplacebo] [ 27] layout(binding=0) uniform  sampler2D _2;
[   0.740][d][vo/gpu-next/libplacebo] [ 28] layout(binding=1) uniform  sampler2D _7;
[   0.740][d][vo/gpu-next/libplacebo] [ 29] layout(location=0) in vec2 _3;
[   0.740][d][vo/gpu-next/libplacebo] [ 30] layout(location=1) in vec2 _8;
[   0.740][d][vo/gpu-next/libplacebo] [ 31] layout(location=0) out vec4 out_color;
[   0.740][d][vo/gpu-next/libplacebo] [ 32] 
[   0.740][d][vo/gpu-next/libplacebo] [ 33] #define LOWRES_Y_raw _2 
[   0.740][d][vo/gpu-next/libplacebo] [ 34] #define LOWRES_Y_pos _3 
[   0.740][d][vo/gpu-next/libplacebo] [ 35] #define LOWRES_Y_map _3_map 
[   0.740][d][vo/gpu-next/libplacebo] [ 36] #define LOWRES_Y_size vec2(textureSize(_2, 0)) 
[   0.740][d][vo/gpu-next/libplacebo] [ 37] #define LOWRES_Y_pt _4 
[   0.740][d][vo/gpu-next/libplacebo] [ 38] #define LOWRES_Y_off _5 
[   0.740][d][vo/gpu-next/libplacebo] [ 39] #define LOWRES_Y_mul _6 
[   0.740][d][vo/gpu-next/libplacebo] [ 40] #define LOWRES_Y_rot mat2(1.0, 0.0, 0.0, 1.0) 
[   0.740][d][vo/gpu-next/libplacebo] [ 41] #define LOWRES_Y_tex(pos) (_6 * vec4(textureLod(_2, pos, 0.0))) 
[   0.740][d][vo/gpu-next/libplacebo] [ 42] #define LOWRES_Y_texOff(off) (LOWRES_Y_tex(_3 + _4 * vec2(off))) 
[   0.740][d][vo/gpu-next/libplacebo] [ 43] #define LOWRES_Y_gather(pos, c) (_6 * vec4(textureGather(_2, pos, c))) 
[   0.740][d][vo/gpu-next/libplacebo] [ 44] #define CHROMA_raw _7 
[   0.740][d][vo/gpu-next/libplacebo] [ 45] #define CHROMA_pos _8 
[   0.740][d][vo/gpu-next/libplacebo] [ 46] #define CHROMA_map _8_map 
[   0.740][d][vo/gpu-next/libplacebo] [ 47] #define CHROMA_size vec2(textureSize(_7, 0)) 
[   0.740][d][vo/gpu-next/libplacebo] [ 48] #define CHROMA_pt _9 
[   0.740][d][vo/gpu-next/libplacebo] [ 49] #define CHROMA_off _a 
[   0.740][d][vo/gpu-next/libplacebo] [ 50] #define CHROMA_mul _b 
[   0.740][d][vo/gpu-next/libplacebo] [ 51] #define CHROMA_rot mat2(1.0, 0.0, 0.0, 1.0) 
[   0.740][d][vo/gpu-next/libplacebo] [ 52] #define CHROMA_tex(pos) (_b * vec4(textureLod(_7, pos, 0.0))) 
[   0.740][d][vo/gpu-next/libplacebo] [ 53] #define CHROMA_texOff(off) (CHROMA_tex(_8 + _9 * vec2(off))) 
[   0.740][d][vo/gpu-next/libplacebo] [ 54] #define CHROMA_gather(pos, c) (_b * vec4(textureGather(_7, pos, c))) 
[   0.740][d][vo/gpu-next/libplacebo] [ 55] #define HOOKED_raw CHROMA_raw 
[   0.740][d][vo/gpu-next/libplacebo] [ 56] #define HOOKED_pos CHROMA_pos 
[   0.740][d][vo/gpu-next/libplacebo] [ 57] #define HOOKED_size CHROMA_size 
[   0.740][d][vo/gpu-next/libplacebo] [ 58] #define HOOKED_rot CHROMA_rot 
[   0.740][d][vo/gpu-next/libplacebo] [ 59] #define HOOKED_off CHROMA_off 
[   0.740][d][vo/gpu-next/libplacebo] [ 60] #define HOOKED_pt CHROMA_pt 
[   0.740][d][vo/gpu-next/libplacebo] [ 61] #define HOOKED_map CHROMA_map 
[   0.740][d][vo/gpu-next/libplacebo] [ 62] #define HOOKED_mul CHROMA_mul 
[   0.740][d][vo/gpu-next/libplacebo] [ 63] #define HOOKED_tex CHROMA_tex 
[   0.740][d][vo/gpu-next/libplacebo] [ 64] #define HOOKED_texOff CHROMA_texOff 
[   0.740][d][vo/gpu-next/libplacebo] [ 65] #define HOOKED_gather CHROMA_gather 
[   0.740][d][vo/gpu-next/libplacebo] [ 66] #define frame _c 
[   0.740][d][vo/gpu-next/libplacebo] [ 67] #define random _d 
[   0.740][d][vo/gpu-next/libplacebo] [ 68] #define input_size _e 
[   0.740][d][vo/gpu-next/libplacebo] [ 69] #define target_size _f 
[   0.740][d][vo/gpu-next/libplacebo] [ 70] #define tex_offset _10 
[   0.740][d][vo/gpu-next/libplacebo] [ 71] vec4 _8001(vec4 color) {
[   0.740][d][vo/gpu-next/libplacebo] [ 72] // pl_shader_linearize           
[   0.740][d][vo/gpu-next/libplacebo] [ 73] color.rgb = max(color.rgb, 0.0); 
[   0.740][d][vo/gpu-next/libplacebo] [ 74] color.rgb = _8003 * pow(color.rgb + vec3(_8002), vec3(2.4)); 
[   0.740][d][vo/gpu-next/libplacebo] [ 75] return color;
[   0.740][d][vo/gpu-next/libplacebo] [ 76] }
[   0.740][d][vo/gpu-next/libplacebo] [ 77] 
[   0.740][d][vo/gpu-next/libplacebo] [ 78] #define linearize _8001 
[   0.740][d][vo/gpu-next/libplacebo] [ 79] vec4 _4001(vec4 color) {
[   0.740][d][vo/gpu-next/libplacebo] [ 80] // pl_shader_delinearize 
[   0.740][d][vo/gpu-next/libplacebo] [ 81] color.rgb = max(color.rgb, 0.0); 
[   0.740][d][vo/gpu-next/libplacebo] [ 82] color.rgb = pow(_4003 * color.rgb, vec3(1.0/2.4)) - vec3(_4002); 
[   0.740][d][vo/gpu-next/libplacebo] [ 83] return color;
[   0.740][d][vo/gpu-next/libplacebo] [ 84] }
[   0.740][d][vo/gpu-next/libplacebo] [ 85] 
[   0.740][d][vo/gpu-next/libplacebo] [ 86] #define delinearize _4001 
[   0.740][d][vo/gpu-next/libplacebo] [ 87] 
[   0.740][d][vo/gpu-next/libplacebo] [ 88] #define offset      vec2(0)
[   0.740][d][vo/gpu-next/libplacebo] [ 89] 
[   0.740][d][vo/gpu-next/libplacebo] [ 90] #define axis        0
[   0.740][d][vo/gpu-next/libplacebo] [ 91] 
[   0.740][d][vo/gpu-next/libplacebo] [ 92] #define Kernel(x)   dot(vec3(0.42659, -0.49656, 0.076849), cos(vec3(0, 1, 2) * acos(-1.) * (x + 1.)))
[   0.740][d][vo/gpu-next/libplacebo] [ 93] 
[   0.740][d][vo/gpu-next/libplacebo] [ 94] vec4 hook() {
[   0.740][d][vo/gpu-next/libplacebo] [ 95]     // Calculate bounds
[   0.740][d][vo/gpu-next/libplacebo] [ 96]     float low  = ceil((LOWRES_Y_pos - CHROMA_pt) * LOWRES_Y_size - offset - 0.5)[axis];
[   0.740][d][vo/gpu-next/libplacebo] [ 97]     float high = floor((LOWRES_Y_pos + CHROMA_pt) * LOWRES_Y_size - offset - 0.5)[axis];
[   0.740][d][vo/gpu-next/libplacebo] [ 98] 
[   0.740][d][vo/gpu-next/libplacebo] [ 99]     float W = 0.0;
[   0.740][d][vo/gpu-next/libplacebo] [100]     vec4 avg = vec4(0);
[   0.740][d][vo/gpu-next/libplacebo] [101]     vec2 pos = LOWRES_Y_pos;
[   0.740][d][vo/gpu-next/libplacebo] [102] 
[   0.740][d][vo/gpu-next/libplacebo] [103]     for (float k = low; k <= high; k++) {
[   0.740][d][vo/gpu-next/libplacebo] [104]         pos[axis] = LOWRES_Y_pt[axis] * (k - offset[axis] + 0.5);
[   0.740][d][vo/gpu-next/libplacebo] [105]         float rel = (pos[axis] - LOWRES_Y_pos[axis])*CHROMA_size[axis];
[   0.740][d][vo/gpu-next/libplacebo] [106]         float w = Kernel(rel);
[   0.740][d][vo/gpu-next/libplacebo] [107] 
[   0.740][d][vo/gpu-next/libplacebo] [108]         vec4 y = textureGrad(LOWRES_Y_raw, pos, vec2(0.0), vec2(0.0)).xxxx * LOWRES_Y_mul;
[   0.740][d][vo/gpu-next/libplacebo] [109]         y.y *= y.y;
[   0.740][d][vo/gpu-next/libplacebo] [110]         avg += w * y;
[   0.740][d][vo/gpu-next/libplacebo] [111]         W += w;
[   0.740][d][vo/gpu-next/libplacebo] [112]     }
[   0.740][d][vo/gpu-next/libplacebo] [113]     avg /= W;
[   0.740][d][vo/gpu-next/libplacebo] [114]     avg.y = abs(avg.y - avg.x * avg.x) + LOWRES_Y_texOff(0).y;
[   0.740][d][vo/gpu-next/libplacebo] [115]     return avg;
[   0.740][d][vo/gpu-next/libplacebo] [116] }
[   0.740][d][vo/gpu-next/libplacebo] [117] 
[   0.740][d][vo/gpu-next/libplacebo] [118] vec4 _1() {
[   0.740][d][vo/gpu-next/libplacebo] [119] vec4 color = hook(); 
[   0.740][d][vo/gpu-next/libplacebo] [120] return color;
[   0.740][d][vo/gpu-next/libplacebo] [121] }
[   0.740][d][vo/gpu-next/libplacebo] [122] 
[   0.740][d][vo/gpu-next/libplacebo] [123] void main() {
[   0.740][d][vo/gpu-next/libplacebo] [124] out_color = _1();
[   0.740][d][vo/gpu-next/libplacebo] [125] }
[   0.740][d][vo/gpu-next/libplacebo] Specialization constant values:
[   0.740][d][vo/gpu-next/libplacebo]   constant_id=0: 1.000000
[   0.740][d][vo/gpu-next/libplacebo]   constant_id=1: 1.000000
[   0.740][d][vo/gpu-next/libplacebo]   constant_id=2: 0.059585
[   0.740][d][vo/gpu-next/libplacebo]   constant_id=3: 0.870311
[   0.740][d][vo/gpu-next/libplacebo]   constant_id=4: 0.059585
[   0.740][d][vo/gpu-next/libplacebo]   constant_id=5: 1.149015
[   0.740][d][vo/gpu-next/libplacebo] Re-using cached SPIR-V object 0x84ffee52f8902a4e
[   0.740][d][vo/gpu-next] cache_load_obj: key(cbfc5aa648936066), size(2636), load time(0.020 ms)
[   0.740][d][vo/gpu-next/libplacebo] Re-using cached SPIR-V object 0xcbfc5aa648936066
[   0.740][d][vo/gpu-next] cache_load_obj: key(2e3ea40312a738b1), size(25874), load time(0.021 ms)
[   0.740][d][vo/gpu-next/libplacebo] Spent 0.008 ms compiling shader
[   0.740][d][vo/gpu-next] cache_save_obj: key(84ffee52f8902a4e), size(848)
[   0.740][d][vo/gpu-next] cache_save_obj: key(cbfc5aa648936066), size(2636)
[   0.740][d][vo/gpu-next/libplacebo] Spent 0.073 ms creating pipeline
[   0.740][d][vo/gpu-next] cache_save_obj: key(2e3ea40312a738b1), size(25874)
[   0.740][d][vo/gpu-next/libplacebo] Pass statistics: size 0, SPIR-V: vert 0 frag 0 comp 0
[   0.740][d][vo/gpu-next/libplacebo] (Re)creating 1280x720x0 texture with format rgba16hf: src/renderer.c:1011
[   0.740][d][vo/gpu-next/libplacebo] Allocating 7864320 memory of type 0x1 (id 1) in heap 0: src/renderer.c:1011
[   0.741][d][vo/gpu-next/libplacebo] Spent 0.055 ms allocating slab
[   0.741][d][vo/gpu-next/libplacebo] vertex shader source:
[   0.741][d][vo/gpu-next/libplacebo] [  1] #version 450
[   0.741][d][vo/gpu-next/libplacebo] [  2] #extension GL_KHR_shader_subgroup_basic : enable 
[   0.741][d][vo/gpu-next/libplacebo] [  3] #extension GL_KHR_shader_subgroup_vote : enable 
[   0.741][d][vo/gpu-next/libplacebo] [  4] #extension GL_KHR_shader_subgroup_arithmetic : enable 
[   0.741][d][vo/gpu-next/libplacebo] [  5] #extension GL_KHR_shader_subgroup_ballot : enable 
[   0.741][d][vo/gpu-next/libplacebo] [  6] #extension GL_KHR_shader_subgroup_shuffle : enable 
[   0.741][d][vo/gpu-next/libplacebo] [  7] #extension GL_KHR_shader_subgroup_clustered : enable 
[   0.741][d][vo/gpu-next/libplacebo] [  8] #extension GL_KHR_shader_subgroup_quad : enable 
[   0.741][d][vo/gpu-next/libplacebo] [  9] #extension GL_ARB_texture_gather : enable
[   0.741][d][vo/gpu-next/libplacebo] [ 10] layout(std430, push_constant) uniform PushC {
[   0.741][d][vo/gpu-next/libplacebo] [ 11]     layout(offset=0) vec2 _4;
[   0.741][d][vo/gpu-next/libplacebo] [ 12]     layout(offset=8) vec2 _5;
[   0.741][d][vo/gpu-next/libplacebo] [ 13]     layout(offset=16) vec2 _9;
[   0.741][d][vo/gpu-next/libplacebo] [ 14]     layout(offset=24) vec2 _a;
[   0.741][d][vo/gpu-next/libplacebo] [ 15]     layout(offset=32) vec2 _e;
[   0.741][d][vo/gpu-next/libplacebo] [ 16]     layout(offset=40) vec2 _f;
[   0.741][d][vo/gpu-next/libplacebo] [ 17]     layout(offset=48) int _11;
[   0.741][d][vo/gpu-next/libplacebo] [ 18]     layout(offset=52) float _12;
[   0.741][d][vo/gpu-next/libplacebo] [ 19]     layout(offset=56) vec2 _13;
[   0.741][d][vo/gpu-next/libplacebo] [ 20]     layout(offset=64) vec2 _14;
[   0.741][d][vo/gpu-next/libplacebo] [ 21]     layout(offset=72) vec2 _15;
[   0.741][d][vo/gpu-next/libplacebo] [ 22] };
[   0.741][d][vo/gpu-next/libplacebo] [ 23] layout(constant_id=0) const float _6 = 1; 
[   0.741][d][vo/gpu-next/libplacebo] [ 24] layout(constant_id=1) const float _b = 1; 
[   0.741][d][vo/gpu-next/libplacebo] [ 25] layout(constant_id=2) const float _10 = 1; 
[   0.741][d][vo/gpu-next/libplacebo] [ 26] layout(constant_id=3) const float _8002 = 1; 
[   0.741][d][vo/gpu-next/libplacebo] [ 27] layout(constant_id=4) const float _8003 = 1; 
[   0.741][d][vo/gpu-next/libplacebo] [ 28] layout(constant_id=5) const float _4002 = 1; 
[   0.741][d][vo/gpu-next/libplacebo] [ 29] layout(constant_id=6) const float _4003 = 1; 
[   0.741][d][vo/gpu-next/libplacebo] [ 30] layout(binding=0) uniform  sampler2D _2;
[   0.741][d][vo/gpu-next/libplacebo] [ 31] layout(binding=1) uniform  sampler2D _7;
[   0.741][d][vo/gpu-next/libplacebo] [ 32] layout(binding=2) uniform  sampler2D _c;
[   0.741][d][vo/gpu-next/libplacebo] [ 33] layout(location=0) in vec2 _18;
[   0.741][d][vo/gpu-next/libplacebo] [ 34] layout(location=0) out vec2 _3;
[   0.741][d][vo/gpu-next/libplacebo] [ 35] layout(location=1) in vec2 _19;
[   0.741][d][vo/gpu-next/libplacebo] [ 36] layout(location=1) out vec2 _8;
[   0.741][d][vo/gpu-next/libplacebo] [ 37] layout(location=2) in vec2 _1a;
[   0.741][d][vo/gpu-next/libplacebo] [ 38] layout(location=2) out vec2 _d;
[   0.741][d][vo/gpu-next/libplacebo] [ 39] layout(location=3) in vec2 _1b;
[   0.741][d][vo/gpu-next/libplacebo] [ 40] void main() {
[   0.741][d][vo/gpu-next/libplacebo] [ 41] _3 = _18;
[   0.741][d][vo/gpu-next/libplacebo] [ 42] _8 = _19;
[   0.741][d][vo/gpu-next/libplacebo] [ 43] _d = _1a;
[   0.741][d][vo/gpu-next/libplacebo] [ 44] vec2 va_pos = _1b; 
[   0.741][d][vo/gpu-next/libplacebo] [ 45] gl_Position = vec4(va_pos, 0.0, 1.0); 
[   0.741][d][vo/gpu-next/libplacebo] [ 46] }
[   0.741][d][vo/gpu-next/libplacebo] fragment shader source:
[   0.741][d][vo/gpu-next/libplacebo] [  1] #version 450
[   0.741][d][vo/gpu-next/libplacebo] [  2] #extension GL_KHR_shader_subgroup_basic : enable 
[   0.741][d][vo/gpu-next/libplacebo] [  3] #extension GL_KHR_shader_subgroup_vote : enable 
[   0.741][d][vo/gpu-next/libplacebo] [  4] #extension GL_KHR_shader_subgroup_arithmetic : enable 
[   0.741][d][vo/gpu-next/libplacebo] [  5] #extension GL_KHR_shader_subgroup_ballot : enable 
[   0.741][d][vo/gpu-next/libplacebo] [  6] #extension GL_KHR_shader_subgroup_shuffle : enable 
[   0.741][d][vo/gpu-next/libplacebo] [  7] #extension GL_KHR_shader_subgroup_clustered : enable 
[   0.741][d][vo/gpu-next/libplacebo] [  8] #extension GL_KHR_shader_subgroup_quad : enable 
[   0.741][d][vo/gpu-next/libplacebo] [  9] #extension GL_ARB_texture_gather : enable
[   0.741][d][vo/gpu-next/libplacebo] [ 10] layout(std430, push_constant) uniform PushC {
[   0.741][d][vo/gpu-next/libplacebo] [ 11]     layout(offset=0) vec2 _4;
[   0.741][d][vo/gpu-next/libplacebo] [ 12]     layout(offset=8) vec2 _5;
[   0.741][d][vo/gpu-next/libplacebo] [ 13]     layout(offset=16) vec2 _9;
[   0.741][d][vo/gpu-next/libplacebo] [ 14]     layout(offset=24) vec2 _a;
[   0.741][d][vo/gpu-next/libplacebo] [ 15]     layout(offset=32) vec2 _e;
[   0.741][d][vo/gpu-next/libplacebo] [ 16]     layout(offset=40) vec2 _f;
[   0.741][d][vo/gpu-next/libplacebo] [ 17]     layout(offset=48) int _11;
[   0.741][d][vo/gpu-next/libplacebo] [ 18]     layout(offset=52) float _12;
[   0.741][d][vo/gpu-next/libplacebo] [ 19]     layout(offset=56) vec2 _13;
[   0.741][d][vo/gpu-next/libplacebo] [ 20]     layout(offset=64) vec2 _14;
[   0.741][d][vo/gpu-next/libplacebo] [ 21]     layout(offset=72) vec2 _15;
[   0.741][d][vo/gpu-next/libplacebo] [ 22] };
[   0.741][d][vo/gpu-next/libplacebo] [ 23] layout(constant_id=0) const float _6 = 1; 
[   0.741][d][vo/gpu-next/libplacebo] [ 24] layout(constant_id=1) const float _b = 1; 
[   0.741][d][vo/gpu-next/libplacebo] [ 25] layout(constant_id=2) const float _10 = 1; 
[   0.741][d][vo/gpu-next/libplacebo] [ 26] layout(constant_id=3) const float _8002 = 1; 
[   0.741][d][vo/gpu-next/libplacebo] [ 27] layout(constant_id=4) const float _8003 = 1; 
[   0.741][d][vo/gpu-next/libplacebo] [ 28] layout(constant_id=5) const float _4002 = 1; 
[   0.741][d][vo/gpu-next/libplacebo] [ 29] layout(constant_id=6) const float _4003 = 1; 
[   0.741][d][vo/gpu-next/libplacebo] [ 30] layout(binding=0) uniform  sampler2D _2;
[   0.741][d][vo/gpu-next/libplacebo] [ 31] layout(binding=1) uniform  sampler2D _7;
[   0.741][d][vo/gpu-next/libplacebo] [ 32] layout(binding=2) uniform  sampler2D _c;
[   0.741][d][vo/gpu-next/libplacebo] [ 33] layout(location=0) in vec2 _3;
[   0.741][d][vo/gpu-next/libplacebo] [ 34] layout(location=1) in vec2 _8;
[   0.741][d][vo/gpu-next/libplacebo] [ 35] layout(location=2) in vec2 _d;
[   0.741][d][vo/gpu-next/libplacebo] [ 36] layout(location=0) out vec4 out_color;
[   0.741][d][vo/gpu-next/libplacebo] [ 37] 
[   0.741][d][vo/gpu-next/libplacebo] [ 38] #define CHROMA_raw _2 
[   0.741][d][vo/gpu-next/libplacebo] [ 39] #define CHROMA_pos _3 
[   0.741][d][vo/gpu-next/libplacebo] [ 40] #define CHROMA_map _3_map 
[   0.741][d][vo/gpu-next/libplacebo] [ 41] #define CHROMA_size vec2(textureSize(_2, 0)) 
[   0.741][d][vo/gpu-next/libplacebo] [ 42] #define CHROMA_pt _4 
[   0.741][d][vo/gpu-next/libplacebo] [ 43] #define CHROMA_off _5 
[   0.741][d][vo/gpu-next/libplacebo] [ 44] #define CHROMA_mul _6 
[   0.741][d][vo/gpu-next/libplacebo] [ 45] #define CHROMA_rot mat2(1.0, 0.0, 0.0, 1.0) 
[   0.741][d][vo/gpu-next/libplacebo] [ 46] #define CHROMA_tex(pos) (_6 * vec4(textureLod(_2, pos, 0.0))) 
[   0.741][d][vo/gpu-next/libplacebo] [ 47] #define CHROMA_texOff(off) (CHROMA_tex(_3 + _4 * vec2(off))) 
[   0.741][d][vo/gpu-next/libplacebo] [ 48] #define CHROMA_gather(pos, c) (_6 * vec4(textureGather(_2, pos, c))) 
[   0.741][d][vo/gpu-next/libplacebo] [ 49] #define HOOKED_raw CHROMA_raw 
[   0.741][d][vo/gpu-next/libplacebo] [ 50] #define HOOKED_pos CHROMA_pos 
[   0.741][d][vo/gpu-next/libplacebo] [ 51] #define HOOKED_size CHROMA_size 
[   0.741][d][vo/gpu-next/libplacebo] [ 52] #define HOOKED_rot CHROMA_rot 
[   0.741][d][vo/gpu-next/libplacebo] [ 53] #define HOOKED_off CHROMA_off 
[   0.741][d][vo/gpu-next/libplacebo] [ 54] #define HOOKED_pt CHROMA_pt 
[   0.741][d][vo/gpu-next/libplacebo] [ 55] #define HOOKED_map CHROMA_map 
[   0.741][d][vo/gpu-next/libplacebo] [ 56] #define HOOKED_mul CHROMA_mul 
[   0.741][d][vo/gpu-next/libplacebo] [ 57] #define HOOKED_tex CHROMA_tex 
[   0.741][d][vo/gpu-next/libplacebo] [ 58] #define HOOKED_texOff CHROMA_texOff 
[   0.741][d][vo/gpu-next/libplacebo] [ 59] #define HOOKED_gather CHROMA_gather 
[   0.741][d][vo/gpu-next/libplacebo] [ 60] #define LUMA_raw _7 
[   0.741][d][vo/gpu-next/libplacebo] [ 61] #define LUMA_pos _8 
[   0.741][d][vo/gpu-next/libplacebo] [ 62] #define LUMA_map _8_map 
[   0.741][d][vo/gpu-next/libplacebo] [ 63] #define LUMA_size vec2(textureSize(_7, 0)) 
[   0.741][d][vo/gpu-next/libplacebo] [ 64] #define LUMA_pt _9 
[   0.741][d][vo/gpu-next/libplacebo] [ 65] #define LUMA_off _a 
[   0.741][d][vo/gpu-next/libplacebo] [ 66] #define LUMA_mul _b 
[   0.741][d][vo/gpu-next/libplacebo] [ 67] #define LUMA_rot mat2(1.0, 0.0, 0.0, 1.0) 
[   0.741][d][vo/gpu-next/libplacebo] [ 68] #define LUMA_tex(pos) (_b * vec4(textureLod(_7, pos, 0.0))) 
[   0.741][d][vo/gpu-next/libplacebo] [ 69] #define LUMA_texOff(off) (LUMA_tex(_8 + _9 * vec2(off))) 
[   0.741][d][vo/gpu-next/libplacebo] [ 70] #define LUMA_gather(pos, c) (_b * vec4(textureGather(_7, pos, c))) 
[   0.741][d][vo/gpu-next/libplacebo] [ 71] #define LOWRES_Y_raw _c 
[   0.741][d][vo/gpu-next/libplacebo] [ 72] #define LOWRES_Y_pos _d 
[   0.741][d][vo/gpu-next/libplacebo] [ 73] #define LOWRES_Y_map _d_map 
[   0.741][d][vo/gpu-next/libplacebo] [ 74] #define LOWRES_Y_size vec2(textureSize(_c, 0)) 
[   0.741][d][vo/gpu-next/libplacebo] [ 75] #define LOWRES_Y_pt _e 
[   0.741][d][vo/gpu-next/libplacebo] [ 76] #define LOWRES_Y_off _f 
[   0.741][d][vo/gpu-next/libplacebo] [ 77] #define LOWRES_Y_mul _10 
[   0.741][d][vo/gpu-next/libplacebo] [ 78] #define LOWRES_Y_rot mat2(1.0, 0.0, 0.0, 1.0) 
[   0.741][d][vo/gpu-next/libplacebo] [ 79] #define LOWRES_Y_tex(pos) (_10 * vec4(textureLod(_c, pos, 0.0))) 
[   0.741][d][vo/gpu-next/libplacebo] [ 80] #define LOWRES_Y_texOff(off) (LOWRES_Y_tex(_d + _e * vec2(off))) 
[   0.741][d][vo/gpu-next/libplacebo] [ 81] #define LOWRES_Y_gather(pos, c) (_10 * vec4(textureGather(_c, pos, c))) 
[   0.741][d][vo/gpu-next/libplacebo] [ 82] #define frame _11 
[   0.741][d][vo/gpu-next/libplacebo] [ 83] #define random _12 
[   0.741][d][vo/gpu-next/libplacebo] [ 84] #define input_size _13 
[   0.741][d][vo/gpu-next/libplacebo] [ 85] #define target_size _14 
[   0.741][d][vo/gpu-next/libplacebo] [ 86] #define tex_offset _15 
[   0.741][d][vo/gpu-next/libplacebo] [ 87] vec4 _8001(vec4 color) {
[   0.741][d][vo/gpu-next/libplacebo] [ 88] // pl_shader_linearize           
[   0.741][d][vo/gpu-next/libplacebo] [ 89] color.rgb = max(color.rgb, 0.0); 
[   0.741][d][vo/gpu-next/libplacebo] [ 90] color.rgb = _8003 * pow(color.rgb + vec3(_8002), vec3(2.4)); 
[   0.741][d][vo/gpu-next/libplacebo] [ 91] return color;
[   0.741][d][vo/gpu-next/libplacebo] [ 92] }
[   0.741][d][vo/gpu-next/libplacebo] [ 93] 
[   0.741][d][vo/gpu-next/libplacebo] [ 94] #define linearize _8001 
[   0.741][d][vo/gpu-next/libplacebo] [ 95] vec4 _4001(vec4 color) {
[   0.741][d][vo/gpu-next/libplacebo] [ 96] // pl_shader_delinearize 
[   0.741][d][vo/gpu-next/libplacebo] [ 97] color.rgb = max(color.rgb, 0.0); 
[   0.741][d][vo/gpu-next/libplacebo] [ 98] color.rgb = pow(_4003 * color.rgb, vec3(1.0/2.4)) - vec3(_4002); 
[   0.741][d][vo/gpu-next/libplacebo] [ 99] return color;
[   0.741][d][vo/gpu-next/libplacebo] [100] }
[   0.741][d][vo/gpu-next/libplacebo] [101] 
[   0.741][d][vo/gpu-next/libplacebo] [102] #define delinearize _4001 
[   0.741][d][vo/gpu-next/libplacebo] [103] 
[   0.741][d][vo/gpu-next/libplacebo] [104] #define sigma_nsq   256.0/(255.0*255.0)
[   0.741][d][vo/gpu-next/libplacebo] [105] #define N           8
[   0.741][d][vo/gpu-next/libplacebo] [106] #define sqr(x)      dot(x,x)
[   0.741][d][vo/gpu-next/libplacebo] [107] 
[   0.741][d][vo/gpu-next/libplacebo] [108] #define M(i,j)      Mx[min(i,j)*N + max(i,j) - (min(i,j)*(min(i,j)+1))/2]
[   0.741][d][vo/gpu-next/libplacebo] [109] 
[   0.741][d][vo/gpu-next/libplacebo] [110] #define C(i,j)      (inversesqrt(1.0 + (X[i].y + X[j].y) / Var) * exp(-0.5 * (sqr(X[i].x - X[j].x) / (localVar + X[i].y + X[j].y) + sqr((coords[i] - coords[j]) / radius))) /*+ (X[i].x - y) * (X[j].x - y) / Var*/)  // commented out part works well only on test patterns
[   0.741][d][vo/gpu-next/libplacebo] [111] #define c(i)        (inversesqrt(1.0 + X[i].y / Var) * exp(-0.5 * (sqr(X[i].x - y) / (localVar + X[i].y) + sqr((coords[i] - offset) / radius))))
[   0.741][d][vo/gpu-next/libplacebo] [112] 
[   0.741][d][vo/gpu-next/libplacebo] [113] #define getnsum(i)  X[i] = vec4(LOWRES_Y_tex(LOWRES_Y_pt*(pos+coords[i]+vec2(0.5))).xy, \
[   0.741][d][vo/gpu-next/libplacebo] [114]                                 CHROMA_tex(CHROMA_pt*(pos+coords[i]+vec2(0.5))).xy); \
[   0.741][d][vo/gpu-next/libplacebo] [115]                     w = clamp(1.5 - abs(coords[i]), 0.0, 1.0); \
[   0.741][d][vo/gpu-next/libplacebo] [116]                     total += w.x*w.y*vec4(X[i].x, X[i].x * X[i].x, X[i].y, 1.0);
[   0.741][d][vo/gpu-next/libplacebo] [117] 
[   0.741][d][vo/gpu-next/libplacebo] [118] #define I3(f, n)    f(n) f(n+1) f(n+2)
[   0.741][d][vo/gpu-next/libplacebo] [119] #define I9(f, n)    I3(f, n) I3(f, n+3) I3(f, n+6)
[   0.741][d][vo/gpu-next/libplacebo] [120] 
[   0.741][d][vo/gpu-next/libplacebo] [121] vec4 hook() {
[   0.741][d][vo/gpu-next/libplacebo] [122]     vec2 pos = CHROMA_pos * HOOKED_size - vec2(0.5);
[   0.741][d][vo/gpu-next/libplacebo] [123]     vec2 offset = pos - round(pos);
[   0.741][d][vo/gpu-next/libplacebo] [124]     pos -= offset;
[   0.741][d][vo/gpu-next/libplacebo] [125] 
[   0.741][d][vo/gpu-next/libplacebo] [126]     vec2 coords[N+1];
[   0.741][d][vo/gpu-next/libplacebo] [127]     vec4 X[N+1];
[   0.741][d][vo/gpu-next/libplacebo] [128]     vec2 w;
[   0.741][d][vo/gpu-next/libplacebo] [129]     vec4 total = vec4(0);
[   0.741][d][vo/gpu-next/libplacebo] [130] 
[   0.741][d][vo/gpu-next/libplacebo] [131]     coords[0] = vec2(-1,-1); coords[1] = vec2(-1, 0); coords[2] = vec2(-1, 1);
[   0.741][d][vo/gpu-next/libplacebo] [132]     coords[3] = vec2( 0,-1); coords[4] = vec2( 0, 1); coords[5] = vec2( 1,-1);
[   0.741][d][vo/gpu-next/libplacebo] [133]     coords[6] = vec2( 1, 0); coords[7] = vec2( 1, 1); coords[8] = vec2( 0, 0);
[   0.741][d][vo/gpu-next/libplacebo] [134] 
[   0.741][d][vo/gpu-next/libplacebo] [135]     I9(getnsum, 0)
[   0.741][d][vo/gpu-next/libplacebo] [136] 
[   0.741][d][vo/gpu-next/libplacebo] [137]     total.xyz /= total.w;
[   0.741][d][vo/gpu-next/libplacebo] [138]     float localVar = abs(total.y - total.x * total.x) + sigma_nsq;
[   0.741][d][vo/gpu-next/libplacebo] [139]     float Var = localVar + total.z;
[   0.741][d][vo/gpu-next/libplacebo] [140]     float radius = 1.5;  // mix(1.5, 1.0, sigma_nsq / Var);
[   0.741][d][vo/gpu-next/libplacebo] [141] 
[   0.741][d][vo/gpu-next/libplacebo] [142]     float y = LUMA_texOff(0).x;
[   0.741][d][vo/gpu-next/libplacebo] [143]     float Mx[(N*(N+1))/2];
[   0.741][d][vo/gpu-next/libplacebo] [144]     float b[N];
[   0.741][d][vo/gpu-next/libplacebo] [145]     vec2 interp = X[N].zw;
[   0.741][d][vo/gpu-next/libplacebo] [146] 
[   0.741][d][vo/gpu-next/libplacebo] [147]     b[0] = c(0) - c(N) - C(0,N) + C(N,N); M(0, 0) = C(0,0) - C(0,N) - C(0,N) + C(N,N); M(0, 1) = C(0,1) - C(1,N) - C(0,N) + C(N,N); M(0, 2) = C(0,2) - C(2,N) - C(0,N) + C(N,N); M(0, 3) = C(0,3) - C(3,N) - C(0,N) + C(N,N); M(0, 4) = C(0,4) - C(4,N) - C(0,N) + C(N,N); M(0, 5) = C(0,5) - C(5,N) - C(0,N) + C(N,N); M(0, 6) = C(0,6) - C(6,N) - C(0,N) + C(N,N); M(0, 7) = C(0,7) - C(7,N) - C(0,N) + C(N,N);
[   0.741][d][vo/gpu-next/libplacebo] [148]     b[1] = c(1) - c(N) - C(1,N) + C(N,N); M(1, 1) = C(1,1) - C(1,N) - C(1,N) + C(N,N); M(1, 2) = C(1,2) - C(2,N) - C(1,N) + C(N,N); M(1, 3) = C(1,3) - C(3,N) - C(1,N) + C(N,N); M(1, 4) = C(1,4) - C(4,N) - C(1,N) + C(N,N); M(1, 5) = C(1,5) - C(5,N) - C(1,N) + C(N,N); M(1, 6) = C(1,6) - C(6,N) - C(1,N) + C(N,N); M(1, 7) = C(1,7) - C(7,N) - C(1,N) + C(N,N);
[   0.741][d][vo/gpu-next/libplacebo] [149]     b[2] = c(2) - c(N) - C(2,N) + C(N,N); M(2, 2) = C(2,2) - C(2,N) - C(2,N) + C(N,N); M(2, 3) = C(2,3) - C(3,N) - C(2,N) + C(N,N); M(2, 4) = C(2,4) - C(4,N) - C(2,N) + C(N,N); M(2, 5) = C(2,5) - C(5,N) - C(2,N) + C(N,N); M(2, 6) = C(2,6) - C(6,N) - C(2,N) + C(N,N); M(2, 7) = C(2,7) - C(7,N) - C(2,N) + C(N,N);
[   0.741][d][vo/gpu-next/libplacebo] [150]     b[3] = c(3) - c(N) - C(3,N) + C(N,N); M(3, 3) = C(3,3) - C(3,N) - C(3,N) + C(N,N); M(3, 4) = C(3,4) - C(4,N) - C(3,N) + C(N,N); M(3, 5) = C(3,5) - C(5,N) - C(3,N) + C(N,N); M(3, 6) = C(3,6) - C(6,N) - C(3,N) + C(N,N); M(3, 7) = C(3,7) - C(7,N) - C(3,N) + C(N,N);
[   0.741][d][vo/gpu-next/libplacebo] [151]     b[4] = c(4) - c(N) - C(4,N) + C(N,N); M(4, 4) = C(4,4) - C(4,N) - C(4,N) + C(N,N); M(4, 5) = C(4,5) - C(5,N) - C(4,N) + C(N,N); M(4, 6) = C(4,6) - C(6,N) - C(4,N) + C(N,N); M(4, 7) = C(4,7) - C(7,N) - C(4,N) + C(N,N);
[   0.741][d][vo/gpu-next/libplacebo] [152]     b[5] = c(5) - c(N) - C(5,N) + C(N,N); M(5, 5) = C(5,5) - C(5,N) - C(5,N) + C(N,N); M(5, 6) = C(5,6) - C(6,N) - C(5,N) + C(N,N); M(5, 7) = C(5,7) - C(7,N) - C(5,N) + C(N,N);
[   0.741][d][vo/gpu-next/libplacebo] [153]     b[6] = c(6) - c(N) - C(6,N) + C(N,N); M(6, 6) = C(6,6) - C(6,N) - C(6,N) + C(N,N); M(6, 7) = C(6,7) - C(7,N) - C(6,N) + C(N,N);
[   0.741][d][vo/gpu-next/libplacebo] [154]     b[7] = c(7) - c(N) - C(7,N) + C(N,N); M(7, 7) = C(7,7) - C(7,N) - C(7,N) + C(N,N);
[   0.741][d][vo/gpu-next/libplacebo] [155] 
[   0.741][d][vo/gpu-next/libplacebo] [156]     b[1] -= b[0] * M(0, 1) / M(0, 0); M(1, 1) -= M(0, 1) * M(0, 1) / M(0, 0); M(1, 2) -= M(0, 2) * M(0, 1) / M(0, 0); M(1, 3) -= M(0, 3) * M(0, 1) / M(0, 0); M(1, 4) -= M(0, 4) * M(0, 1) / M(0, 0); M(1, 5) -= M(0, 5) * M(0, 1) / M(0, 0); M(1, 6) -= M(0, 6) * M(0, 1) / M(0, 0); M(1, 7) -= M(0, 7) * M(0, 1) / M(0, 0);
[   0.741][d][vo/gpu-next/libplacebo] [157]     b[2] -= b[0] * M(0, 2) / M(0, 0); M(2, 2) -= M(0, 2) * M(0, 2) / M(0, 0); M(2, 3) -= M(0, 3) * M(0, 2) / M(0, 0); M(2, 4) -= M(0, 4) * M(0, 2) / M(0, 0); M(2, 5) -= M(0, 5) * M(0, 2) / M(0, 0); M(2, 6) -= M(0, 6) * M(0, 2) / M(0, 0); M(2, 7) -= M(0, 7) * M(0, 2) / M(0, 0);
[   0.741][d][vo/gpu-next/libplacebo] [158]     b[3] -= b[0] * M(0, 3) / M(0, 0); M(3, 3) -= M(0, 3) * M(0, 3) / M(0, 0); M(3, 4) -= M(0, 4) * M(0, 3) / M(0, 0); M(3, 5) -= M(0, 5) * M(0, 3) / M(0, 0); M(3, 6) -= M(0, 6) * M(0, 3) / M(0, 0); M(3, 7) -= M(0, 7) * M(0, 3) / M(0, 0);
[   0.741][d][vo/gpu-next/libplacebo] [159]     b[4] -= b[0] * M(0, 4) / M(0, 0); M(4, 4) -= M(0, 4) * M(0, 4) / M(0, 0); M(4, 5) -= M(0, 5) * M(0, 4) / M(0, 0); M(4, 6) -= M(0, 6) * M(0, 4) / M(0, 0); M(4, 7) -= M(0, 7) * M(0, 4) / M(0, 0);
[   0.741][d][vo/gpu-next/libplacebo] [160]     b[5] -= b[0] * M(0, 5) / M(0, 0); M(5, 5) -= M(0, 5) * M(0, 5) / M(0, 0); M(5, 6) -= M(0, 6) * M(0, 5) / M(0, 0); M(5, 7) -= M(0, 7) * M(0, 5) / M(0, 0);
[   0.741][d][vo/gpu-next/libplacebo] [161]     b[6] -= b[0] * M(0, 6) / M(0, 0); M(6, 6) -= M(0, 6) * M(0, 6) / M(0, 0); M(6, 7) -= M(0, 7) * M(0, 6) / M(0, 0);
[   0.741][d][vo/gpu-next/libplacebo] [162]     b[7] -= b[0] * M(0, 7) / M(0, 0); M(7, 7) -= M(0, 7) * M(0, 7) / M(0, 0);
[   0.741][d][vo/gpu-next/libplacebo] [163] 
[   0.741][d][vo/gpu-next/libplacebo] [164]     b[2] -= b[1] * M(1, 2) / M(1, 1); M(2, 2) -= M(1, 2) * M(1, 2) / M(1, 1); M(2, 3) -= M(1, 3) * M(1, 2) / M(1, 1); M(2, 4) -= M(1, 4) * M(1, 2) / M(1, 1); M(2, 5) -= M(1, 5) * M(1, 2) / M(1, 1); M(2, 6) -= M(1, 6) * M(1, 2) / M(1, 1); M(2, 7) -= M(1, 7) * M(1, 2) / M(1, 1);
[   0.741][d][vo/gpu-next/libplacebo] [165]     b[3] -= b[1] * M(1, 3) / M(1, 1); M(3, 3) -= M(1, 3) * M(1, 3) / M(1, 1); M(3, 4) -= M(1, 4) * M(1, 3) / M(1, 1); M(3, 5) -= M(1, 5) * M(1, 3) / M(1, 1); M(3, 6) -= M(1, 6) * M(1, 3) / M(1, 1); M(3, 7) -= M(1, 7) * M(1, 3) / M(1, 1);
[   0.741][d][vo/gpu-next/libplacebo] [166]     b[4] -= b[1] * M(1, 4) / M(1, 1); M(4, 4) -= M(1, 4) * M(1, 4) / M(1, 1); M(4, 5) -= M(1, 5) * M(1, 4) / M(1, 1); M(4, 6) -= M(1, 6) * M(1, 4) / M(1, 1); M(4, 7) -= M(1, 7) * M(1, 4) / M(1, 1);
[   0.741][d][vo/gpu-next/libplacebo] [167]     b[5] -= b[1] * M(1, 5) / M(1, 1); M(5, 5) -= M(1, 5) * M(1, 5) / M(1, 1); M(5, 6) -= M(1, 6) * M(1, 5) / M(1, 1); M(5, 7) -= M(1, 7) * M(1, 5) / M(1, 1);
[   0.741][d][vo/gpu-next/libplacebo] [168]     b[6] -= b[1] * M(1, 6) / M(1, 1); M(6, 6) -= M(1, 6) * M(1, 6) / M(1, 1); M(6, 7) -= M(1, 7) * M(1, 6) / M(1, 1);
[   0.741][d][vo/gpu-next/libplacebo] [169]     b[7] -= b[1] * M(1, 7) / M(1, 1); M(7, 7) -= M(1, 7) * M(1, 7) / M(1, 1);
[   0.741][d][vo/gpu-next/libplacebo] [170] 
[   0.741][d][vo/gpu-next/libplacebo] [171]     b[3] -= b[2] * M(2, 3) / M(2, 2); M(3, 3) -= M(2, 3) * M(2, 3) / M(2, 2); M(3, 4) -= M(2, 4) * M(2, 3) / M(2, 2); M(3, 5) -= M(2, 5) * M(2, 3) / M(2, 2); M(3, 6) -= M(2, 6) * M(2, 3) / M(2, 2); M(3, 7) -= M(2, 7) * M(2, 3) / M(2, 2);
[   0.741][d][vo/gpu-next/libplacebo] [172]     b[4] -= b[2] * M(2, 4) / M(2, 2); M(4, 4) -= M(2, 4) * M(2, 4) / M(2, 2); M(4, 5) -= M(2, 5) * M(2, 4) / M(2, 2); M(4, 6) -= M(2, 6) * M(2, 4) / M(2, 2); M(4, 7) -= M(2, 7) * M(2, 4) / M(2, 2);
[   0.741][d][vo/gpu-next/libplacebo] [173]     b[5] -= b[2] * M(2, 5) / M(2, 2); M(5, 5) -= M(2, 5) * M(2, 5) / M(2, 2); M(5, 6) -= M(2, 6) * M(2, 5) / M(2, 2); M(5, 7) -= M(2, 7) * M(2, 5) / M(2, 2);
[   0.741][d][vo/gpu-next/libplacebo] [174]     b[6] -= b[2] * M(2, 6) / M(2, 2); M(6, 6) -= M(2, 6) * M(2, 6) / M(2, 2); M(6, 7) -= M(2, 7) * M(2, 6) / M(2, 2);
[   0.741][d][vo/gpu-next/libplacebo] [175]     b[7] -= b[2] * M(2, 7) / M(2, 2); M(7, 7) -= M(2, 7) * M(2, 7) / M(2, 2);
[   0.741][d][vo/gpu-next/libplacebo] [176] 
[   0.741][d][vo/gpu-next/libplacebo] [177]     b[4] -= b[3] * M(3, 4) / M(3, 3); M(4, 4) -= M(3, 4) * M(3, 4) / M(3, 3); M(4, 5) -= M(3, 5) * M(3, 4) / M(3, 3); M(4, 6) -= M(3, 6) * M(3, 4) / M(3, 3); M(4, 7) -= M(3, 7) * M(3, 4) / M(3, 3);
[   0.741][d][vo/gpu-next/libplacebo] [178]     b[5] -= b[3] * M(3, 5) / M(3, 3); M(5, 5) -= M(3, 5) * M(3, 5) / M(3, 3); M(5, 6) -= M(3, 6) * M(3, 5) / M(3, 3); M(5, 7) -= M(3, 7) * M(3, 5) / M(3, 3);
[   0.741][d][vo/gpu-next/libplacebo] [179]     b[6] -= b[3] * M(3, 6) / M(3, 3); M(6, 6) -= M(3, 6) * M(3, 6) / M(3, 3); M(6, 7) -= M(3, 7) * M(3, 6) / M(3, 3);
[   0.741][d][vo/gpu-next/libplacebo] [180]     b[7] -= b[3] * M(3, 7) / M(3, 3); M(7, 7) -= M(3, 7) * M(3, 7) / M(3, 3);
[   0.741][d][vo/gpu-next/libplacebo] [181] 
[   0.741][d][vo/gpu-next/libplacebo] [182]     b[5] -= b[4] * M(4, 5) / M(4, 4); M(5, 5) -= M(4, 5) * M(4, 5) / M(4, 4); M(5, 6) -= M(4, 6) * M(4, 5) / M(4, 4); M(5, 7) -= M(4, 7) * M(4, 5) / M(4, 4);
[   0.741][d][vo/gpu-next/libplacebo] [183]     b[6] -= b[4] * M(4, 6) / M(4, 4); M(6, 6) -= M(4, 6) * M(4, 6) / M(4, 4); M(6, 7) -= M(4, 7) * M(4, 6) / M(4, 4);
[   0.741][d][vo/gpu-next/libplacebo] [184]     b[7] -= b[4] * M(4, 7) / M(4, 4); M(7, 7) -= M(4, 7) * M(4, 7) / M(4, 4);
[   0.741][d][vo/gpu-next/libplacebo] [185] 
[   0.741][d][vo/gpu-next/libplacebo] [186]     b[6] -= b[5] * M(5, 6) / M(5, 5); M(6, 6) -= M(5, 6) * M(5, 6) / M(5, 5); M(6, 7) -= M(5, 7) * M(5, 6) / M(5, 5);
[   0.741][d][vo/gpu-next/libplacebo] [187]     b[7] -= b[5] * M(5, 7) / M(5, 5); M(7, 7) -= M(5, 7) * M(5, 7) / M(5, 5);
[   0.741][d][vo/gpu-next/libplacebo] [188] 
[   0.741][d][vo/gpu-next/libplacebo] [189]     b[7] -= b[6] * M(6, 7) / M(6, 6); M(7, 7) -= M(6, 7) * M(6, 7) / M(6, 6);
[   0.741][d][vo/gpu-next/libplacebo] [190] 
[   0.741][d][vo/gpu-next/libplacebo] [191]     b[7] /= M(7, 7);
[   0.741][d][vo/gpu-next/libplacebo] [192]     interp += b[7] * (X[7] - X[N]).zw;
[   0.741][d][vo/gpu-next/libplacebo] [193] 
[   0.741][d][vo/gpu-next/libplacebo] [194]     b[6] -= M(6, 7) * b[7]; b[6] /= M(6, 6);
[   0.741][d][vo/gpu-next/libplacebo] [195]     interp += b[6] * (X[6] - X[N]).zw;
[   0.741][d][vo/gpu-next/libplacebo] [196] 
[   0.741][d][vo/gpu-next/libplacebo] [197]     b[5] -= M(5, 6) * b[6]; b[5] -= M(5, 7) * b[7]; b[5] /= M(5, 5);
[   0.741][d][vo/gpu-next/libplacebo] [198]     interp += b[5] * (X[5] - X[N]).zw;
[   0.741][d][vo/gpu-next/libplacebo] [199] 
[   0.741][d][vo/gpu-next/libplacebo] [200]     b[4] -= M(4, 5) * b[5]; b[4] -= M(4, 6) * b[6]; b[4] -= M(4, 7) * b[7]; b[4] /= M(4, 4);
[   0.741][d][vo/gpu-next/libplacebo] [201]     interp += b[4] * (X[4] - X[N]).zw;
[   0.741][d][vo/gpu-next/libplacebo] [202] 
[   0.741][d][vo/gpu-next/libplacebo] [203]     b[3] -= M(3, 4) * b[4]; b[3] -= M(3, 5) * b[5]; b[3] -= M(3, 6) * b[6]; b[3] -= M(3, 7) * b[7]; b[3] /= M(3, 3);
[   0.741][d][vo/gpu-next/libplacebo] [204]     interp += b[3] * (X[3] - X[N]).zw;
[   0.741][d][vo/gpu-next/libplacebo] [205] 
[   0.741][d][vo/gpu-next/libplacebo] [206]     b[2] -= M(2, 3) * b[3]; b[2] -= M(2, 4) * b[4]; b[2] -= M(2, 5) * b[5]; b[2] -= M(2, 6) * b[6]; b[2] -= M(2, 7) * b[7]; b[2] /= M(2, 2);
[   0.741][d][vo/gpu-next/libplacebo] [207]     interp += b[2] * (X[2] - X[N]).zw;
[   0.741][d][vo/gpu-next/libplacebo] [208] 
[   0.741][d][vo/gpu-next/libplacebo] [209]     b[1] -= M(1, 2) * b[2]; b[1] -= M(1, 3) * b[3]; b[1] -= M(1, 4) * b[4]; b[1] -= M(1, 5) * b[5]; b[1] -= M(1, 6) * b[6]; b[1] -= M(1, 7) * b[7]; b[1] /= M(1, 1);
[   0.741][d][vo/gpu-next/libplacebo] [210]     interp += b[1] * (X[1] - X[N]).zw;
[   0.741][d][vo/gpu-next/libplacebo] [211] 
[   0.741][d][vo/gpu-next/libplacebo] [212]     b[0] -= M(0, 1) * b[1]; b[0] -= M(0, 2) * b[2]; b[0] -= M(0, 3) * b[3]; b[0] -= M(0, 4) * b[4]; b[0] -= M(0, 5) * b[5]; b[0] -= M(0, 6) * b[6]; b[0] -= M(0, 7) * b[7]; b[0] /= M(0, 0);
[   0.741][d][vo/gpu-next/libplacebo] [213]     interp += b[0] * (X[0] - X[N]).zw;
[   0.741][d][vo/gpu-next/libplacebo] [214] 
[   0.741][d][vo/gpu-next/libplacebo] [215]     return interp.xyxy;
[   0.741][d][vo/gpu-next/libplacebo] [216] }
[   0.741][d][vo/gpu-next/libplacebo] [217] vec4 _1() {
[   0.741][d][vo/gpu-next/libplacebo] [218] vec4 color = hook(); 
[   0.741][d][vo/gpu-next/libplacebo] [219] return color;
[   0.741][d][vo/gpu-next/libplacebo] [220] }
[   0.741][d][vo/gpu-next/libplacebo] [221] 
[   0.741][d][vo/gpu-next/libplacebo] [222] void main() {
[   0.741][d][vo/gpu-next/libplacebo] [223] out_color = _1();
[   0.741][d][vo/gpu-next/libplacebo] [224] }
[   0.741][d][vo/gpu-next/libplacebo] Specialization constant values:
[   0.741][d][vo/gpu-next/libplacebo]   constant_id=0: 1.000000
[   0.741][d][vo/gpu-next/libplacebo]   constant_id=1: 1.000000
[   0.741][d][vo/gpu-next/libplacebo]   constant_id=2: 1.000000
[   0.741][d][vo/gpu-next/libplacebo]   constant_id=3: 0.059585
[   0.741][d][vo/gpu-next/libplacebo]   constant_id=4: 0.870311
[   0.741][d][vo/gpu-next/libplacebo]   constant_id=5: 0.059585
[   0.741][d][vo/gpu-next/libplacebo]   constant_id=6: 1.149015
[   0.741][d][vo/gpu-next] cache_load_obj: key(f7414375b5c01f02), size(948), load time(0.017 ms)
[   0.741][d][vo/gpu-next/libplacebo] Re-using cached SPIR-V object 0xf7414375b5c01f02
[   0.741][d][vo/gpu-next] cache_load_obj: key(5d109be536f42b4d), size(31680), load time(0.024 ms)
[   0.741][d][vo/gpu-next/libplacebo] Re-using cached SPIR-V object 0x5d109be536f42b4d
[   0.741][d][vo/gpu-next] cache_load_obj: key(6b565ab492fe8859), size(50889), load time(0.029 ms)
[   0.741][d][vo/gpu-next/libplacebo] Spent 0.036 ms compiling shader
[   0.741][d][vo/gpu-next] cache_save_obj: key(f7414375b5c01f02), size(948)
[   0.741][d][vo/gpu-next] cache_save_obj: key(5d109be536f42b4d), size(31680)
[   0.742][d][vo/gpu-next/libplacebo] Spent 0.230 ms creating pipeline
[   0.742][d][vo/gpu-next] cache_save_obj: key(6b565ab492fe8859), size(50889)
[   0.742][d][vo/gpu-next/libplacebo] Pass statistics: size 0, SPIR-V: vert 0 frag 0 comp 0
[   0.742][d][vo/gpu-next/libplacebo] (Re)creating 1280x720x0 texture with format rgba16hf: src/renderer.c:1065
[   0.742][d][vo/gpu-next/libplacebo] Allocating 7864320 memory of type 0x1 (id 1) in heap 0: src/renderer.c:1065
[   0.742][d][vo/gpu-next/libplacebo] Spent 0.048 ms allocating slab
[   0.742][d][vo/gpu-next/libplacebo] vertex shader source:
[   0.742][d][vo/gpu-next/libplacebo] [  1] #version 450
[   0.742][d][vo/gpu-next/libplacebo] [  2] #extension GL_KHR_shader_subgroup_basic : enable 
[   0.742][d][vo/gpu-next/libplacebo] [  3] #extension GL_KHR_shader_subgroup_vote : enable 
[   0.742][d][vo/gpu-next/libplacebo] [  4] #extension GL_KHR_shader_subgroup_arithmetic : enable 
[   0.742][d][vo/gpu-next/libplacebo] [  5] #extension GL_KHR_shader_subgroup_ballot : enable 
[   0.742][d][vo/gpu-next/libplacebo] [  6] #extension GL_KHR_shader_subgroup_shuffle : enable 
[   0.742][d][vo/gpu-next/libplacebo] [  7] #extension GL_KHR_shader_subgroup_clustered : enable 
[   0.742][d][vo/gpu-next/libplacebo] [  8] #extension GL_KHR_shader_subgroup_quad : enable 
[   0.742][d][vo/gpu-next/libplacebo] [  9] #extension GL_ARB_texture_gather : enable
[   0.742][d][vo/gpu-next/libplacebo] [ 10] layout(std430, push_constant) uniform PushC {
[   0.742][d][vo/gpu-next/libplacebo] [ 11]     layout(offset=0) vec3 _4005;
[   0.742][d][vo/gpu-next/libplacebo] [ 12]     layout(offset=16) mat3 _4004;
[   0.742][d][vo/gpu-next/libplacebo] [ 13] };
[   0.742][d][vo/gpu-next/libplacebo] [ 14] layout(constant_id=0) const float _4002 = 1; 
[   0.742][d][vo/gpu-next/libplacebo] [ 15] layout(constant_id=1) const float _4003 = 1; 
[   0.742][d][vo/gpu-next/libplacebo] [ 16] layout(constant_id=2) const float _c004 = 1; 
[   0.742][d][vo/gpu-next/libplacebo] [ 17] layout(constant_id=3) const float _2004 = 1; 
[   0.742][d][vo/gpu-next/libplacebo] [ 18] layout(binding=0) uniform  sampler2D _c002;
[   0.742][d][vo/gpu-next/libplacebo] [ 19] layout(binding=1) uniform  sampler2D _2002;
[   0.742][d][vo/gpu-next/libplacebo] [ 20] layout(location=0) in vec2 _4008;
[   0.742][d][vo/gpu-next/libplacebo] [ 21] layout(location=0) out vec2 _c003;
[   0.742][d][vo/gpu-next/libplacebo] [ 22] layout(location=1) in vec2 _4009;
[   0.742][d][vo/gpu-next/libplacebo] [ 23] layout(location=1) out vec2 _2003;
[   0.742][d][vo/gpu-next/libplacebo] [ 24] layout(location=2) in vec2 _400a;
[   0.742][d][vo/gpu-next/libplacebo] [ 25] void main() {
[   0.742][d][vo/gpu-next/libplacebo] [ 26] _c003 = _4008;
[   0.742][d][vo/gpu-next/libplacebo] [ 27] _2003 = _4009;
[   0.742][d][vo/gpu-next/libplacebo] [ 28] vec2 va_pos = _400a; 
[   0.742][d][vo/gpu-next/libplacebo] [ 29] gl_Position = vec4(va_pos, 0.0, 1.0); 
[   0.742][d][vo/gpu-next/libplacebo] [ 30] }
[   0.742][d][vo/gpu-next/libplacebo] fragment shader source:
[   0.742][d][vo/gpu-next/libplacebo] [  1] #version 450
[   0.742][d][vo/gpu-next/libplacebo] [  2] #extension GL_KHR_shader_subgroup_basic : enable 
[   0.742][d][vo/gpu-next/libplacebo] [  3] #extension GL_KHR_shader_subgroup_vote : enable 
[   0.742][d][vo/gpu-next/libplacebo] [  4] #extension GL_KHR_shader_subgroup_arithmetic : enable 
[   0.742][d][vo/gpu-next/libplacebo] [  5] #extension GL_KHR_shader_subgroup_ballot : enable 
[   0.742][d][vo/gpu-next/libplacebo] [  6] #extension GL_KHR_shader_subgroup_shuffle : enable 
[   0.742][d][vo/gpu-next/libplacebo] [  7] #extension GL_KHR_shader_subgroup_clustered : enable 
[   0.742][d][vo/gpu-next/libplacebo] [  8] #extension GL_KHR_shader_subgroup_quad : enable 
[   0.742][d][vo/gpu-next/libplacebo] [  9] #extension GL_ARB_texture_gather : enable
[   0.742][d][vo/gpu-next/libplacebo] [ 10] layout(std430, push_constant) uniform PushC {
[   0.742][d][vo/gpu-next/libplacebo] [ 11]     layout(offset=0) vec3 _4005;
[   0.742][d][vo/gpu-next/libplacebo] [ 12]     layout(offset=16) mat3 _4004;
[   0.742][d][vo/gpu-next/libplacebo] [ 13] };
[   0.742][d][vo/gpu-next/libplacebo] [ 14] layout(constant_id=0) const float _4002 = 1; 
[   0.742][d][vo/gpu-next/libplacebo] [ 15] layout(constant_id=1) const float _4003 = 1; 
[   0.742][d][vo/gpu-next/libplacebo] [ 16] layout(constant_id=2) const float _c004 = 1; 
[   0.742][d][vo/gpu-next/libplacebo] [ 17] layout(constant_id=3) const float _2004 = 1; 
[   0.742][d][vo/gpu-next/libplacebo] [ 18] layout(binding=0) uniform  sampler2D _c002;
[   0.742][d][vo/gpu-next/libplacebo] [ 19] layout(binding=1) uniform  sampler2D _2002;
[   0.742][d][vo/gpu-next/libplacebo] [ 20] layout(location=0) in vec2 _c003;
[   0.742][d][vo/gpu-next/libplacebo] [ 21] layout(location=1) in vec2 _2003;
[   0.742][d][vo/gpu-next/libplacebo] [ 22] layout(location=0) out vec4 out_color;
[   0.742][d][vo/gpu-next/libplacebo] [ 23] 
[   0.742][d][vo/gpu-next/libplacebo] [ 24] vec4 _c001() {
[   0.742][d][vo/gpu-next/libplacebo] [ 25] // pl_shader_sample_direct                            
[   0.742][d][vo/gpu-next/libplacebo] [ 26] vec4 color = vec4(_c004) * textureLod(_c002, _c003, 0.0);   
[   0.742][d][vo/gpu-next/libplacebo] [ 27] return color;
[   0.742][d][vo/gpu-next/libplacebo] [ 28] }
[   0.742][d][vo/gpu-next/libplacebo] [ 29] 
[   0.742][d][vo/gpu-next/libplacebo] [ 30] vec4 _2001() {
[   0.742][d][vo/gpu-next/libplacebo] [ 31] // pl_shader_sample_direct                            
[   0.742][d][vo/gpu-next/libplacebo] [ 32] vec4 color = vec4(_2004) * textureLod(_2002, _2003, 0.0);   
[   0.742][d][vo/gpu-next/libplacebo] [ 33] return color;
[   0.742][d][vo/gpu-next/libplacebo] [ 34] }
[   0.742][d][vo/gpu-next/libplacebo] [ 35] 
[   0.742][d][vo/gpu-next/libplacebo] [ 36] vec4 _4001() {
[   0.742][d][vo/gpu-next/libplacebo] [ 37] vec4 color = vec4(_4003, vec2(_4002), 1.0);   
[   0.742][d][vo/gpu-next/libplacebo] [ 38] // pass_read_image                        
[   0.742][d][vo/gpu-next/libplacebo] [ 39] {                                         
[   0.742][d][vo/gpu-next/libplacebo] [ 40] vec4 tmp;                                 
[   0.742][d][vo/gpu-next/libplacebo] [ 41] tmp = _c001(); 
[   0.742][d][vo/gpu-next/libplacebo] [ 42] color[0] = tmp[0];
[   0.742][d][vo/gpu-next/libplacebo] [ 43] tmp = _2001(); 
[   0.742][d][vo/gpu-next/libplacebo] [ 44] color[1] = tmp[0];
[   0.742][d][vo/gpu-next/libplacebo] [ 45] color[2] = tmp[1];
[   0.742][d][vo/gpu-next/libplacebo] [ 46] }
[   0.742][d][vo/gpu-next/libplacebo] [ 47] // pl_shader_decode_color 
[   0.742][d][vo/gpu-next/libplacebo] [ 48] { 
[   0.742][d][vo/gpu-next/libplacebo] [ 49] color.rgb = _4004 * color.rgb + _4005; 
[   0.742][d][vo/gpu-next/libplacebo] [ 50] }
[   0.742][d][vo/gpu-next/libplacebo] [ 51] return color;
[   0.742][d][vo/gpu-next/libplacebo] [ 52] }
[   0.742][d][vo/gpu-next/libplacebo] [ 53] 
[   0.742][d][vo/gpu-next/libplacebo] [ 54] void main() {
[   0.742][d][vo/gpu-next/libplacebo] [ 55] out_color = _4001();
[   0.742][d][vo/gpu-next/libplacebo] [ 56] }
[   0.742][d][vo/gpu-next/libplacebo] Specialization constant values:
[   0.742][d][vo/gpu-next/libplacebo]   constant_id=0: 0.501961
[   0.742][d][vo/gpu-next/libplacebo]   constant_id=1: 0.062745
[   0.742][d][vo/gpu-next/libplacebo]   constant_id=2: 1.000000
[   0.742][d][vo/gpu-next/libplacebo]   constant_id=3: 1.000000
[   0.742][d][vo/gpu-next] cache_load_obj: key(c39862bda55fffe6), size(848), load time(0.017 ms)
[   0.742][d][vo/gpu-next/libplacebo] Re-using cached SPIR-V object 0xc39862bda55fffe6
[   0.742][d][vo/gpu-next] cache_load_obj: key(bcddc9297c41fe5f), size(1648), load time(0.008 ms)
[   0.742][d][vo/gpu-next/libplacebo] Re-using cached SPIR-V object 0xbcddc9297c41fe5f
[   0.742][d][vo/gpu-next] cache_load_obj: key(d65a7201efc01bae), size(28748), load time(0.024 ms)
[   0.742][d][vo/gpu-next/libplacebo] Spent 0.004 ms compiling shader
[   0.742][d][vo/gpu-next] cache_save_obj: key(c39862bda55fffe6), size(848)
[   0.742][d][vo/gpu-next] cache_save_obj: key(bcddc9297c41fe5f), size(1648)
[   0.742][d][vo/gpu-next/libplacebo] Spent 0.061 ms creating pipeline
[   0.742][d][vo/gpu-next] cache_save_obj: key(d65a7201efc01bae), size(28748)
[   0.742][d][vo/gpu-next/libplacebo] Pass statistics: size 0, SPIR-V: vert 0 frag 0 comp 0
[   0.742][d][vo/gpu-next/libplacebo] (Re)creating 1280x720x0 texture with format rgba16hf: src/renderer.c:1065
[   0.742][d][vo/gpu-next/libplacebo] Allocating 7864320 memory of type 0x1 (id 1) in heap 0: src/renderer.c:1065
[   0.742][d][vo/gpu-next/libplacebo] Spent 0.051 ms allocating slab
[   0.742][d][vo/gpu-next/libplacebo] vertex shader source:
[   0.742][d][vo/gpu-next/libplacebo] [  1] #version 450
[   0.742][d][vo/gpu-next/libplacebo] [  2] #extension GL_KHR_shader_subgroup_basic : enable 
[   0.742][d][vo/gpu-next/libplacebo] [  3] #extension GL_KHR_shader_subgroup_vote : enable 
[   0.742][d][vo/gpu-next/libplacebo] [  4] #extension GL_KHR_shader_subgroup_arithmetic : enable 
[   0.742][d][vo/gpu-next/libplacebo] [  5] #extension GL_KHR_shader_subgroup_ballot : enable 
[   0.742][d][vo/gpu-next/libplacebo] [  6] #extension GL_KHR_shader_subgroup_shuffle : enable 
[   0.742][d][vo/gpu-next/libplacebo] [  7] #extension GL_KHR_shader_subgroup_clustered : enable 
[   0.742][d][vo/gpu-next/libplacebo] [  8] #extension GL_KHR_shader_subgroup_quad : enable 
[   0.742][d][vo/gpu-next/libplacebo] [  9] #extension GL_ARB_texture_gather : enable
[   0.742][d][vo/gpu-next/libplacebo] [ 10] layout(constant_id=0) const float _a004 = 1; 
[   0.742][d][vo/gpu-next/libplacebo] [ 11] layout(binding=0) uniform  sampler2D _a002;
[   0.742][d][vo/gpu-next/libplacebo] [ 12] layout(location=0) in vec2 _a007;
[   0.742][d][vo/gpu-next/libplacebo] [ 13] layout(location=0) out vec2 _a003;
[   0.742][d][vo/gpu-next/libplacebo] [ 14] layout(location=1) in vec2 _a008;
[   0.742][d][vo/gpu-next/libplacebo] [ 15] void main() {
[   0.742][d][vo/gpu-next/libplacebo] [ 16] _a003 = _a007;
[   0.742][d][vo/gpu-next/libplacebo] [ 17] vec2 va_pos = _a008; 
[   0.742][d][vo/gpu-next/libplacebo] [ 18] gl_Position = vec4(va_pos, 0.0, 1.0); 
[   0.742][d][vo/gpu-next/libplacebo] [ 19] }
[   0.742][d][vo/gpu-next/libplacebo] fragment shader source:
[   0.742][d][vo/gpu-next/libplacebo] [  1] #version 450
[   0.742][d][vo/gpu-next/libplacebo] [  2] #extension GL_KHR_shader_subgroup_basic : enable 
[   0.742][d][vo/gpu-next/libplacebo] [  3] #extension GL_KHR_shader_subgroup_vote : enable 
[   0.742][d][vo/gpu-next/libplacebo] [  4] #extension GL_KHR_shader_subgroup_arithmetic : enable 
[   0.742][d][vo/gpu-next/libplacebo] [  5] #extension GL_KHR_shader_subgroup_ballot : enable 
[   0.742][d][vo/gpu-next/libplacebo] [  6] #extension GL_KHR_shader_subgroup_shuffle : enable 
[   0.742][d][vo/gpu-next/libplacebo] [  7] #extension GL_KHR_shader_subgroup_clustered : enable 
[   0.742][d][vo/gpu-next/libplacebo] [  8] #extension GL_KHR_shader_subgroup_quad : enable 
[   0.742][d][vo/gpu-next/libplacebo] [  9] #extension GL_ARB_texture_gather : enable
[   0.742][d][vo/gpu-next/libplacebo] [ 10] layout(constant_id=0) const float _a004 = 1; 
[   0.742][d][vo/gpu-next/libplacebo] [ 11] layout(binding=0) uniform  sampler2D _a002;
[   0.742][d][vo/gpu-next/libplacebo] [ 12] layout(location=0) in vec2 _a003;
[   0.742][d][vo/gpu-next/libplacebo] [ 13] layout(location=0) out vec4 out_color;
[   0.742][d][vo/gpu-next/libplacebo] [ 14] 
[   0.742][d][vo/gpu-next/libplacebo] [ 15] vec4 _a001() {
[   0.742][d][vo/gpu-next/libplacebo] [ 16] // pl_shader_sample_direct                            
[   0.742][d][vo/gpu-next/libplacebo] [ 17] vec4 color = vec4(_a004) * textureLod(_a002, _a003, 0.0);   
[   0.742][d][vo/gpu-next/libplacebo] [ 18] return color;
[   0.742][d][vo/gpu-next/libplacebo] [ 19] }
[   0.742][d][vo/gpu-next/libplacebo] [ 20] 
[   0.742][d][vo/gpu-next/libplacebo] [ 21] void main() {
[   0.742][d][vo/gpu-next/libplacebo] [ 22] out_color = _a001();
[   0.742][d][vo/gpu-next/libplacebo] [ 23] }
[   0.742][d][vo/gpu-next/libplacebo] Specialization constant values:
[   0.742][d][vo/gpu-next/libplacebo]   constant_id=0: 1.000000
[   0.742][d][vo/gpu-next] cache_load_obj: key(1cbe071c0de10a51), size(748), load time(0.014 ms)
[   0.742][d][vo/gpu-next/libplacebo] Re-using cached SPIR-V object 0x1cbe071c0de10a51
[   0.742][d][vo/gpu-next] cache_load_obj: key(63d30aad806cd5ee), size(584), load time(0.007 ms)
[   0.742][d][vo/gpu-next/libplacebo] Re-using cached SPIR-V object 0x63d30aad806cd5ee
[   0.742][d][vo/gpu-next] cache_load_obj: key(a6154bbcd3718684), size(13149), load time(0.013 ms)
[   0.742][d][vo/gpu-next/libplacebo] Spent 0.003 ms compiling shader
[   0.742][d][vo/gpu-next] cache_save_obj: key(1cbe071c0de10a51), size(748)
[   0.742][d][vo/gpu-next] cache_save_obj: key(63d30aad806cd5ee), size(584)
[   0.742][d][vo/gpu-next/libplacebo] Spent 0.074 ms creating pipeline
[   0.742][d][vo/gpu-next] cache_save_obj: key(a6154bbcd3718684), size(13149)
[   0.742][d][vo/gpu-next/libplacebo] Pass statistics: size 0, SPIR-V: vert 0 frag 0 comp 0
[   0.743][d][vo/gpu-next/libplacebo] vertex shader source:
[   0.743][d][vo/gpu-next/libplacebo] [  1] #version 450
[   0.743][d][vo/gpu-next/libplacebo] [  2] #extension GL_KHR_shader_subgroup_basic : enable 
[   0.743][d][vo/gpu-next/libplacebo] [  3] #extension GL_KHR_shader_subgroup_vote : enable 
[   0.743][d][vo/gpu-next/libplacebo] [  4] #extension GL_KHR_shader_subgroup_arithmetic : enable 
[   0.743][d][vo/gpu-next/libplacebo] [  5] #extension GL_KHR_shader_subgroup_ballot : enable 
[   0.743][d][vo/gpu-next/libplacebo] [  6] #extension GL_KHR_shader_subgroup_shuffle : enable 
[   0.743][d][vo/gpu-next/libplacebo] [  7] #extension GL_KHR_shader_subgroup_clustered : enable 
[   0.743][d][vo/gpu-next/libplacebo] [  8] #extension GL_KHR_shader_subgroup_quad : enable 
[   0.743][d][vo/gpu-next/libplacebo] [  9] #extension GL_ARB_texture_gather : enable
[   0.743][d][vo/gpu-next/libplacebo] [ 10] layout(std430, push_constant) uniform PushC {
[   0.743][d][vo/gpu-next/libplacebo] [ 11]     layout(offset=0) mat3 _7;
[   0.743][d][vo/gpu-next/libplacebo] [ 12]     layout(offset=48) mat3 _8;
[   0.743][d][vo/gpu-next/libplacebo] [ 13] };
[   0.743][d][vo/gpu-next/libplacebo] [ 14] layout(constant_id=0) const float _4 = 1; 
[   0.743][d][vo/gpu-next/libplacebo] [ 15] layout(constant_id=1) const float _5 = 1; 
[   0.743][d][vo/gpu-next/libplacebo] [ 16] layout(constant_id=2) const float _6 = 1; 
[   0.743][d][vo/gpu-next/libplacebo] [ 17] layout(constant_id=3) const float _9 = 1; 
[   0.743][d][vo/gpu-next/libplacebo] [ 18] layout(constant_id=4) const float _a = 1; 
[   0.743][d][vo/gpu-next/libplacebo] [ 19] layout(binding=0) uniform  sampler2D _2;
[   0.743][d][vo/gpu-next/libplacebo] [ 20] layout(location=0) in vec2 _d;
[   0.743][d][vo/gpu-next/libplacebo] [ 21] layout(location=0) out vec2 _3;
[   0.743][d][vo/gpu-next/libplacebo] [ 22] layout(location=1) in vec2 _e;
[   0.743][d][vo/gpu-next/libplacebo] [ 23] void main() {
[   0.743][d][vo/gpu-next/libplacebo] [ 24] _3 = _d;
[   0.743][d][vo/gpu-next/libplacebo] [ 25] vec2 va_pos = _e; 
[   0.743][d][vo/gpu-next/libplacebo] [ 26] gl_Position = vec4(va_pos, 0.0, 1.0); 
[   0.743][d][vo/gpu-next/libplacebo] [ 27] }
[   0.743][d][vo/gpu-next/libplacebo] fragment shader source:
[   0.743][d][vo/gpu-next/libplacebo] [  1] #version 450
[   0.743][d][vo/gpu-next/libplacebo] [  2] #extension GL_KHR_shader_subgroup_basic : enable 
[   0.743][d][vo/gpu-next/libplacebo] [  3] #extension GL_KHR_shader_subgroup_vote : enable 
[   0.743][d][vo/gpu-next/libplacebo] [  4] #extension GL_KHR_shader_subgroup_arithmetic : enable 
[   0.743][d][vo/gpu-next/libplacebo] [  5] #extension GL_KHR_shader_subgroup_ballot : enable 
[   0.743][d][vo/gpu-next/libplacebo] [  6] #extension GL_KHR_shader_subgroup_shuffle : enable 
[   0.743][d][vo/gpu-next/libplacebo] [  7] #extension GL_KHR_shader_subgroup_clustered : enable 
[   0.743][d][vo/gpu-next/libplacebo] [  8] #extension GL_KHR_shader_subgroup_quad : enable 
[   0.743][d][vo/gpu-next/libplacebo] [  9] #extension GL_ARB_texture_gather : enable
[   0.743][d][vo/gpu-next/libplacebo] [ 10] layout(std430, push_constant) uniform PushC {
[   0.743][d][vo/gpu-next/libplacebo] [ 11]     layout(offset=0) mat3 _7;
[   0.743][d][vo/gpu-next/libplacebo] [ 12]     layout(offset=48) mat3 _8;
[   0.743][d][vo/gpu-next/libplacebo] [ 13] };
[   0.743][d][vo/gpu-next/libplacebo] [ 14] layout(constant_id=0) const float _4 = 1; 
[   0.743][d][vo/gpu-next/libplacebo] [ 15] layout(constant_id=1) const float _5 = 1; 
[   0.743][d][vo/gpu-next/libplacebo] [ 16] layout(constant_id=2) const float _6 = 1; 
[   0.743][d][vo/gpu-next/libplacebo] [ 17] layout(constant_id=3) const float _9 = 1; 
[   0.743][d][vo/gpu-next/libplacebo] [ 18] layout(constant_id=4) const float _a = 1; 
[   0.743][d][vo/gpu-next/libplacebo] [ 19] layout(binding=0) uniform  sampler2D _2;
[   0.743][d][vo/gpu-next/libplacebo] [ 20] layout(location=0) in vec2 _3;
[   0.743][d][vo/gpu-next/libplacebo] [ 21] layout(location=0) out vec4 out_color;
[   0.743][d][vo/gpu-next/libplacebo] [ 22] 
[   0.743][d][vo/gpu-next/libplacebo] [ 23] vec4 _1() {
[   0.743][d][vo/gpu-next/libplacebo] [ 24] // pl_shader_sample_direct                            
[   0.743][d][vo/gpu-next/libplacebo] [ 25] vec4 color = vec4(_4) * textureLod(_2, _3, 0.0);   
[   0.743][d][vo/gpu-next/libplacebo] [ 26] // pl_shader_color_map 
[   0.743][d][vo/gpu-next/libplacebo] [ 27] {                      
[   0.743][d][vo/gpu-next/libplacebo] [ 28] // pl_shader_linearize           
[   0.743][d][vo/gpu-next/libplacebo] [ 29] color.rgb = max(color.rgb, 0.0); 
[   0.743][d][vo/gpu-next/libplacebo] [ 30] color.rgb = _6 * pow(color.rgb + vec3(_5), vec3(2.4)); 
[   0.743][d][vo/gpu-next/libplacebo] [ 31] // pl_shader_delinearize 
[   0.743][d][vo/gpu-next/libplacebo] [ 32] color.rgb = _a * color.rgb + vec3(_9); 
[   0.743][d][vo/gpu-next/libplacebo] [ 33] color.rgb = max(color.rgb, 0.0); 
[   0.743][d][vo/gpu-next/libplacebo] [ 34] color.rgb = pow(color.rgb, vec3(1.0/2.2));
[   0.743][d][vo/gpu-next/libplacebo] [ 35] }
[   0.743][d][vo/gpu-next/libplacebo] [ 36] return color;
[   0.743][d][vo/gpu-next/libplacebo] [ 37] }
[   0.743][d][vo/gpu-next/libplacebo] [ 38] 
[   0.743][d][vo/gpu-next/libplacebo] [ 39] void main() {
[   0.743][d][vo/gpu-next/libplacebo] [ 40] out_color = _1();
[   0.743][d][vo/gpu-next/libplacebo] [ 41] }
[   0.743][d][vo/gpu-next/libplacebo] Specialization constant values:
[   0.743][d][vo/gpu-next/libplacebo]   constant_id=0: 1.000000
[   0.743][d][vo/gpu-next/libplacebo]   constant_id=1: 0.059585
[   0.743][d][vo/gpu-next/libplacebo]   constant_id=2: 0.870311
[   0.743][d][vo/gpu-next/libplacebo]   constant_id=3: -0.001001
[   0.743][d][vo/gpu-next/libplacebo]   constant_id=4: 1.001001
[   0.743][d][vo/gpu-next] cache_load_obj: key(d402757f5e6fc945), size(748), load time(0.015 ms)
[   0.743][d][vo/gpu-next/libplacebo] Re-using cached SPIR-V object 0xd402757f5e6fc945
[   0.743][d][vo/gpu-next] cache_load_obj: key(98ab408c28cf0fe2), size(1892), load time(0.008 ms)
[   0.743][d][vo/gpu-next/libplacebo] Re-using cached SPIR-V object 0x98ab408c28cf0fe2
[   0.743][d][vo/gpu-next] cache_load_obj: key(326f402647b0ae5e), size(14158), load time(0.016 ms)
[   0.743][d][vo/gpu-next/libplacebo] Spent 0.004 ms compiling shader
[   0.743][d][vo/gpu-next] cache_save_obj: key(d402757f5e6fc945), size(748)
[   0.743][d][vo/gpu-next] cache_save_obj: key(98ab408c28cf0fe2), size(1892)
[   0.743][d][vo/gpu-next/libplacebo] Spent 0.060 ms creating pipeline
[   0.743][d][vo/gpu-next] cache_save_obj: key(326f402647b0ae5e), size(14158)
[   0.743][d][vo/gpu-next/libplacebo] Pass statistics: size 0, SPIR-V: vert 0 frag 0 comp 0
[   0.743][d][vo/gpu-next] cache_load_obj: key(d95b62e641a2e006), size(16384), load time(0.017 ms)
[   0.743][d][vo/gpu-next/libplacebo] Re-using cached LUT (0xd95b62e641a2e006) with size 16384
[   0.743][d][vo/gpu-next/libplacebo] Allocating 262144 memory of type 0x1 (id 1) in heap 0: ../src/utils/upload.c:245
[   0.743][d][vo/gpu-next/libplacebo] Spent 0.128 ms allocating slab
[   0.743][d][vo/gpu-next/libplacebo] Allocating 258048 memory of type 0x7 (id 5) in heap 2: ../src/gpu/utils.c:575
[   0.743][d][vo/gpu-next/libplacebo] Spent 0.107 ms allocating slab
[   0.743][d][vo/gpu-next] cache_save_obj: key(d95b62e641a2e006), size(16384)
[   0.743][v][vo/gpu-next/libplacebo] Dithering to 8 bit depth
[   0.743][d][vo/gpu-next/libplacebo] vertex shader source:
[   0.743][d][vo/gpu-next/libplacebo] [  1] #version 450
[   0.743][d][vo/gpu-next/libplacebo] [  2] #extension GL_KHR_shader_subgroup_basic : enable 
[   0.743][d][vo/gpu-next/libplacebo] [  3] #extension GL_KHR_shader_subgroup_vote : enable 
[   0.743][d][vo/gpu-next/libplacebo] [  4] #extension GL_KHR_shader_subgroup_arithmetic : enable 
[   0.743][d][vo/gpu-next/libplacebo] [  5] #extension GL_KHR_shader_subgroup_ballot : enable 
[   0.743][d][vo/gpu-next/libplacebo] [  6] #extension GL_KHR_shader_subgroup_shuffle : enable 
[   0.743][d][vo/gpu-next/libplacebo] [  7] #extension GL_KHR_shader_subgroup_clustered : enable 
[   0.743][d][vo/gpu-next/libplacebo] [  8] #extension GL_KHR_shader_subgroup_quad : enable 
[   0.743][d][vo/gpu-next/libplacebo] [  9] #extension GL_ARB_texture_gather : enable
[   0.743][d][vo/gpu-next/libplacebo] [ 10] layout(std430, push_constant) uniform PushC {
[   0.743][d][vo/gpu-next/libplacebo] [ 11]     layout(offset=0) float _4;
[   0.743][d][vo/gpu-next/libplacebo] [ 12] };
[   0.743][d][vo/gpu-next/libplacebo] [ 13] layout(constant_id=0) const float _7 = 1; 
[   0.743][d][vo/gpu-next/libplacebo] [ 14] layout(constant_id=1) const float _8 = 1; 
[   0.743][d][vo/gpu-next/libplacebo] [ 15] layout(constant_id=2) const float _9 = 1; 
[   0.743][d][vo/gpu-next/libplacebo] [ 16] layout(binding=0) uniform  sampler2D _2;
[   0.743][d][vo/gpu-next/libplacebo] [ 17] layout(binding=1) uniform  sampler2D _6;
[   0.743][d][vo/gpu-next/libplacebo] [ 18] layout(location=0) in vec2 _d;
[   0.743][d][vo/gpu-next/libplacebo] [ 19] layout(location=0) out vec2 _3;
[   0.743][d][vo/gpu-next/libplacebo] [ 20] layout(location=1) in vec2 _e;
[   0.743][d][vo/gpu-next/libplacebo] [ 21] void main() {
[   0.743][d][vo/gpu-next/libplacebo] [ 22] _3 = _d;
[   0.743][d][vo/gpu-next/libplacebo] [ 23] vec2 va_pos = _e; 
[   0.743][d][vo/gpu-next/libplacebo] [ 24] gl_Position = vec4(va_pos, 0.0, 1.0); 
[   0.743][d][vo/gpu-next/libplacebo] [ 25] }
[   0.743][d][vo/gpu-next/libplacebo] fragment shader source:
[   0.743][d][vo/gpu-next/libplacebo] [  1] #version 450
[   0.743][d][vo/gpu-next/libplacebo] [  2] #extension GL_KHR_shader_subgroup_basic : enable 
[   0.743][d][vo/gpu-next/libplacebo] [  3] #extension GL_KHR_shader_subgroup_vote : enable 
[   0.743][d][vo/gpu-next/libplacebo] [  4] #extension GL_KHR_shader_subgroup_arithmetic : enable 
[   0.743][d][vo/gpu-next/libplacebo] [  5] #extension GL_KHR_shader_subgroup_ballot : enable 
[   0.743][d][vo/gpu-next/libplacebo] [  6] #extension GL_KHR_shader_subgroup_shuffle : enable 
[   0.743][d][vo/gpu-next/libplacebo] [  7] #extension GL_KHR_shader_subgroup_clustered : enable 
[   0.743][d][vo/gpu-next/libplacebo] [  8] #extension GL_KHR_shader_subgroup_quad : enable 
[   0.743][d][vo/gpu-next/libplacebo] [  9] #extension GL_ARB_texture_gather : enable
[   0.743][d][vo/gpu-next/libplacebo] [ 10] layout(std430, push_constant) uniform PushC {
[   0.743][d][vo/gpu-next/libplacebo] [ 11]     layout(offset=0) float _4;
[   0.743][d][vo/gpu-next/libplacebo] [ 12] };
[   0.743][d][vo/gpu-next/libplacebo] [ 13] layout(constant_id=0) const float _7 = 1; 
[   0.743][d][vo/gpu-next/libplacebo] [ 14] layout(constant_id=1) const float _8 = 1; 
[   0.743][d][vo/gpu-next/libplacebo] [ 15] layout(constant_id=2) const float _9 = 1; 
[   0.743][d][vo/gpu-next/libplacebo] [ 16] layout(binding=0) uniform  sampler2D _2;
[   0.743][d][vo/gpu-next/libplacebo] [ 17] layout(binding=1) uniform  sampler2D _6;
[   0.743][d][vo/gpu-next/libplacebo] [ 18] layout(location=0) in vec2 _3;
[   0.743][d][vo/gpu-next/libplacebo] [ 19] layout(location=0) out vec4 out_color;
[   0.743][d][vo/gpu-next/libplacebo] [ 20] 
[   0.743][d][vo/gpu-next/libplacebo] [ 21] #define _5(pos) (texelFetch(_6, ivec2(pos), 0).x)
[   0.743][d][vo/gpu-next/libplacebo] [ 22] vec4 _1() {
[   0.743][d][vo/gpu-next/libplacebo] [ 23] vec4 color;                   
[   0.743][d][vo/gpu-next/libplacebo] [ 24] // pl_render_image_mix        
[   0.743][d][vo/gpu-next/libplacebo] [ 25] {                             
[   0.743][d][vo/gpu-next/libplacebo] [ 26] vec4 mix_color = vec4(0.0);   
[   0.743][d][vo/gpu-next/libplacebo] [ 27] color = textureLod(_2, _3, 0.0); 
[   0.743][d][vo/gpu-next/libplacebo] [ 28] mix_color += vec4(_4) * color; 
[   0.743][d][vo/gpu-next/libplacebo] [ 29] color = mix_color; 
[   0.743][d][vo/gpu-next/libplacebo] [ 30] }                  
[   0.743][d][vo/gpu-next/libplacebo] [ 31] // pl_shader_encode_color 
[   0.743][d][vo/gpu-next/libplacebo] [ 32] { 
[   0.743][d][vo/gpu-next/libplacebo] [ 33] color.rgb *= vec3(color.a); 
[   0.743][d][vo/gpu-next/libplacebo] [ 34] }
[   0.743][d][vo/gpu-next/libplacebo] [ 35] // pl_shader_dither 
[   0.743][d][vo/gpu-next/libplacebo] [ 36] {                    
[   0.743][d][vo/gpu-next/libplacebo] [ 37] float bias;          
[   0.743][d][vo/gpu-next/libplacebo] [ 38] vec2 pos = fract(gl_FragCoord.xy * 1.0/_7); 
[   0.743][d][vo/gpu-next/libplacebo] [ 39] bias = _5(ivec2(pos * _8));
[   0.743][d][vo/gpu-next/libplacebo] [ 40] const float scale = 255.0; 
[   0.743][d][vo/gpu-next/libplacebo] [ 41] color = scale * color + vec4(bias);   
[   0.743][d][vo/gpu-next/libplacebo] [ 42] color = floor(color) * (1.0 / scale); 
[   0.743][d][vo/gpu-next/libplacebo] [ 43] } 
[   0.743][d][vo/gpu-next/libplacebo] [ 44] color *= vec4(1.0 / _9); 
[   0.743][d][vo/gpu-next/libplacebo] [ 45] vec4 _a = color;                 
[   0.743][d][vo/gpu-next/libplacebo] [ 46] color = vec4(0.0, 0.0, 0.0, 1.0); 
[   0.743][d][vo/gpu-next/libplacebo] [ 47] color[0] = _a[0]; 
[   0.743][d][vo/gpu-next/libplacebo] [ 48] color[1] = _a[1]; 
[   0.743][d][vo/gpu-next/libplacebo] [ 49] color[2] = _a[2]; 
[   0.743][d][vo/gpu-next/libplacebo] [ 50] color[3] = _a[3]; 
[   0.743][d][vo/gpu-next/libplacebo] [ 51] return color;
[   0.743][d][vo/gpu-next/libplacebo] [ 52] }
[   0.743][d][vo/gpu-next/libplacebo] [ 53] 
[   0.743][d][vo/gpu-next/libplacebo] [ 54] void main() {
[   0.743][d][vo/gpu-next/libplacebo] [ 55] out_color = _1();
[   0.743][d][vo/gpu-next/libplacebo] [ 56] }
[   0.743][d][vo/gpu-next/libplacebo] Specialization constant values:
[   0.743][d][vo/gpu-next/libplacebo]   constant_id=0: 64.000000
[   0.743][d][vo/gpu-next/libplacebo]   constant_id=1: 64.000000
[   0.743][d][vo/gpu-next/libplacebo]   constant_id=2: 1.000000
[   0.743][d][vo/gpu-next] cache_load_obj: key(65dadd290f120522), size(748), load time(0.015 ms)
[   0.743][d][vo/gpu-next/libplacebo] Re-using cached SPIR-V object 0x65dadd290f120522
[   0.743][d][vo/gpu-next] cache_load_obj: key(c7633cfbe27ef2a0), size(1648), load time(0.007 ms)
[   0.743][d][vo/gpu-next/libplacebo] Re-using cached SPIR-V object 0xc7633cfbe27ef2a0
[   0.743][d][vo/gpu-next] cache_load_obj: key(74563ba14bc2a057), size(14258), load time(0.016 ms)
[   0.743][d][vo/gpu-next/libplacebo] Spent 0.004 ms compiling shader
[   0.743][d][vo/gpu-next] cache_save_obj: key(65dadd290f120522), size(748)
[   0.743][d][vo/gpu-next] cache_save_obj: key(c7633cfbe27ef2a0), size(1648)
[   0.743][d][vo/gpu-next/libplacebo] Spent 0.081 ms creating pipeline
[   0.743][d][vo/gpu-next] cache_save_obj: key(74563ba14bc2a057), size(14258)
[   0.743][d][vo/gpu-next/libplacebo] Pass statistics: size 0, SPIR-V: vert 0 frag 0 comp 0
[   0.745][v][vo/gpu-next/wayland] Resizing due to xdg from 1280x720 to 1280x720
[   0.745][v][vo/gpu-next/wayland] Surface entered output EDR EGM24F100H (0x3a), scale = 1.000000, refresh rate = 100.000000 Hz
[   0.745][v][vo/gpu-next/wayland] DND action is DND_APPEND
[   0.745][v][vo/gpu-next/wayland] Given data offer with mime type text/plain
[   0.745][v][vo/gpu-next/wayland] Given data offer with mime type text/plain;charset=utf-8
[   0.745][v][vo/gpu-next/wayland] Resizing due to xdg from 1280x720 to 1280x720
[   0.745][v][vo/gpu-next/wayland] Resizing due to xdg from 1280x720 to 1920x1080
[   0.745][v][cplayer] first video frame after restart shown
[   0.745][v][vo/gpu-next] Window size: 1280x720 (Borders: l=0 t=0 r=0 b=0)
[   0.745][v][vo/gpu-next] Video source: 1280x720 (4096:4095)
[   0.745][v][vo/gpu-next] Video display: (0, 0) 1280x720 -> (0, 0) 1280x720
[   0.745][v][vo/gpu-next] Video scale: 1.000000/1.000000
[   0.745][v][vo/gpu-next] OSD borders: l=0 t=0 r=0 b=0
[   0.745][v][vo/gpu-next] Video borders: l=0 t=0 r=0 b=0
[   0.745][v][vo/gpu-next/wayland] Handling resize on the vk side
[   0.745][d][vo/gpu-next/libplacebo] Requested alpha compositing mode: VK_COMPOSITE_ALPHA_PRE_MULTIPLIED_BIT_KHR
[   0.745][d][vo/gpu-next/libplacebo] Requested surface transform: VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR
[   0.745][d][vo/gpu-next/libplacebo] Requested image count: 4 (min 2 max 8)
[   0.745][d][vo/gpu-next/libplacebo] Requested image size: 1920x1080 (min 1x1 < cur -1x-1 < max 16384x16384)
[   0.745][d][vo/gpu-next/libplacebo] (Re)creating swapchain of size 1920x1080
[   0.746][v][auto_profiles] Re-evaluating auto profile pgs-fix
[   0.746][v][auto_profiles] Re-evaluating auto profile fps-fix
[   0.746][d][cplayer] Run command: define-section, flags=64, args=[name="input_simplehistory", contents="", flags="default"]
[   0.746][d][cplayer] Run command: enable-section, flags=64, args=[name="input_simplehistory", flags="allow-hide-cursor+allow-vo-dragging"]
[   0.746][v][auto_profiles] Re-evaluating auto profile SDR-Gamut
[   0.746][v][auto_profiles] Re-evaluating auto profile Deband
[   0.746][i][auto_profiles] Applying auto profile: Deband
[   0.746][d][cplayer] Run command: define-section, flags=64, args=[name="input_forced_smartcopypaste_II", contents="", flags="force"]
[   0.746][d][cplayer] Run command: enable-section, flags=64, args=[name="input_forced_smartcopypaste_II", flags="allow-hide-cursor+allow-vo-dragging"]
[   0.746][d][cplayer] Run command: apply-profile, flags=64, args=[name="Deband", mode="apply"]
[   0.746][v][cplayer] Applying profile 'Deband'...
[   0.746][v][cplayer] Setting option 'deband' = 'yes' (flags = 4)
[   0.746][d][cplayer] Run command: define-section, flags=64, args=[name="input_forced_simplehistory", contents="", flags="force"]
[   0.746][d][cplayer] Run command: script-message, flags=64, args=[args="thumbfast-info", args="{\"disabled\":false,\"height\":200,\"overlay_id\":42,\"available\":true,\"socket\":\"/tmp/thumbfast15836\",\"thumbnail\":\"/tmp/thumbfast.out15836\",\"width\":200}"]
[   0.746][d][cplayer] Run command: enable-section, flags=64, args=[name="input_forced_simplehistory", flags="allow-hide-cursor+allow-vo-dragging"]
[   0.746][d][cplayer] Run command: script-message, flags=64, args=[args="thumbfast-info", args="{\"disabled\":false,\"height\":113,\"overlay_id\":42,\"available\":true,\"socket\":\"/tmp/thumbfast15836\",\"thumbnail\":\"/tmp/thumbfast.out15836\",\"width\":200}"]
[   0.750][v][vo/gpu-next] Window size: 1920x1080 (Borders: l=0 t=0 r=0 b=0)
[   0.750][v][vo/gpu-next] Video source: 1280x720 (4096:4095)
[   0.750][v][vo/gpu-next] Video display: (0, 0) 1280x720 -> (0, 0) 1920x1080
[   0.750][v][vo/gpu-next] Video scale: 1.500000/1.500000
[   0.750][v][vo/gpu-next] OSD borders: l=0 t=0 r=0 b=0
[   0.750][v][vo/gpu-next] Video borders: l=0 t=0 r=0 b=0
[   0.750][d][vo/gpu-next] Render options updated, resetting render state.
[   0.750][d][vo/gpu-next/libplacebo] Freeing slab of size 7680K
[   0.751][d][vo/gpu-next/libplacebo] First frame received with non-zero PTS 0.021333
[   0.751][d][vo/gpu-next/libplacebo] (Re)creating 1280x720x0 texture with format r8: ../src/utils/upload.c:245
[   0.751][d][vo/gpu-next/libplacebo] (Re)creating 640x360x0 texture with format r8: ../src/utils/upload.c:245
[   0.751][d][vo/gpu-next/libplacebo] (Re)creating 640x360x0 texture with format r8: ../src/utils/upload.c:245
[   0.751][d][vo/gpu-next/libplacebo] (Re)creating 1280x720x0 texture with format r8: ../src/utils/upload.c:245
[   0.751][d][vo/gpu-next/libplacebo] (Re)creating 640x360x0 texture with format r8: ../src/utils/upload.c:245
[   0.751][d][vo/gpu-next/libplacebo] (Re)creating 640x360x0 texture with format r8: ../src/utils/upload.c:245
[   0.751][d][vo/gpu-next/libplacebo] (Re)creating 1920x1080x0 texture with format rgba16hf: src/renderer.c:3491
[   0.751][d][vo/gpu-next/libplacebo] Allocating 17694720 memory of type 0x1 (id 1) in heap 0: src/renderer.c:3491
[   0.751][d][vo/gpu-next/libplacebo] Spent 0.108 ms allocating slab
[   0.752][d][vo/gpu-next/libplacebo] (Re)creating 1280x720x0 texture with format r16hf: src/renderer.c:1065
[   0.752][d][vo/gpu-next/libplacebo] Freeing slab of size 7680K
[   0.752][d][vo/gpu-next/libplacebo] vertex shader source:
[   0.752][d][vo/gpu-next/libplacebo] [  1] #version 450
[   0.752][d][vo/gpu-next/libplacebo] [  2] #extension GL_KHR_shader_subgroup_basic : enable 
[   0.752][d][vo/gpu-next/libplacebo] [  3] #extension GL_KHR_shader_subgroup_vote : enable 
[   0.752][d][vo/gpu-next/libplacebo] [  4] #extension GL_KHR_shader_subgroup_arithmetic : enable 
[   0.752][d][vo/gpu-next/libplacebo] [  5] #extension GL_KHR_shader_subgroup_ballot : enable 
[   0.752][d][vo/gpu-next/libplacebo] [  6] #extension GL_KHR_shader_subgroup_shuffle : enable 
[   0.752][d][vo/gpu-next/libplacebo] [  7] #extension GL_KHR_shader_subgroup_clustered : enable 
[   0.752][d][vo/gpu-next/libplacebo] [  8] #extension GL_KHR_shader_subgroup_quad : enable 
[   0.752][d][vo/gpu-next/libplacebo] [  9] #extension GL_ARB_texture_gather : enable
[   0.752][d][vo/gpu-next/libplacebo] [ 10] layout(std430, push_constant) uniform PushC {
[   0.752][d][vo/gpu-next/libplacebo] [ 11]     layout(offset=0) vec2 _4004;
[   0.752][d][vo/gpu-next/libplacebo] [ 12]     layout(offset=8) uint _4007;
[   0.752][d][vo/gpu-next/libplacebo] [ 13] };
[   0.752][d][vo/gpu-next/libplacebo] [ 14] layout(constant_id=0) const float _4009 = 1; 
[   0.752][d][vo/gpu-next/libplacebo] [ 15] layout(constant_id=1) const float _400a = 1; 
[   0.752][d][vo/gpu-next/libplacebo] [ 16] layout(constant_id=2) const float _400b = 1; 
[   0.752][d][vo/gpu-next/libplacebo] [ 17] layout(constant_id=3) const float _400c = 1; 
[   0.752][d][vo/gpu-next/libplacebo] [ 18] layout(constant_id=4) const float _400d = 1; 
[   0.752][d][vo/gpu-next/libplacebo] [ 19] layout(binding=0) uniform  sampler2D _4002;
[   0.752][d][vo/gpu-next/libplacebo] [ 20] layout(location=0) in vec2 _4010;
[   0.752][d][vo/gpu-next/libplacebo] [ 21] layout(location=0) out vec2 _4003;
[   0.752][d][vo/gpu-next/libplacebo] [ 22] layout(location=1) in vec2 _4011;
[   0.752][d][vo/gpu-next/libplacebo] [ 23] void main() {
[   0.752][d][vo/gpu-next/libplacebo] [ 24] _4003 = _4010;
[   0.752][d][vo/gpu-next/libplacebo] [ 25] vec2 va_pos = _4011; 
[   0.752][d][vo/gpu-next/libplacebo] [ 26] gl_Position = vec4(va_pos, 0.0, 1.0); 
[   0.752][d][vo/gpu-next/libplacebo] [ 27] }
[   0.752][d][vo/gpu-next/libplacebo] fragment shader source:
[   0.752][d][vo/gpu-next/libplacebo] [  1] #version 450
[   0.752][d][vo/gpu-next/libplacebo] [  2] #extension GL_KHR_shader_subgroup_basic : enable 
[   0.752][d][vo/gpu-next/libplacebo] [  3] #extension GL_KHR_shader_subgroup_vote : enable 
[   0.752][d][vo/gpu-next/libplacebo] [  4] #extension GL_KHR_shader_subgroup_arithmetic : enable 
[   0.752][d][vo/gpu-next/libplacebo] [  5] #extension GL_KHR_shader_subgroup_ballot : enable 
[   0.752][d][vo/gpu-next/libplacebo] [  6] #extension GL_KHR_shader_subgroup_shuffle : enable 
[   0.752][d][vo/gpu-next/libplacebo] [  7] #extension GL_KHR_shader_subgroup_clustered : enable 
[   0.752][d][vo/gpu-next/libplacebo] [  8] #extension GL_KHR_shader_subgroup_quad : enable 
[   0.752][d][vo/gpu-next/libplacebo] [  9] #extension GL_ARB_texture_gather : enable
[   0.752][d][vo/gpu-next/libplacebo] [ 10] layout(std430, push_constant) uniform PushC {
[   0.752][d][vo/gpu-next/libplacebo] [ 11]     layout(offset=0) vec2 _4004;
[   0.752][d][vo/gpu-next/libplacebo] [ 12]     layout(offset=8) uint _4007;
[   0.752][d][vo/gpu-next/libplacebo] [ 13] };
[   0.752][d][vo/gpu-next/libplacebo] [ 14] layout(constant_id=0) const float _4009 = 1; 
[   0.752][d][vo/gpu-next/libplacebo] [ 15] layout(constant_id=1) const float _400a = 1; 
[   0.752][d][vo/gpu-next/libplacebo] [ 16] layout(constant_id=2) const float _400b = 1; 
[   0.752][d][vo/gpu-next/libplacebo] [ 17] layout(constant_id=3) const float _400c = 1; 
[   0.752][d][vo/gpu-next/libplacebo] [ 18] layout(constant_id=4) const float _400d = 1; 
[   0.752][d][vo/gpu-next/libplacebo] [ 19] layout(binding=0) uniform  sampler2D _4002;
[   0.752][d][vo/gpu-next/libplacebo] [ 20] layout(location=0) in vec2 _4003;
[   0.752][d][vo/gpu-next/libplacebo] [ 21] layout(location=0) out vec4 out_color;
[   0.752][d][vo/gpu-next/libplacebo] [ 22] #define prng_t uvec3
[   0.752][d][vo/gpu-next/libplacebo] [ 23] 
[   0.752][d][vo/gpu-next/libplacebo] [ 24] vec3 _4005(inout uvec3 s) {                    
[   0.752][d][vo/gpu-next/libplacebo] [ 25]     s = 1664525u * s + uvec3(1013904223u);   
[   0.752][d][vo/gpu-next/libplacebo] [ 26]     s.x += s.y * s.z;                        
[   0.752][d][vo/gpu-next/libplacebo] [ 27]     s.y += s.z * s.x;                        
[   0.752][d][vo/gpu-next/libplacebo] [ 28]     s.z += s.x * s.y;                        
[   0.752][d][vo/gpu-next/libplacebo] [ 29]     s ^= s >> 16u;                           
[   0.752][d][vo/gpu-next/libplacebo] [ 30]     s.x += s.y * s.z;                        
[   0.752][d][vo/gpu-next/libplacebo] [ 31]     s.y += s.z * s.x;                        
[   0.752][d][vo/gpu-next/libplacebo] [ 32]     s.z += s.x * s.y;                        
[   0.752][d][vo/gpu-next/libplacebo] [ 33]     return vec3(s) * 1.0/float(0xFFFFFFFFu); 
[   0.752][d][vo/gpu-next/libplacebo] [ 34] }                                            
[   0.752][d][vo/gpu-next/libplacebo] [ 35] #define _4008 (_4005(_4006))
[   0.752][d][vo/gpu-next/libplacebo] [ 36] vec4 _4001() {
[   0.752][d][vo/gpu-next/libplacebo] [ 37] vec4 color;                       
[   0.752][d][vo/gpu-next/libplacebo] [ 38] // pl_shader_deband               
[   0.752][d][vo/gpu-next/libplacebo] [ 39] {                                 
[   0.752][d][vo/gpu-next/libplacebo] [ 40] vec2 pos = _4003, pt = _4004;         
[   0.752][d][vo/gpu-next/libplacebo] [ 41] color = textureLod(_4002, pos, 0.0);
[   0.752][d][vo/gpu-next/libplacebo] [ 42] #define GET(X, Y)                                   \
[   0.752][d][vo/gpu-next/libplacebo] [ 43]     (textureLod(_4002, pos + pt * vec2(X, Y), 0.0).r)  
[   0.752][d][vo/gpu-next/libplacebo] [ 44] #define T float                                          
[   0.752][d][vo/gpu-next/libplacebo] [ 45] uvec3 _4006 = uvec3(gl_FragCoord.xy, _4007); 
[   0.752][d][vo/gpu-next/libplacebo] [ 46] T avg, diff, bound;   
[   0.752][d][vo/gpu-next/libplacebo] [ 47] T res = color.r;     
[   0.752][d][vo/gpu-next/libplacebo] [ 48] vec2 d;               
[   0.752][d][vo/gpu-next/libplacebo] [ 49] d = _4008.xy * vec2(1.0 * _4009, 6.283185307179586);    
[   0.752][d][vo/gpu-next/libplacebo] [ 50] d = d.x * vec2(cos(d.y), sin(d.y));   
[   0.752][d][vo/gpu-next/libplacebo] [ 51] avg = T(0.0);                         
[   0.752][d][vo/gpu-next/libplacebo] [ 52] avg += GET(+d.x, +d.y);               
[   0.752][d][vo/gpu-next/libplacebo] [ 53] avg += GET(-d.x, +d.y);               
[   0.752][d][vo/gpu-next/libplacebo] [ 54] avg += GET(-d.x, -d.y);               
[   0.752][d][vo/gpu-next/libplacebo] [ 55] avg += GET(+d.x, -d.y);               
[   0.752][d][vo/gpu-next/libplacebo] [ 56] avg *= 0.25;                          
[   0.752][d][vo/gpu-next/libplacebo] [ 57] diff = abs(res - avg);                
[   0.752][d][vo/gpu-next/libplacebo] [ 58] bound = T(_400a / 1.0);                
[   0.752][d][vo/gpu-next/libplacebo] [ 59] res = mix(avg, res, diff > bound); 
[   0.752][d][vo/gpu-next/libplacebo] [ 60] bound = T(
[   0.752][d][vo/gpu-next/libplacebo] [ 61]  _400b);                                        
[   0.752][d][vo/gpu-next/libplacebo] [ 62] T strength = min(abs(res - bound), _400c);  
[   0.752][d][vo/gpu-next/libplacebo] [ 63] res += strength * (T(_4008) - T(0.5));      
[   0.752][d][vo/gpu-next/libplacebo] [ 64] color.r = res;   
[   0.752][d][vo/gpu-next/libplacebo] [ 65] color *= _400d;     
[   0.752][d][vo/gpu-next/libplacebo] [ 66] #undef T          
[   0.752][d][vo/gpu-next/libplacebo] [ 67] #undef GET        
[   0.752][d][vo/gpu-next/libplacebo] [ 68] }                 
[   0.752][d][vo/gpu-next/libplacebo] [ 69] return color;
[   0.752][d][vo/gpu-next/libplacebo] [ 70] }
[   0.752][d][vo/gpu-next/libplacebo] [ 71] 
[   0.752][d][vo/gpu-next/libplacebo] [ 72] void main() {
[   0.752][d][vo/gpu-next/libplacebo] [ 73] out_color = _4001();
[   0.752][d][vo/gpu-next/libplacebo] [ 74] }
[   0.752][d][vo/gpu-next/libplacebo] Specialization constant values:
[   0.752][d][vo/gpu-next/libplacebo]   constant_id=0: 16.000000
[   0.752][d][vo/gpu-next/libplacebo]   constant_id=1: 0.002930
[   0.752][d][vo/gpu-next/libplacebo]   constant_id=2: 0.062745
[   0.752][d][vo/gpu-next/libplacebo]   constant_id=3: 0.001953
[   0.752][d][vo/gpu-next/libplacebo]   constant_id=4: 1.000000
[   0.752][d][vo/gpu-next] cache_load_obj: key(e6c7f7c4df5215e8), size(748), load time(0.037 ms)
[   0.752][d][vo/gpu-next/libplacebo] Re-using cached SPIR-V object 0xe6c7f7c4df5215e8
[   0.752][d][vo/gpu-next] cache_load_obj: key(a8e92110f18ecc13), size(3516), load time(0.015 ms)
[   0.752][d][vo/gpu-next/libplacebo] Re-using cached SPIR-V object 0xa8e92110f18ecc13
[   0.752][d][vo/gpu-next] cache_load_obj: key(229ec889d2289710), size(23199), load time(0.026 ms)
[   0.752][d][vo/gpu-next/libplacebo] Spent 0.006 ms compiling shader
[   0.752][d][vo/gpu-next] cache_save_obj: key(e6c7f7c4df5215e8), size(748)
[   0.752][d][vo/gpu-next] cache_save_obj: key(a8e92110f18ecc13), size(3516)
[   0.752][d][vo/gpu-next/libplacebo] Spent 0.110 ms creating pipeline
[   0.752][d][vo/gpu-next] cache_save_obj: key(229ec889d2289710), size(23199)
[   0.752][d][vo/gpu-next/libplacebo] Pass statistics: size 0, SPIR-V: vert 0 frag 0 comp 0
[   0.752][d][vo/gpu-next/libplacebo] (Re)creating 640x360x0 texture with format rg16hf: src/renderer.c:1065
[   0.752][d][vo/gpu-next/libplacebo] vertex shader source:
[   0.752][d][vo/gpu-next/libplacebo] [  1] #version 450
[   0.752][d][vo/gpu-next/libplacebo] [  2] #extension GL_KHR_shader_subgroup_basic : enable 
[   0.752][d][vo/gpu-next/libplacebo] [  3] #extension GL_KHR_shader_subgroup_vote : enable 
[   0.752][d][vo/gpu-next/libplacebo] [  4] #extension GL_KHR_shader_subgroup_arithmetic : enable 
[   0.752][d][vo/gpu-next/libplacebo] [  5] #extension GL_KHR_shader_subgroup_ballot : enable 
[   0.752][d][vo/gpu-next/libplacebo] [  6] #extension GL_KHR_shader_subgroup_shuffle : enable 
[   0.752][d][vo/gpu-next/libplacebo] [  7] #extension GL_KHR_shader_subgroup_clustered : enable 
[   0.752][d][vo/gpu-next/libplacebo] [  8] #extension GL_KHR_shader_subgroup_quad : enable 
[   0.752][d][vo/gpu-next/libplacebo] [  9] #extension GL_ARB_texture_gather : enable
[   0.752][d][vo/gpu-next/libplacebo] [ 10] layout(std430, push_constant) uniform PushC {
[   0.752][d][vo/gpu-next/libplacebo] [ 11]     layout(offset=0) vec2 _c004;
[   0.752][d][vo/gpu-next/libplacebo] [ 12]     layout(offset=8) uint _c007;
[   0.752][d][vo/gpu-next/libplacebo] [ 13] };
[   0.752][d][vo/gpu-next/libplacebo] [ 14] layout(constant_id=0) const float _c009 = 1; 
[   0.752][d][vo/gpu-next/libplacebo] [ 15] layout(constant_id=1) const float _c00a = 1; 
[   0.752][d][vo/gpu-next/libplacebo] [ 16] layout(constant_id=2) const float _c00b = 1; 
[   0.752][d][vo/gpu-next/libplacebo] [ 17] layout(constant_id=3) const float _c00c = 1; 
[   0.752][d][vo/gpu-next/libplacebo] [ 18] layout(constant_id=4) const float _c00d = 1; 
[   0.752][d][vo/gpu-next/libplacebo] [ 19] layout(constant_id=5) const float _c00e = 1; 
[   0.752][d][vo/gpu-next/libplacebo] [ 20] layout(binding=0) uniform  sampler2D _c002;
[   0.752][d][vo/gpu-next/libplacebo] [ 21] layout(location=0) in vec2 _c011;
[   0.752][d][vo/gpu-next/libplacebo] [ 22] layout(location=0) out vec2 _c003;
[   0.752][d][vo/gpu-next/libplacebo] [ 23] layout(location=1) in vec2 _c012;
[   0.752][d][vo/gpu-next/libplacebo] [ 24] void main() {
[   0.752][d][vo/gpu-next/libplacebo] [ 25] _c003 = _c011;
[   0.752][d][vo/gpu-next/libplacebo] [ 26] vec2 va_pos = _c012; 
[   0.752][d][vo/gpu-next/libplacebo] [ 27] gl_Position = vec4(va_pos, 0.0, 1.0); 
[   0.752][d][vo/gpu-next/libplacebo] [ 28] }
[   0.752][d][vo/gpu-next/libplacebo] fragment shader source:
[   0.752][d][vo/gpu-next/libplacebo] [  1] #version 450
[   0.752][d][vo/gpu-next/libplacebo] [  2] #extension GL_KHR_shader_subgroup_basic : enable 
[   0.752][d][vo/gpu-next/libplacebo] [  3] #extension GL_KHR_shader_subgroup_vote : enable 
[   0.752][d][vo/gpu-next/libplacebo] [  4] #extension GL_KHR_shader_subgroup_arithmetic : enable 
[   0.752][d][vo/gpu-next/libplacebo] [  5] #extension GL_KHR_shader_subgroup_ballot : enable 
[   0.752][d][vo/gpu-next/libplacebo] [  6] #extension GL_KHR_shader_subgroup_shuffle : enable 
[   0.752][d][vo/gpu-next/libplacebo] [  7] #extension GL_KHR_shader_subgroup_clustered : enable 
[   0.752][d][vo/gpu-next/libplacebo] [  8] #extension GL_KHR_shader_subgroup_quad : enable 
[   0.752][d][vo/gpu-next/libplacebo] [  9] #extension GL_ARB_texture_gather : enable
[   0.752][d][vo/gpu-next/libplacebo] [ 10] layout(std430, push_constant) uniform PushC {
[   0.752][d][vo/gpu-next/libplacebo] [ 11]     layout(offset=0) vec2 _c004;
[   0.752][d][vo/gpu-next/libplacebo] [ 12]     layout(offset=8) uint _c007;
[   0.752][d][vo/gpu-next/libplacebo] [ 13] };
[   0.752][d][vo/gpu-next/libplacebo] [ 14] layout(constant_id=0) const float _c009 = 1; 
[   0.752][d][vo/gpu-next/libplacebo] [ 15] layout(constant_id=1) const float _c00a = 1; 
[   0.752][d][vo/gpu-next/libplacebo] [ 16] layout(constant_id=2) const float _c00b = 1; 
[   0.752][d][vo/gpu-next/libplacebo] [ 17] layout(constant_id=3) const float _c00c = 1; 
[   0.752][d][vo/gpu-next/libplacebo] [ 18] layout(constant_id=4) const float _c00d = 1; 
[   0.752][d][vo/gpu-next/libplacebo] [ 19] layout(constant_id=5) const float _c00e = 1; 
[   0.752][d][vo/gpu-next/libplacebo] [ 20] layout(binding=0) uniform  sampler2D _c002;
[   0.752][d][vo/gpu-next/libplacebo] [ 21] layout(location=0) in vec2 _c003;
[   0.752][d][vo/gpu-next/libplacebo] [ 22] layout(location=0) out vec4 out_color;
[   0.752][d][vo/gpu-next/libplacebo] [ 23] #define prng_t uvec3
[   0.752][d][vo/gpu-next/libplacebo] [ 24] 
[   0.752][d][vo/gpu-next/libplacebo] [ 25] vec3 _c005(inout uvec3 s) {                    
[   0.752][d][vo/gpu-next/libplacebo] [ 26]     s = 1664525u * s + uvec3(1013904223u);   
[   0.752][d][vo/gpu-next/libplacebo] [ 27]     s.x += s.y * s.z;                        
[   0.752][d][vo/gpu-next/libplacebo] [ 28]     s.y += s.z * s.x;                        
[   0.752][d][vo/gpu-next/libplacebo] [ 29]     s.z += s.x * s.y;                        
[   0.752][d][vo/gpu-next/libplacebo] [ 30]     s ^= s >> 16u;                           
[   0.752][d][vo/gpu-next/libplacebo] [ 31]     s.x += s.y * s.z;                        
[   0.752][d][vo/gpu-next/libplacebo] [ 32]     s.y += s.z * s.x;                        
[   0.752][d][vo/gpu-next/libplacebo] [ 33]     s.z += s.x * s.y;                        
[   0.752][d][vo/gpu-next/libplacebo] [ 34]     return vec3(s) * 1.0/float(0xFFFFFFFFu); 
[   0.752][d][vo/gpu-next/libplacebo] [ 35] }                                            
[   0.752][d][vo/gpu-next/libplacebo] [ 36] #define _c008 (_c005(_c006))
[   0.752][d][vo/gpu-next/libplacebo] [ 37] vec4 _c001() {
[   0.752][d][vo/gpu-next/libplacebo] [ 38] vec4 color;                       
[   0.752][d][vo/gpu-next/libplacebo] [ 39] // pl_shader_deband               
[   0.752][d][vo/gpu-next/libplacebo] [ 40] {                                 
[   0.752][d][vo/gpu-next/libplacebo] [ 41] vec2 pos = _c003, pt = _c004;         
[   0.752][d][vo/gpu-next/libplacebo] [ 42] color = textureLod(_c002, pos, 0.0);
[   0.752][d][vo/gpu-next/libplacebo] [ 43] #define GET(X, Y)                                   \
[   0.752][d][vo/gpu-next/libplacebo] [ 44]     (textureLod(_c002, pos + pt * vec2(X, Y), 0.0).rg)  
[   0.752][d][vo/gpu-next/libplacebo] [ 45] #define T vec2                                          
[   0.752][d][vo/gpu-next/libplacebo] [ 46] uvec3 _c006 = uvec3(gl_FragCoord.xy, _c007); 
[   0.752][d][vo/gpu-next/libplacebo] [ 47] T avg, diff, bound;   
[   0.752][d][vo/gpu-next/libplacebo] [ 48] T res = color.rg;     
[   0.752][d][vo/gpu-next/libplacebo] [ 49] vec2 d;               
[   0.752][d][vo/gpu-next/libplacebo] [ 50] d = _c008.xy * vec2(1.0 * _c009, 6.283185307179586);    
[   0.752][d][vo/gpu-next/libplacebo] [ 51] d = d.x * vec2(cos(d.y), sin(d.y));   
[   0.752][d][vo/gpu-next/libplacebo] [ 52] avg = T(0.0);                         
[   0.752][d][vo/gpu-next/libplacebo] [ 53] avg += GET(+d.x, +d.y);               
[   0.752][d][vo/gpu-next/libplacebo] [ 54] avg += GET(-d.x, +d.y);               
[   0.752][d][vo/gpu-next/libplacebo] [ 55] avg += GET(-d.x, -d.y);               
[   0.752][d][vo/gpu-next/libplacebo] [ 56] avg += GET(+d.x, -d.y);               
[   0.752][d][vo/gpu-next/libplacebo] [ 57] avg *= 0.25;                          
[   0.752][d][vo/gpu-next/libplacebo] [ 58] diff = abs(res - avg);                
[   0.752][d][vo/gpu-next/libplacebo] [ 59] bound = T(_c00a / 1.0);                
[   0.752][d][vo/gpu-next/libplacebo] [ 60] res = mix(avg, res, greaterThan(diff, bound)); 
[   0.752][d][vo/gpu-next/libplacebo] [ 61] bound = T(
[   0.752][d][vo/gpu-next/libplacebo] [ 62]  _c00b,_c00c);                                        
[   0.752][d][vo/gpu-next/libplacebo] [ 63] T strength = min(abs(res - bound), _c00d);  
[   0.752][d][vo/gpu-next/libplacebo] [ 64] res += strength * (T(_c008) - T(0.5));      
[   0.752][d][vo/gpu-next/libplacebo] [ 65] color.rg = res;   
[   0.752][d][vo/gpu-next/libplacebo] [ 66] color *= _c00e;     
[   0.752][d][vo/gpu-next/libplacebo] [ 67] #undef T          
[   0.752][d][vo/gpu-next/libplacebo] [ 68] #undef GET        
[   0.752][d][vo/gpu-next/libplacebo] [ 69] }                 
[   0.752][d][vo/gpu-next/libplacebo] [ 70] return color;
[   0.752][d][vo/gpu-next/libplacebo] [ 71] }
[   0.752][d][vo/gpu-next/libplacebo] [ 72] 
[   0.752][d][vo/gpu-next/libplacebo] [ 73] void main() {
[   0.752][d][vo/gpu-next/libplacebo] [ 74] out_color = _c001();
[   0.752][d][vo/gpu-next/libplacebo] [ 75] }
[   0.752][d][vo/gpu-next/libplacebo] Specialization constant values:
[   0.752][d][vo/gpu-next/libplacebo]   constant_id=0: 16.000000
[   0.752][d][vo/gpu-next/libplacebo]   constant_id=1: 0.002930
[   0.752][d][vo/gpu-next/libplacebo]   constant_id=2: 0.501961
[   0.752][d][vo/gpu-next/libplacebo]   constant_id=3: 0.501961
[   0.752][d][vo/gpu-next/libplacebo]   constant_id=4: 0.001953
[   0.752][d][vo/gpu-next/libplacebo]   constant_id=5: 1.000000
[   0.752][d][vo/gpu-next] cache_load_obj: key(677c2abab2ee0d2b), size(748), load time(0.016 ms)
[   0.752][d][vo/gpu-next/libplacebo] Re-using cached SPIR-V object 0x677c2abab2ee0d2b
[   0.752][d][vo/gpu-next] cache_load_obj: key(def1f1265a2ad7c7), size(3788), load time(0.009 ms)
[   0.752][d][vo/gpu-next/libplacebo] Re-using cached SPIR-V object 0xdef1f1265a2ad7c7
[   0.752][d][vo/gpu-next] cache_load_obj: key(d84bce95bf5e58a), size(15439), load time(0.015 ms)
[   0.752][d][vo/gpu-next/libplacebo] Spent 0.006 ms compiling shader
[   0.752][d][vo/gpu-next] cache_save_obj: key(677c2abab2ee0d2b), size(748)
[   0.752][d][vo/gpu-next] cache_save_obj: key(def1f1265a2ad7c7), size(3788)
[   0.752][d][vo/gpu-next/libplacebo] Spent 0.056 ms creating pipeline
[   0.752][d][vo/gpu-next] cache_save_obj: key(d84bce95bf5e58a), size(15439)
[   0.752][d][vo/gpu-next/libplacebo] Pass statistics: size 0, SPIR-V: vert 0 frag 0 comp 0
[   0.752][d][vo/gpu-next/libplacebo] (Re)creating 640x360x0 texture with format rgba16hf: src/renderer.c:1011
[   0.753][d][vo/gpu-next/libplacebo] Freeing slab of size 7680K
[   0.753][d][vo/gpu-next/libplacebo] (Re)creating 1280x720x0 texture with format rgba16hf: src/renderer.c:1065
[   0.753][d][vo/gpu-next/libplacebo] Allocating 7864320 memory of type 0x1 (id 1) in heap 0: src/renderer.c:1065
[   0.753][d][vo/gpu-next/libplacebo] Spent 0.057 ms allocating slab
[   0.753][d][vo/gpu-next/libplacebo] vertex shader source:
[   0.753][d][vo/gpu-next/libplacebo] [  1] #version 450
[   0.753][d][vo/gpu-next/libplacebo] [  2] #extension GL_KHR_shader_subgroup_basic : enable 
[   0.753][d][vo/gpu-next/libplacebo] [  3] #extension GL_KHR_shader_subgroup_vote : enable 
[   0.753][d][vo/gpu-next/libplacebo] [  4] #extension GL_KHR_shader_subgroup_arithmetic : enable 
[   0.753][d][vo/gpu-next/libplacebo] [  5] #extension GL_KHR_shader_subgroup_ballot : enable 
[   0.753][d][vo/gpu-next/libplacebo] [  6] #extension GL_KHR_shader_subgroup_shuffle : enable 
[   0.753][d][vo/gpu-next/libplacebo] [  7] #extension GL_KHR_shader_subgroup_clustered : enable 
[   0.753][d][vo/gpu-next/libplacebo] [  8] #extension GL_KHR_shader_subgroup_quad : enable 
[   0.753][d][vo/gpu-next/libplacebo] [  9] #extension GL_ARB_texture_gather : enable
[   0.753][d][vo/gpu-next/libplacebo] [ 10] layout(std430, push_constant) uniform PushC {
[   0.753][d][vo/gpu-next/libplacebo] [ 11]     layout(offset=0) vec3 _2005;
[   0.753][d][vo/gpu-next/libplacebo] [ 12]     layout(offset=16) mat3 _2004;
[   0.753][d][vo/gpu-next/libplacebo] [ 13] };
[   0.753][d][vo/gpu-next/libplacebo] [ 14] layout(constant_id=0) const float _2002 = 1; 
[   0.753][d][vo/gpu-next/libplacebo] [ 15] layout(constant_id=1) const float _2003 = 1; 
[   0.753][d][vo/gpu-next/libplacebo] [ 16] layout(constant_id=2) const float _a004 = 1; 
[   0.753][d][vo/gpu-next/libplacebo] [ 17] layout(constant_id=3) const float _6004 = 1; 
[   0.753][d][vo/gpu-next/libplacebo] [ 18] layout(binding=0) uniform  sampler2D _a002;
[   0.753][d][vo/gpu-next/libplacebo] [ 19] layout(binding=1) uniform  sampler2D _6002;
[   0.753][d][vo/gpu-next/libplacebo] [ 20] layout(location=0) in vec2 _2008;
[   0.753][d][vo/gpu-next/libplacebo] [ 21] layout(location=0) out vec2 _a003;
[   0.753][d][vo/gpu-next/libplacebo] [ 22] layout(location=1) in vec2 _2009;
[   0.753][d][vo/gpu-next/libplacebo] [ 23] layout(location=1) out vec2 _6003;
[   0.753][d][vo/gpu-next/libplacebo] [ 24] layout(location=2) in vec2 _200a;
[   0.753][d][vo/gpu-next/libplacebo] [ 25] void main() {
[   0.753][d][vo/gpu-next/libplacebo] [ 26] _a003 = _2008;
[   0.753][d][vo/gpu-next/libplacebo] [ 27] _6003 = _2009;
[   0.753][d][vo/gpu-next/libplacebo] [ 28] vec2 va_pos = _200a; 
[   0.753][d][vo/gpu-next/libplacebo] [ 29] gl_Position = vec4(va_pos, 0.0, 1.0); 
[   0.753][d][vo/gpu-next/libplacebo] [ 30] }
[   0.753][d][vo/gpu-next/libplacebo] fragment shader source:
[   0.753][d][vo/gpu-next/libplacebo] [  1] #version 450
[   0.753][d][vo/gpu-next/libplacebo] [  2] #extension GL_KHR_shader_subgroup_basic : enable 
[   0.753][d][vo/gpu-next/libplacebo] [  3] #extension GL_KHR_shader_subgroup_vote : enable 
[   0.753][d][vo/gpu-next/libplacebo] [  4] #extension GL_KHR_shader_subgroup_arithmetic : enable 
[   0.753][d][vo/gpu-next/libplacebo] [  5] #extension GL_KHR_shader_subgroup_ballot : enable 
[   0.753][d][vo/gpu-next/libplacebo] [  6] #extension GL_KHR_shader_subgroup_shuffle : enable 
[   0.753][d][vo/gpu-next/libplacebo] [  7] #extension GL_KHR_shader_subgroup_clustered : enable 
[   0.753][d][vo/gpu-next/libplacebo] [  8] #extension GL_KHR_shader_subgroup_quad : enable 
[   0.753][d][vo/gpu-next/libplacebo] [  9] #extension GL_ARB_texture_gather : enable
[   0.753][d][vo/gpu-next/libplacebo] [ 10] layout(std430, push_constant) uniform PushC {
[   0.753][d][vo/gpu-next/libplacebo] [ 11]     layout(offset=0) vec3 _2005;
[   0.753][d][vo/gpu-next/libplacebo] [ 12]     layout(offset=16) mat3 _2004;
[   0.753][d][vo/gpu-next/libplacebo] [ 13] };
[   0.753][d][vo/gpu-next/libplacebo] [ 14] layout(constant_id=0) const float _2002 = 1; 
[   0.753][d][vo/gpu-next/libplacebo] [ 15] layout(constant_id=1) const float _2003 = 1; 
[   0.753][d][vo/gpu-next/libplacebo] [ 16] layout(constant_id=2) const float _a004 = 1; 
[   0.753][d][vo/gpu-next/libplacebo] [ 17] layout(constant_id=3) const float _6004 = 1; 
[   0.753][d][vo/gpu-next/libplacebo] [ 18] layout(binding=0) uniform  sampler2D _a002;
[   0.753][d][vo/gpu-next/libplacebo] [ 19] layout(binding=1) uniform  sampler2D _6002;
[   0.753][d][vo/gpu-next/libplacebo] [ 20] layout(location=0) in vec2 _a003;
[   0.753][d][vo/gpu-next/libplacebo] [ 21] layout(location=1) in vec2 _6003;
[   0.753][d][vo/gpu-next/libplacebo] [ 22] layout(location=0) out vec4 out_color;
[   0.753][d][vo/gpu-next/libplacebo] [ 23] 
[   0.753][d][vo/gpu-next/libplacebo] [ 24] vec4 _a001() {
[   0.753][d][vo/gpu-next/libplacebo] [ 25] // pl_shader_sample_direct                            
[   0.753][d][vo/gpu-next/libplacebo] [ 26] vec4 color = vec4(_a004) * textureLod(_a002, _a003, 0.0);   
[   0.753][d][vo/gpu-next/libplacebo] [ 27] return color;
[   0.753][d][vo/gpu-next/libplacebo] [ 28] }
[   0.753][d][vo/gpu-next/libplacebo] [ 29] 
[   0.753][d][vo/gpu-next/libplacebo] [ 30] vec4 _6001() {
[   0.753][d][vo/gpu-next/libplacebo] [ 31] // pl_shader_sample_direct                            
[   0.753][d][vo/gpu-next/libplacebo] [ 32] vec4 color = vec4(_6004) * textureLod(_6002, _6003, 0.0);   
[   0.753][d][vo/gpu-next/libplacebo] [ 33] return color;
[   0.753][d][vo/gpu-next/libplacebo] [ 34] }
[   0.753][d][vo/gpu-next/libplacebo] [ 35] 
[   0.753][d][vo/gpu-next/libplacebo] [ 36] vec4 _2001() {
[   0.753][d][vo/gpu-next/libplacebo] [ 37] vec4 color = vec4(_2003, vec2(_2002), 1.0);   
[   0.753][d][vo/gpu-next/libplacebo] [ 38] // pass_read_image                        
[   0.753][d][vo/gpu-next/libplacebo] [ 39] {                                         
[   0.753][d][vo/gpu-next/libplacebo] [ 40] vec4 tmp;                                 
[   0.753][d][vo/gpu-next/libplacebo] [ 41] tmp = _a001(); 
[   0.753][d][vo/gpu-next/libplacebo] [ 42] color[0] = tmp[0];
[   0.753][d][vo/gpu-next/libplacebo] [ 43] tmp = _6001(); 
[   0.753][d][vo/gpu-next/libplacebo] [ 44] color[1] = tmp[0];
[   0.753][d][vo/gpu-next/libplacebo] [ 45] color[2] = tmp[1];
[   0.753][d][vo/gpu-next/libplacebo] [ 46] }
[   0.753][d][vo/gpu-next/libplacebo] [ 47] // pl_shader_decode_color 
[   0.753][d][vo/gpu-next/libplacebo] [ 48] { 
[   0.753][d][vo/gpu-next/libplacebo] [ 49] color.rgb = _2004 * color.rgb + _2005; 
[   0.753][d][vo/gpu-next/libplacebo] [ 50] }
[   0.753][d][vo/gpu-next/libplacebo] [ 51] return color;
[   0.753][d][vo/gpu-next/libplacebo] [ 52] }
[   0.753][d][vo/gpu-next/libplacebo] [ 53] 
[   0.753][d][vo/gpu-next/libplacebo] [ 54] void main() {
[   0.753][d][vo/gpu-next/libplacebo] [ 55] out_color = _2001();
[   0.753][d][vo/gpu-next/libplacebo] [ 56] }
[   0.753][d][vo/gpu-next/libplacebo] Specialization constant values:
[   0.753][d][vo/gpu-next/libplacebo]   constant_id=0: 0.501961
[   0.753][d][vo/gpu-next/libplacebo]   constant_id=1: 0.062745
[   0.753][d][vo/gpu-next/libplacebo]   constant_id=2: 1.000000
[   0.753][d][vo/gpu-next/libplacebo]   constant_id=3: 1.000000
[   0.753][d][vo/gpu-next] cache_load_obj: key(2c3f15232e538598), size(848), load time(0.017 ms)
[   0.753][d][vo/gpu-next/libplacebo] Re-using cached SPIR-V object 0x2c3f15232e538598
[   0.753][d][vo/gpu-next] cache_load_obj: key(852e14596ee317d8), size(1648), load time(0.011 ms)
[   0.753][d][vo/gpu-next/libplacebo] Re-using cached SPIR-V object 0x852e14596ee317d8
[   0.753][d][vo/gpu-next/libplacebo] Spent 0.004 ms compiling shader
[   0.753][d][vo/gpu-next] cache_save_obj: key(2c3f15232e538598), size(848)
[   0.753][d][vo/gpu-next] cache_save_obj: key(852e14596ee317d8), size(1648)
[   0.753][d][vo/gpu-next/libplacebo] Spent 0.024 ms creating pipeline
[   0.753][d][vo/gpu-next] cache_save_obj: key(d65a7201efc01bae), size(28748)
[   0.753][d][vo/gpu-next/libplacebo] Pass statistics: size 0, SPIR-V: vert 0 frag 0 comp 0
[   0.753][d][vo/gpu-next/libplacebo] (Re)creating 1920x1080x0 texture with format rgba16hf: src/renderer.c:1011
[   0.753][d][vo/gpu-next/libplacebo] Allocating 17694720 memory of type 0x1 (id 1) in heap 0: src/renderer.c:1011
[   0.753][d][vo/gpu-next/libplacebo] Spent 0.082 ms allocating slab
[   0.753][d][vo/gpu-next/libplacebo] vertex shader source:
[   0.753][d][vo/gpu-next/libplacebo] [  1] #version 450
[   0.753][d][vo/gpu-next/libplacebo] [  2] #extension GL_KHR_shader_subgroup_basic : enable 
[   0.753][d][vo/gpu-next/libplacebo] [  3] #extension GL_KHR_shader_subgroup_vote : enable 
[   0.753][d][vo/gpu-next/libplacebo] [  4] #extension GL_KHR_shader_subgroup_arithmetic : enable 
[   0.753][d][vo/gpu-next/libplacebo] [  5] #extension GL_KHR_shader_subgroup_ballot : enable 
[   0.753][d][vo/gpu-next/libplacebo] [  6] #extension GL_KHR_shader_subgroup_shuffle : enable 
[   0.753][d][vo/gpu-next/libplacebo] [  7] #extension GL_KHR_shader_subgroup_clustered : enable 
[   0.753][d][vo/gpu-next/libplacebo] [  8] #extension GL_KHR_shader_subgroup_quad : enable 
[   0.753][d][vo/gpu-next/libplacebo] [  9] #extension GL_ARB_texture_gather : enable
[   0.753][d][vo/gpu-next/libplacebo] [ 10] layout(std430, push_constant) uniform PushC {
[   0.753][d][vo/gpu-next/libplacebo] [ 11]     layout(offset=0) vec2 _4;
[   0.753][d][vo/gpu-next/libplacebo] [ 12]     layout(offset=8) vec2 _5;
[   0.753][d][vo/gpu-next/libplacebo] [ 13]     layout(offset=16) int _7;
[   0.753][d][vo/gpu-next/libplacebo] [ 14]     layout(offset=20) float _8;
[   0.753][d][vo/gpu-next/libplacebo] [ 15]     layout(offset=24) vec2 _9;
[   0.753][d][vo/gpu-next/libplacebo] [ 16]     layout(offset=32) vec2 _a;
[   0.753][d][vo/gpu-next/libplacebo] [ 17]     layout(offset=40) vec2 _b;
[   0.753][d][vo/gpu-next/libplacebo] [ 18] };
[   0.753][d][vo/gpu-next/libplacebo] [ 19] layout(constant_id=0) const float _6 = 1; 
[   0.753][d][vo/gpu-next/libplacebo] [ 20] layout(constant_id=1) const float _8002 = 1; 
[   0.753][d][vo/gpu-next/libplacebo] [ 21] layout(constant_id=2) const float _8003 = 1; 
[   0.753][d][vo/gpu-next/libplacebo] [ 22] layout(constant_id=3) const float _4002 = 1; 
[   0.753][d][vo/gpu-next/libplacebo] [ 23] layout(constant_id=4) const float _4003 = 1; 
[   0.753][d][vo/gpu-next/libplacebo] [ 24] layout(binding=0) uniform  sampler2D _2;
[   0.753][d][vo/gpu-next/libplacebo] [ 25] layout(location=0) in vec2 _e;
[   0.753][d][vo/gpu-next/libplacebo] [ 26] layout(location=0) out vec2 _3;
[   0.753][d][vo/gpu-next/libplacebo] [ 27] layout(location=1) in vec2 _f;
[   0.753][d][vo/gpu-next/libplacebo] [ 28] void main() {
[   0.753][d][vo/gpu-next/libplacebo] [ 29] _3 = _e;
[   0.753][d][vo/gpu-next/libplacebo] [ 30] vec2 va_pos = _f; 
[   0.753][d][vo/gpu-next/libplacebo] [ 31] gl_Position = vec4(va_pos, 0.0, 1.0); 
[   0.753][d][vo/gpu-next/libplacebo] [ 32] }
[   0.753][d][vo/gpu-next/libplacebo] fragment shader source:
[   0.753][d][vo/gpu-next/libplacebo] [  1] #version 450
[   0.753][d][vo/gpu-next/libplacebo] [  2] #extension GL_KHR_shader_subgroup_basic : enable 
[   0.753][d][vo/gpu-next/libplacebo] [  3] #extension GL_KHR_shader_subgroup_vote : enable 
[   0.753][d][vo/gpu-next/libplacebo] [  4] #extension GL_KHR_shader_subgroup_arithmetic : enable 
[   0.753][d][vo/gpu-next/libplacebo] [  5] #extension GL_KHR_shader_subgroup_ballot : enable 
[   0.753][d][vo/gpu-next/libplacebo] [  6] #extension GL_KHR_shader_subgroup_shuffle : enable 
[   0.753][d][vo/gpu-next/libplacebo] [  7] #extension GL_KHR_shader_subgroup_clustered : enable 
[   0.753][d][vo/gpu-next/libplacebo] [  8] #extension GL_KHR_shader_subgroup_quad : enable 
[   0.753][d][vo/gpu-next/libplacebo] [  9] #extension GL_ARB_texture_gather : enable
[   0.753][d][vo/gpu-next/libplacebo] [ 10] layout(std430, push_constant) uniform PushC {
[   0.753][d][vo/gpu-next/libplacebo] [ 11]     layout(offset=0) vec2 _4;
[   0.753][d][vo/gpu-next/libplacebo] [ 12]     layout(offset=8) vec2 _5;
[   0.753][d][vo/gpu-next/libplacebo] [ 13]     layout(offset=16) int _7;
[   0.753][d][vo/gpu-next/libplacebo] [ 14]     layout(offset=20) float _8;
[   0.753][d][vo/gpu-next/libplacebo] [ 15]     layout(offset=24) vec2 _9;
[   0.753][d][vo/gpu-next/libplacebo] [ 16]     layout(offset=32) vec2 _a;
[   0.753][d][vo/gpu-next/libplacebo] [ 17]     layout(offset=40) vec2 _b;
[   0.753][d][vo/gpu-next/libplacebo] [ 18] };
[   0.753][d][vo/gpu-next/libplacebo] [ 19] layout(constant_id=0) const float _6 = 1; 
[   0.753][d][vo/gpu-next/libplacebo] [ 20] layout(constant_id=1) const float _8002 = 1; 
[   0.753][d][vo/gpu-next/libplacebo] [ 21] layout(constant_id=2) const float _8003 = 1; 
[   0.753][d][vo/gpu-next/libplacebo] [ 22] layout(constant_id=3) const float _4002 = 1; 
[   0.753][d][vo/gpu-next/libplacebo] [ 23] layout(constant_id=4) const float _4003 = 1; 
[   0.753][d][vo/gpu-next/libplacebo] [ 24] layout(binding=0) uniform  sampler2D _2;
[   0.753][d][vo/gpu-next/libplacebo] [ 25] layout(location=0) in vec2 _3;
[   0.753][d][vo/gpu-next/libplacebo] [ 26] layout(location=0) out vec4 out_color;
[   0.753][d][vo/gpu-next/libplacebo] [ 27] 
[   0.753][d][vo/gpu-next/libplacebo] [ 28] #define MAINPRESUB_raw _2 
[   0.753][d][vo/gpu-next/libplacebo] [ 29] #define MAINPRESUB_pos _3 
[   0.753][d][vo/gpu-next/libplacebo] [ 30] #define MAINPRESUB_map _3_map 
[   0.753][d][vo/gpu-next/libplacebo] [ 31] #define MAINPRESUB_size vec2(textureSize(_2, 0)) 
[   0.753][d][vo/gpu-next/libplacebo] [ 32] #define MAINPRESUB_pt _4 
[   0.753][d][vo/gpu-next/libplacebo] [ 33] #define MAINPRESUB_off _5 
[   0.753][d][vo/gpu-next/libplacebo] [ 34] #define MAINPRESUB_mul _6 
[   0.753][d][vo/gpu-next/libplacebo] [ 35] #define MAINPRESUB_rot mat2(1.0, 0.0, 0.0, 1.0) 
[   0.753][d][vo/gpu-next/libplacebo] [ 36] #define MAINPRESUB_tex(pos) (_6 * vec4(textureLod(_2, pos, 0.0))) 
[   0.753][d][vo/gpu-next/libplacebo] [ 37] #define MAINPRESUB_texOff(off) (MAINPRESUB_tex(_3 + _4 * vec2(off))) 
[   0.753][d][vo/gpu-next/libplacebo] [ 38] #define MAINPRESUB_gather(pos, c) (_6 * vec4(textureGather(_2, pos, c))) 
[   0.753][d][vo/gpu-next/libplacebo] [ 39] #define HOOKED_raw MAINPRESUB_raw 
[   0.753][d][vo/gpu-next/libplacebo] [ 40] #define HOOKED_pos MAINPRESUB_pos 
[   0.753][d][vo/gpu-next/libplacebo] [ 41] #define HOOKED_size MAINPRESUB_size 
[   0.753][d][vo/gpu-next/libplacebo] [ 42] #define HOOKED_rot MAINPRESUB_rot 
[   0.753][d][vo/gpu-next/libplacebo] [ 43] #define HOOKED_off MAINPRESUB_off 
[   0.753][d][vo/gpu-next/libplacebo] [ 44] #define HOOKED_pt MAINPRESUB_pt 
[   0.753][d][vo/gpu-next/libplacebo] [ 45] #define HOOKED_map MAINPRESUB_map 
[   0.753][d][vo/gpu-next/libplacebo] [ 46] #define HOOKED_mul MAINPRESUB_mul 
[   0.753][d][vo/gpu-next/libplacebo] [ 47] #define HOOKED_tex MAINPRESUB_tex 
[   0.753][d][vo/gpu-next/libplacebo] [ 48] #define HOOKED_texOff MAINPRESUB_texOff 
[   0.753][d][vo/gpu-next/libplacebo] [ 49] #define HOOKED_gather MAINPRESUB_gather 
[   0.753][d][vo/gpu-next/libplacebo] [ 50] #define MAIN_raw MAINPRESUB_raw 
[   0.753][d][vo/gpu-next/libplacebo] [ 51] #define MAIN_pos MAINPRESUB_pos 
[   0.753][d][vo/gpu-next/libplacebo] [ 52] #define MAIN_size MAINPRESUB_size 
[   0.753][d][vo/gpu-next/libplacebo] [ 53] #define MAIN_rot MAINPRESUB_rot 
[   0.753][d][vo/gpu-next/libplacebo] [ 54] #define MAIN_off MAINPRESUB_off 
[   0.753][d][vo/gpu-next/libplacebo] [ 55] #define MAIN_pt MAINPRESUB_pt 
[   0.753][d][vo/gpu-next/libplacebo] [ 56] #define MAIN_map MAINPRESUB_map 
[   0.753][d][vo/gpu-next/libplacebo] [ 57] #define MAIN_mul MAINPRESUB_mul 
[   0.753][d][vo/gpu-next/libplacebo] [ 58] #define MAIN_tex MAINPRESUB_tex 
[   0.753][d][vo/gpu-next/libplacebo] [ 59] #define MAIN_texOff MAINPRESUB_texOff 
[   0.753][d][vo/gpu-next/libplacebo] [ 60] #define MAIN_gather MAINPRESUB_gather 
[   0.753][d][vo/gpu-next/libplacebo] [ 61] #define frame _7 
[   0.753][d][vo/gpu-next/libplacebo] [ 62] #define random _8 
[   0.753][d][vo/gpu-next/libplacebo] [ 63] #define input_size _9 
[   0.753][d][vo/gpu-next/libplacebo] [ 64] #define target_size _a 
[   0.753][d][vo/gpu-next/libplacebo] [ 65] #define tex_offset _b 
[   0.753][d][vo/gpu-next/libplacebo] [ 66] vec4 _8001(vec4 color) {
[   0.753][d][vo/gpu-next/libplacebo] [ 67] // pl_shader_linearize           
[   0.753][d][vo/gpu-next/libplacebo] [ 68] color.rgb = max(color.rgb, 0.0); 
[   0.753][d][vo/gpu-next/libplacebo] [ 69] color.rgb = _8003 * pow(color.rgb + vec3(_8002), vec3(2.4)); 
[   0.753][d][vo/gpu-next/libplacebo] [ 70] return color;
[   0.753][d][vo/gpu-next/libplacebo] [ 71] }
[   0.753][d][vo/gpu-next/libplacebo] [ 72] 
[   0.753][d][vo/gpu-next/libplacebo] [ 73] #define linearize _8001 
[   0.753][d][vo/gpu-next/libplacebo] [ 74] vec4 _4001(vec4 color) {
[   0.753][d][vo/gpu-next/libplacebo] [ 75] // pl_shader_delinearize 
[   0.753][d][vo/gpu-next/libplacebo] [ 76] color.rgb = max(color.rgb, 0.0); 
[   0.753][d][vo/gpu-next/libplacebo] [ 77] color.rgb = pow(_4003 * color.rgb, vec3(1.0/2.4)) - vec3(_4002); 
[   0.753][d][vo/gpu-next/libplacebo] [ 78] return color;
[   0.753][d][vo/gpu-next/libplacebo] [ 79] }
[   0.753][d][vo/gpu-next/libplacebo] [ 80] 
[   0.753][d][vo/gpu-next/libplacebo] [ 81] #define delinearize _4001 
[   0.753][d][vo/gpu-next/libplacebo] [ 82] 
[   0.753][d][vo/gpu-next/libplacebo] [ 83] // User variables
[   0.753][d][vo/gpu-next/libplacebo] [ 84] #define FSR_EASU_PASSTHROUGH_ALPHA 1 // If set to 1, preserves transparency in the image. Can be disabled for more performance. 0 or 1.
[   0.753][d][vo/gpu-next/libplacebo] [ 85] 
[   0.753][d][vo/gpu-next/libplacebo] [ 86] // Shader code
[   0.753][d][vo/gpu-next/libplacebo] [ 87] 
[   0.753][d][vo/gpu-next/libplacebo] [ 88] float APrxLoRcpF1(float a) {
[   0.753][d][vo/gpu-next/libplacebo] [ 89] 	return uintBitsToFloat(uint(0x7ef07ebb) - floatBitsToUint(a));
[   0.753][d][vo/gpu-next/libplacebo] [ 90] }
[   0.753][d][vo/gpu-next/libplacebo] [ 91] 
[   0.753][d][vo/gpu-next/libplacebo] [ 92] float APrxLoRsqF1(float a) {
[   0.753][d][vo/gpu-next/libplacebo] [ 93] 	return uintBitsToFloat(uint(0x5f347d74) - (floatBitsToUint(a) >> uint(1)));
[   0.753][d][vo/gpu-next/libplacebo] [ 94] }
[   0.753][d][vo/gpu-next/libplacebo] [ 95] 
[   0.753][d][vo/gpu-next/libplacebo] [ 96] vec3 AMin3F3(vec3 x, vec3 y, vec3 z) {
[   0.753][d][vo/gpu-next/libplacebo] [ 97] 	return min(x, min(y, z));
[   0.753][d][vo/gpu-next/libplacebo] [ 98] }
[   0.753][d][vo/gpu-next/libplacebo] [ 99] 
[   0.753][d][vo/gpu-next/libplacebo] [100] vec3 AMax3F3(vec3 x, vec3 y, vec3 z) {
[   0.753][d][vo/gpu-next/libplacebo] [101] 	return max(x, max(y, z));
[   0.753][d][vo/gpu-next/libplacebo] [102] }
[   0.753][d][vo/gpu-next/libplacebo] [103] 
[   0.753][d][vo/gpu-next/libplacebo] [104]  // Filtering for a given tap for the scalar.
[   0.753][d][vo/gpu-next/libplacebo] [105]  void FsrEasuTap(
[   0.753][d][vo/gpu-next/libplacebo] [106] 	inout vec3 aC,  // Accumulated color, with negative lobe.
[   0.753][d][vo/gpu-next/libplacebo] [107] 	inout float aW, // Accumulated weight.
[   0.753][d][vo/gpu-next/libplacebo] [108] 	vec2 off,       // Pixel offset from resolve position to tap.
[   0.754][d][vo/gpu-next/libplacebo] [109] 	vec2 dir,       // Gradient direction.
[   0.754][d][vo/gpu-next/libplacebo] [110] 	vec2 len,       // Length.
[   0.754][d][vo/gpu-next/libplacebo] [111] 	float lob,      // Negative lobe strength.
[   0.754][d][vo/gpu-next/libplacebo] [112] 	float clp,      // Clipping point.
[   0.754][d][vo/gpu-next/libplacebo] [113] 	vec3 c){        // Tap color.
[   0.754][d][vo/gpu-next/libplacebo] [114] 	// Rotate offset by direction.
[   0.754][d][vo/gpu-next/libplacebo] [115] 	vec2 v;
[   0.754][d][vo/gpu-next/libplacebo] [116] 	v.x = (off.x * ( dir.x)) + (off.y * dir.y);
[   0.754][d][vo/gpu-next/libplacebo] [117] 	v.y = (off.x * (-dir.y)) + (off.y * dir.x);
[   0.754][d][vo/gpu-next/libplacebo] [118] 	// Anisotropy.
[   0.754][d][vo/gpu-next/libplacebo] [119] 	v *= len;
[   0.754][d][vo/gpu-next/libplacebo] [120] 	// Compute distance^2.
[   0.754][d][vo/gpu-next/libplacebo] [121] 	float d2 = v.x * v.x + v.y * v.y;
[   0.754][d][vo/gpu-next/libplacebo] [122] 	// Limit to the window as at corner, 2 taps can easily be outside.
[   0.754][d][vo/gpu-next/libplacebo] [123] 	d2 = min(d2, clp);
[   0.754][d][vo/gpu-next/libplacebo] [124] 	// Approximation of lancos2 without sin() or rcp(), or sqrt() to get x.
[   0.754][d][vo/gpu-next/libplacebo] [125] 	//  (25/16 * (2/5 * x^2 - 1)^2 - (25/16 - 1)) * (1/4 * x^2 - 1)^2
[   0.754][d][vo/gpu-next/libplacebo] [126] 	//  |_______________________________________|   |_______________|
[   0.754][d][vo/gpu-next/libplacebo] [127] 	//                   base                             window
[   0.754][d][vo/gpu-next/libplacebo] [128] 	// The general form of the 'base' is,
[   0.754][d][vo/gpu-next/libplacebo] [129] 	//  (a*(b*x^2-1)^2-(a-1))
[   0.754][d][vo/gpu-next/libplacebo] [130] 	// Where 'a=1/(2*b-b^2)' and 'b' moves around the negative lobe.
[   0.754][d][vo/gpu-next/libplacebo] [131] 	float wB = float(2.0 / 5.0) * d2 + float(-1.0);
[   0.754][d][vo/gpu-next/libplacebo] [132] 	float wA = lob * d2 + float(-1.0);
[   0.754][d][vo/gpu-next/libplacebo] [133] 	wB *= wB;
[   0.754][d][vo/gpu-next/libplacebo] [134] 	wA *= wA;
[   0.754][d][vo/gpu-next/libplacebo] [135] 	wB = float(25.0 / 16.0) * wB + float(-(25.0 / 16.0 - 1.0));
[   0.754][d][vo/gpu-next/libplacebo] [136] 	float w = wB * wA;
[   0.754][d][vo/gpu-next/libplacebo] [137] 	// Do weighted average.
[   0.754][d][vo/gpu-next/libplacebo] [138] 	aC += c * w;
[   0.754][d][vo/gpu-next/libplacebo] [139] 	aW += w;
[   0.754][d][vo/gpu-next/libplacebo] [140] }
[   0.754][d][vo/gpu-next/libplacebo] [141] 
[   0.754][d][vo/gpu-next/libplacebo] [142] // Accumulate direction and length.
[   0.754][d][vo/gpu-next/libplacebo] [143] void FsrEasuSet(
[   0.754][d][vo/gpu-next/libplacebo] [144] 	inout vec2 dir,
[   0.754][d][vo/gpu-next/libplacebo] [145] 	inout float len,
[   0.754][d][vo/gpu-next/libplacebo] [146] 	vec2 pp,
[   0.754][d][vo/gpu-next/libplacebo] [147] 	bool biS, bool biT, bool biU, bool biV,
[   0.754][d][vo/gpu-next/libplacebo] [148] 	float lA, float lB, float lC, float lD, float lE){
[   0.754][d][vo/gpu-next/libplacebo] [149] 	// Compute bilinear weight, branches factor out as predicates are compiler time immediates.
[   0.754][d][vo/gpu-next/libplacebo] [150] 	//  s t
[   0.754][d][vo/gpu-next/libplacebo] [151] 	//  u v
[   0.754][d][vo/gpu-next/libplacebo] [152] 	float w = float(0.0);
[   0.754][d][vo/gpu-next/libplacebo] [153] 	if(biS) w = (float(1.0) - pp.x) * (float(1.0) - pp.y);
[   0.754][d][vo/gpu-next/libplacebo] [154] 	if(biT) w = pp.x * (float(1.0) - pp.y);
[   0.754][d][vo/gpu-next/libplacebo] [155] 	if(biU) w = (float(1.0) - pp.x) * pp.y;
[   0.754][d][vo/gpu-next/libplacebo] [156] 	if(biV) w = pp.x * pp.y;
[   0.754][d][vo/gpu-next/libplacebo] [157] 	// Direction is the '+' diff.
[   0.754][d][vo/gpu-next/libplacebo] [158] 	//    a
[   0.754][d][vo/gpu-next/libplacebo] [159] 	//  b c d
[   0.754][d][vo/gpu-next/libplacebo] [160] 	//    e
[   0.754][d][vo/gpu-next/libplacebo] [161] 	// Then takes magnitude from abs average of both sides of 'c'.
[   0.754][d][vo/gpu-next/libplacebo] [162] 	// Length converts gradient reversal to 0, smoothly to non-reversal at 1, shaped, then adding horz and vert terms.
[   0.754][d][vo/gpu-next/libplacebo] [163] 	float dc = lD - lC;
[   0.754][d][vo/gpu-next/libplacebo] [164] 	float cb = lC - lB;
[   0.754][d][vo/gpu-next/libplacebo] [165] 	float lenX = max(abs(dc), abs(cb));
[   0.754][d][vo/gpu-next/libplacebo] [166] 	lenX = APrxLoRcpF1(lenX);
[   0.754][d][vo/gpu-next/libplacebo] [167] 	float dirX = lD - lB;
[   0.754][d][vo/gpu-next/libplacebo] [168] 	dir.x += dirX * w;
[   0.754][d][vo/gpu-next/libplacebo] [169] 	lenX = clamp(abs(dirX) * lenX, float(0.0), float(1.0));
[   0.754][d][vo/gpu-next/libplacebo] [170] 	lenX *= lenX;
[   0.754][d][vo/gpu-next/libplacebo] [171] 	len += lenX * w;
[   0.754][d][vo/gpu-next/libplacebo] [172] 	// Repeat for the y axis.
[   0.754][d][vo/gpu-next/libplacebo] [173] 	float ec = lE - lC;
[   0.754][d][vo/gpu-next/libplacebo] [174] 	float ca = lC - lA;
[   0.754][d][vo/gpu-next/libplacebo] [175] 	float lenY = max(abs(ec), abs(ca));
[   0.754][d][vo/gpu-next/libplacebo] [176] 	lenY = APrxLoRcpF1(lenY);
[   0.754][d][vo/gpu-next/libplacebo] [177] 	float dirY = lE - lA;
[   0.754][d][vo/gpu-next/libplacebo] [178] 	dir.y += dirY * w;
[   0.754][d][vo/gpu-next/libplacebo] [179] 	lenY = clamp(abs(dirY) * lenY, float(0.0), float(1.0));
[   0.754][d][vo/gpu-next/libplacebo] [180] 	lenY *= lenY;
[   0.754][d][vo/gpu-next/libplacebo] [181] 	len += lenY * w;
[   0.754][d][vo/gpu-next/libplacebo] [182] }
[   0.754][d][vo/gpu-next/libplacebo] [183] 
[   0.754][d][vo/gpu-next/libplacebo] [184] vec4 hook() {
[   0.754][d][vo/gpu-next/libplacebo] [185] 	//------------------------------------------------------------------------------------------------------------------------------
[   0.754][d][vo/gpu-next/libplacebo] [186] 	// Get position of 'f'.
[   0.754][d][vo/gpu-next/libplacebo] [187] 	vec2 pp = HOOKED_pos * HOOKED_size - vec2(0.5);
[   0.754][d][vo/gpu-next/libplacebo] [188] 	vec2 fp = floor(pp);
[   0.754][d][vo/gpu-next/libplacebo] [189] 	pp -= fp;
[   0.754][d][vo/gpu-next/libplacebo] [190] 	//------------------------------------------------------------------------------------------------------------------------------
[   0.754][d][vo/gpu-next/libplacebo] [191] 	// 12-tap kernel.
[   0.754][d][vo/gpu-next/libplacebo] [192] 	//    b c
[   0.754][d][vo/gpu-next/libplacebo] [193] 	//  e f g h
[   0.754][d][vo/gpu-next/libplacebo] [194] 	//  i j k l
[   0.754][d][vo/gpu-next/libplacebo] [195] 	//    n o
[   0.754][d][vo/gpu-next/libplacebo] [196] 	// Gather 4 ordering.
[   0.754][d][vo/gpu-next/libplacebo] [197] 	//  a b
[   0.754][d][vo/gpu-next/libplacebo] [198] 	//  r g
[   0.754][d][vo/gpu-next/libplacebo] [199] 	// For packed FP16, need either {rg} or {ab} so using the following setup for gather in all versions,
[   0.754][d][vo/gpu-next/libplacebo] [200] 	//    a b    <- unused (z)
[   0.754][d][vo/gpu-next/libplacebo] [201] 	//    r g
[   0.754][d][vo/gpu-next/libplacebo] [202] 	//  a b a b
[   0.754][d][vo/gpu-next/libplacebo] [203] 	//  r g r g
[   0.754][d][vo/gpu-next/libplacebo] [204] 	//    a b
[   0.754][d][vo/gpu-next/libplacebo] [205] 	//    r g    <- unused (z)
[   0.754][d][vo/gpu-next/libplacebo] [206] 	// Allowing dead-code removal to remove the 'z's.
[   0.754][d][vo/gpu-next/libplacebo] [207] 	
[   0.754][d][vo/gpu-next/libplacebo] [208]  #if (defined(HOOKED_gather) && (__VERSION__ >= 400 || (GL_ES && __VERSION__ >= 310)))
[   0.754][d][vo/gpu-next/libplacebo] [209] 	vec4 bczzR = HOOKED_gather(vec2((fp + vec2(1.0, -1.0)) * HOOKED_pt), 0);
[   0.754][d][vo/gpu-next/libplacebo] [210] 	vec4 bczzG = HOOKED_gather(vec2((fp + vec2(1.0, -1.0)) * HOOKED_pt), 1);
[   0.754][d][vo/gpu-next/libplacebo] [211] 	vec4 bczzB = HOOKED_gather(vec2((fp + vec2(1.0, -1.0)) * HOOKED_pt), 2);
[   0.754][d][vo/gpu-next/libplacebo] [212] 	
[   0.754][d][vo/gpu-next/libplacebo] [213] 	vec4 ijfeR = HOOKED_gather(vec2((fp + vec2(0.0, 1.0)) * HOOKED_pt), 0);
[   0.754][d][vo/gpu-next/libplacebo] [214] 	vec4 ijfeG = HOOKED_gather(vec2((fp + vec2(0.0, 1.0)) * HOOKED_pt), 1);
[   0.754][d][vo/gpu-next/libplacebo] [215] 	vec4 ijfeB = HOOKED_gather(vec2((fp + vec2(0.0, 1.0)) * HOOKED_pt), 2);
[   0.754][d][vo/gpu-next/libplacebo] [216] 	
[   0.754][d][vo/gpu-next/libplacebo] [217] 	vec4 klhgR = HOOKED_gather(vec2((fp + vec2(2.0, 1.0)) * HOOKED_pt), 0);
[   0.754][d][vo/gpu-next/libplacebo] [218] 	vec4 klhgG = HOOKED_gather(vec2((fp + vec2(2.0, 1.0)) * HOOKED_pt), 1);
[   0.754][d][vo/gpu-next/libplacebo] [219] 	vec4 klhgB = HOOKED_gather(vec2((fp + vec2(2.0, 1.0)) * HOOKED_pt), 2);
[   0.754][d][vo/gpu-next/libplacebo] [220] 	
[   0.754][d][vo/gpu-next/libplacebo] [221] 	vec4 zzonR = HOOKED_gather(vec2((fp + vec2(1.0, 3.0)) * HOOKED_pt), 0);
[   0.754][d][vo/gpu-next/libplacebo] [222] 	vec4 zzonG = HOOKED_gather(vec2((fp + vec2(1.0, 3.0)) * HOOKED_pt), 1);
[   0.754][d][vo/gpu-next/libplacebo] [223] 	vec4 zzonB = HOOKED_gather(vec2((fp + vec2(1.0, 3.0)) * HOOKED_pt), 2);
[   0.754][d][vo/gpu-next/libplacebo] [224] #else
[   0.754][d][vo/gpu-next/libplacebo] [225] 	// pre-OpenGL 4.0 compatibility
[   0.754][d][vo/gpu-next/libplacebo] [226] 	vec3 b = HOOKED_tex(vec2((fp + vec2(0.5, -0.5)) * HOOKED_pt)).rgb;
[   0.754][d][vo/gpu-next/libplacebo] [227] 	vec3 c = HOOKED_tex(vec2((fp + vec2(1.5, -0.5)) * HOOKED_pt)).rgb;
[   0.754][d][vo/gpu-next/libplacebo] [228] 	
[   0.754][d][vo/gpu-next/libplacebo] [229] 	vec3 e = HOOKED_tex(vec2((fp + vec2(-0.5, 0.5)) * HOOKED_pt)).rgb;
[   0.754][d][vo/gpu-next/libplacebo] [230] 	vec3 f = HOOKED_tex(vec2((fp + vec2( 0.5, 0.5)) * HOOKED_pt)).rgb;
[   0.754][d][vo/gpu-next/libplacebo] [231] 	vec3 g = HOOKED_tex(vec2((fp + vec2( 1.5, 0.5)) * HOOKED_pt)).rgb;
[   0.754][d][vo/gpu-next/libplacebo] [232] 	vec3 h = HOOKED_tex(vec2((fp + vec2( 2.5, 0.5)) * HOOKED_pt)).rgb;
[   0.754][d][vo/gpu-next/libplacebo] [233] 	
[   0.754][d][vo/gpu-next/libplacebo] [234] 	vec3 i = HOOKED_tex(vec2((fp + vec2(-0.5, 1.5)) * HOOKED_pt)).rgb;
[   0.754][d][vo/gpu-next/libplacebo] [235] 	vec3 j = HOOKED_tex(vec2((fp + vec2( 0.5, 1.5)) * HOOKED_pt)).rgb;
[   0.754][d][vo/gpu-next/libplacebo] [236] 	vec3 k = HOOKED_tex(vec2((fp + vec2( 1.5, 1.5)) * HOOKED_pt)).rgb;
[   0.754][d][vo/gpu-next/libplacebo] [237] 	vec3 l = HOOKED_tex(vec2((fp + vec2( 2.5, 1.5)) * HOOKED_pt)).rgb;
[   0.754][d][vo/gpu-next/libplacebo] [238] 	
[   0.754][d][vo/gpu-next/libplacebo] [239] 	vec3 n = HOOKED_tex(vec2((fp + vec2(0.5, 2.5) ) * HOOKED_pt)).rgb;
[   0.754][d][vo/gpu-next/libplacebo] [240] 	vec3 o = HOOKED_tex(vec2((fp + vec2(1.5, 2.5) ) * HOOKED_pt)).rgb;
[   0.754][d][vo/gpu-next/libplacebo] [241] 
[   0.754][d][vo/gpu-next/libplacebo] [242] 	vec4 bczzR = vec4(b.r, c.r, 0.0, 0.0);
[   0.754][d][vo/gpu-next/libplacebo] [243] 	vec4 bczzG = vec4(b.g, c.g, 0.0, 0.0);
[   0.754][d][vo/gpu-next/libplacebo] [244] 	vec4 bczzB = vec4(b.b, c.b, 0.0, 0.0);
[   0.754][d][vo/gpu-next/libplacebo] [245] 	
[   0.754][d][vo/gpu-next/libplacebo] [246] 	vec4 ijfeR = vec4(i.r, j.r, f.r, e.r);
[   0.754][d][vo/gpu-next/libplacebo] [247] 	vec4 ijfeG = vec4(i.g, j.g, f.g, e.g);
[   0.754][d][vo/gpu-next/libplacebo] [248] 	vec4 ijfeB = vec4(i.b, j.b, f.b, e.b);
[   0.754][d][vo/gpu-next/libplacebo] [249] 	
[   0.754][d][vo/gpu-next/libplacebo] [250] 	vec4 klhgR = vec4(k.r, l.r, h.r, g.r);
[   0.754][d][vo/gpu-next/libplacebo] [251] 	vec4 klhgG = vec4(k.g, l.g, h.g, g.g);
[   0.754][d][vo/gpu-next/libplacebo] [252] 	vec4 klhgB = vec4(k.b, l.b, h.b, g.b);
[   0.754][d][vo/gpu-next/libplacebo] [253] 	
[   0.754][d][vo/gpu-next/libplacebo] [254] 	vec4 zzonR = vec4(0.0, 0.0, o.r, n.r);
[   0.754][d][vo/gpu-next/libplacebo] [255] 	vec4 zzonG = vec4(0.0, 0.0, o.g, n.g);
[   0.754][d][vo/gpu-next/libplacebo] [256] 	vec4 zzonB = vec4(0.0, 0.0, o.b, n.b);
[   0.754][d][vo/gpu-next/libplacebo] [257] #endif
[   0.754][d][vo/gpu-next/libplacebo] [258] 	//------------------------------------------------------------------------------------------------------------------------------
[   0.754][d][vo/gpu-next/libplacebo] [259] 	// Simplest multi-channel approximate luma possible (luma times 2, in 2 FMA/MAD).
[   0.754][d][vo/gpu-next/libplacebo] [260] 	vec4 bczzL = bczzB * vec4(0.5) + (bczzR * vec4(0.5) + bczzG);
[   0.754][d][vo/gpu-next/libplacebo] [261] 	vec4 ijfeL = ijfeB * vec4(0.5) + (ijfeR * vec4(0.5) + ijfeG);
[   0.754][d][vo/gpu-next/libplacebo] [262] 	vec4 klhgL = klhgB * vec4(0.5) + (klhgR * vec4(0.5) + klhgG);
[   0.754][d][vo/gpu-next/libplacebo] [263] 	vec4 zzonL = zzonB * vec4(0.5) + (zzonR * vec4(0.5) + zzonG);
[   0.754][d][vo/gpu-next/libplacebo] [264] 	// Rename.
[   0.754][d][vo/gpu-next/libplacebo] [265] 	float bL = bczzL.x;
[   0.754][d][vo/gpu-next/libplacebo] [266] 	float cL = bczzL.y;
[   0.754][d][vo/gpu-next/libplacebo] [267] 	float iL = ijfeL.x;
[   0.754][d][vo/gpu-next/libplacebo] [268] 	float jL = ijfeL.y;
[   0.754][d][vo/gpu-next/libplacebo] [269] 	float fL = ijfeL.z;
[   0.754][d][vo/gpu-next/libplacebo] [270] 	float eL = ijfeL.w;
[   0.754][d][vo/gpu-next/libplacebo] [271] 	float kL = klhgL.x;
[   0.754][d][vo/gpu-next/libplacebo] [272] 	float lL = klhgL.y;
[   0.754][d][vo/gpu-next/libplacebo] [273] 	float hL = klhgL.z;
[   0.754][d][vo/gpu-next/libplacebo] [274] 	float gL = klhgL.w;
[   0.754][d][vo/gpu-next/libplacebo] [275] 	float oL = zzonL.z;
[   0.754][d][vo/gpu-next/libplacebo] [276] 	float nL = zzonL.w;
[   0.754][d][vo/gpu-next/libplacebo] [277] 	// Accumulate for bilinear interpolation.
[   0.754][d][vo/gpu-next/libplacebo] [278] 	vec2 dir = vec2(0.0);
[   0.754][d][vo/gpu-next/libplacebo] [279] 	float len = float(0.0);
[   0.754][d][vo/gpu-next/libplacebo] [280] 	FsrEasuSet(dir, len, pp, true, false, false, false, bL, eL, fL, gL, jL);
[   0.754][d][vo/gpu-next/libplacebo] [281] 	FsrEasuSet(dir, len, pp, false, true, false, false, cL, fL, gL, hL, kL);
[   0.754][d][vo/gpu-next/libplacebo] [282] 	FsrEasuSet(dir, len, pp, false, false, true, false, fL, iL, jL, kL, nL);
[   0.754][d][vo/gpu-next/libplacebo] [283] 	FsrEasuSet(dir, len, pp, false, false, false, true, gL, jL, kL, lL, oL);
[   0.754][d][vo/gpu-next/libplacebo] [284] 	//------------------------------------------------------------------------------------------------------------------------------
[   0.754][d][vo/gpu-next/libplacebo] [285] 	// Normalize with approximation, and cleanup close to zero.
[   0.754][d][vo/gpu-next/libplacebo] [286] 	vec2 dir2 = dir * dir;
[   0.754][d][vo/gpu-next/libplacebo] [287] 	float dirR = dir2.x + dir2.y;
[   0.754][d][vo/gpu-next/libplacebo] [288] 	bool zro = dirR < float(1.0 / 32768.0);
[   0.754][d][vo/gpu-next/libplacebo] [289] 	dirR = APrxLoRsqF1(dirR);
[   0.754][d][vo/gpu-next/libplacebo] [290] 	dirR = zro ? float(1.0) : dirR;
[   0.754][d][vo/gpu-next/libplacebo] [291] 	dir.x = zro ? float(1.0) : dir.x;
[   0.754][d][vo/gpu-next/libplacebo] [292] 	dir *= vec2(dirR);
[   0.754][d][vo/gpu-next/libplacebo] [293] 	// Transform from {0 to 2} to {0 to 1} range, and shape with square.
[   0.754][d][vo/gpu-next/libplacebo] [294] 	len = len * float(0.5);
[   0.754][d][vo/gpu-next/libplacebo] [295] 	len *= len;
[   0.754][d][vo/gpu-next/libplacebo] [296] 	// Stretch kernel {1.0 vert|horz, to sqrt(2.0) on diagonal}.
[   0.754][d][vo/gpu-next/libplacebo] [297] 	float stretch = (dir.x * dir.x + dir.y * dir.y) * APrxLoRcpF1(max(abs(dir.x), abs(dir.y)));
[   0.754][d][vo/gpu-next/libplacebo] [298] 	// Anisotropic length after rotation,
[   0.754][d][vo/gpu-next/libplacebo] [299] 	//  x := 1.0 lerp to 'stretch' on edges
[   0.754][d][vo/gpu-next/libplacebo] [300] 	//  y := 1.0 lerp to 2x on edges
[   0.754][d][vo/gpu-next/libplacebo] [301] 	vec2 len2 = vec2(float(1.0) + (stretch - float(1.0)) * len, float(1.0) + float(-0.5) * len);
[   0.754][d][vo/gpu-next/libplacebo] [302] 	// Based on the amount of 'edge',
[   0.754][d][vo/gpu-next/libplacebo] [303] 	// the window shifts from +/-{sqrt(2.0) to slightly beyond 2.0}.
[   0.754][d][vo/gpu-next/libplacebo] [304] 	float lob = float(0.5) + float((1.0 / 4.0 - 0.04) - 0.5) * len;
[   0.754][d][vo/gpu-next/libplacebo] [305] 	// Set distance^2 clipping point to the end of the adjustable window.
[   0.754][d][vo/gpu-next/libplacebo] [306] 	float clp = APrxLoRcpF1(lob);
[   0.754][d][vo/gpu-next/libplacebo] [307] 	//------------------------------------------------------------------------------------------------------------------------------
[   0.754][d][vo/gpu-next/libplacebo] [308] 	// Accumulation mixed with min/max of 4 nearest.
[   0.754][d][vo/gpu-next/libplacebo] [309] 	//    b c
[   0.754][d][vo/gpu-next/libplacebo] [310] 	//  e f g h
[   0.754][d][vo/gpu-next/libplacebo] [311] 	//  i j k l
[   0.754][d][vo/gpu-next/libplacebo] [312] 	//    n o
[   0.754][d][vo/gpu-next/libplacebo] [313] 	vec3 min4 = min(AMin3F3(vec3(ijfeR.z, ijfeG.z, ijfeB.z), vec3(klhgR.w, klhgG.w, klhgB.w), vec3(ijfeR.y, ijfeG.y, ijfeB.y)), vec3(klhgR.x, klhgG.x, klhgB.x));
[   0.754][d][vo/gpu-next/libplacebo] [314] 	vec3 max4 = max(AMax3F3(vec3(ijfeR.z, ijfeG.z, ijfeB.z), vec3(klhgR.w, klhgG.w, klhgB.w), vec3(ijfeR.y, ijfeG.y, ijfeB.y)), vec3(klhgR.x, klhgG.x, klhgB.x));
[   0.754][d][vo/gpu-next/libplacebo] [315] 
[   0.754][d][vo/gpu-next/libplacebo] [316] 	// Accumulation.
[   0.754][d][vo/gpu-next/libplacebo] [317] 	vec3 aC = vec3(0.0);
[   0.754][d][vo/gpu-next/libplacebo] [318] 	float aW = float(0.0);
[   0.754][d][vo/gpu-next/libplacebo] [319] 	FsrEasuTap(aC, aW, vec2( 0.0,-1.0) - pp,dir, len2, lob, clp, vec3(bczzR.x, bczzG.x, bczzB.x)); // b
[   0.754][d][vo/gpu-next/libplacebo] [320] 	FsrEasuTap(aC, aW, vec2( 1.0,-1.0) - pp,dir, len2, lob, clp, vec3(bczzR.y, bczzG.y, bczzB.y)); // c
[   0.754][d][vo/gpu-next/libplacebo] [321] 	FsrEasuTap(aC, aW, vec2(-1.0, 1.0) - pp,dir, len2, lob, clp, vec3(ijfeR.x, ijfeG.x, ijfeB.x)); // i
[   0.754][d][vo/gpu-next/libplacebo] [322] 	FsrEasuTap(aC, aW, vec2( 0.0, 1.0) - pp,dir, len2, lob, clp, vec3(ijfeR.y, ijfeG.y, ijfeB.y)); // j
[   0.754][d][vo/gpu-next/libplacebo] [323] 	FsrEasuTap(aC, aW, vec2( 0.0, 0.0) - pp,dir, len2, lob, clp, vec3(ijfeR.z, ijfeG.z, ijfeB.z)); // f
[   0.754][d][vo/gpu-next/libplacebo] [324] 	FsrEasuTap(aC, aW, vec2(-1.0, 0.0) - pp,dir, len2, lob, clp, vec3(ijfeR.w, ijfeG.w, ijfeB.w)); // e
[   0.754][d][vo/gpu-next/libplacebo] [325] 	FsrEasuTap(aC, aW, vec2( 1.0, 1.0) - pp,dir, len2, lob, clp, vec3(klhgR.x, klhgG.x, klhgB.x)); // k
[   0.754][d][vo/gpu-next/libplacebo] [326] 	FsrEasuTap(aC, aW, vec2( 2.0, 1.0) - pp,dir, len2, lob, clp, vec3(klhgR.y, klhgG.y, klhgB.y)); // l
[   0.754][d][vo/gpu-next/libplacebo] [327] 	FsrEasuTap(aC, aW, vec2( 2.0, 0.0) - pp,dir, len2, lob, clp, vec3(klhgR.z, klhgG.z, klhgB.z)); // h
[   0.754][d][vo/gpu-next/libplacebo] [328] 	FsrEasuTap(aC, aW, vec2( 1.0, 0.0) - pp,dir, len2, lob, clp, vec3(klhgR.w, klhgG.w, klhgB.w)); // g
[   0.754][d][vo/gpu-next/libplacebo] [329] 	FsrEasuTap(aC, aW, vec2( 1.0, 2.0) - pp,dir, len2, lob, clp, vec3(zzonR.z, zzonG.z, zzonB.z)); // o
[   0.754][d][vo/gpu-next/libplacebo] [330] 	FsrEasuTap(aC, aW, vec2( 0.0, 2.0) - pp,dir, len2, lob, clp, vec3(zzonR.w, zzonG.w, zzonB.w)); // n
[   0.754][d][vo/gpu-next/libplacebo] [331] 	//------------------------------------------------------------------------------------------------------------------------------
[   0.754][d][vo/gpu-next/libplacebo] [332] 	// Normalize and dering.
[   0.754][d][vo/gpu-next/libplacebo] [333] 	vec4 pix;
[   0.754][d][vo/gpu-next/libplacebo] [334] 	pix.rgb = min(max4, max(min4, aC * vec3(1.0 / aW)));
[   0.754][d][vo/gpu-next/libplacebo] [335] 
[   0.754][d][vo/gpu-next/libplacebo] [336] 	#if (FSR_EASU_PASSTHROUGH_ALPHA == 1)
[   0.754][d][vo/gpu-next/libplacebo] [337] 		pix.a = HOOKED_tex(HOOKED_pos).a;
[   0.754][d][vo/gpu-next/libplacebo] [338] 	#else
[   0.754][d][vo/gpu-next/libplacebo] [339] 		pix.a = float(1.0);
[   0.754][d][vo/gpu-next/libplacebo] [340] 	#endif
[   0.754][d][vo/gpu-next/libplacebo] [341] 	return pix;
[   0.754][d][vo/gpu-next/libplacebo] [342] }
[   0.754][d][vo/gpu-next/libplacebo] [343] 
[   0.754][d][vo/gpu-next/libplacebo] [344] vec4 _1() {
[   0.754][d][vo/gpu-next/libplacebo] [345] vec4 color = hook(); 
[   0.754][d][vo/gpu-next/libplacebo] [346] return color;
[   0.754][d][vo/gpu-next/libplacebo] [347] }
[   0.754][d][vo/gpu-next/libplacebo] [348] 
[   0.754][d][vo/gpu-next/libplacebo] [349] void main() {
[   0.754][d][vo/gpu-next/libplacebo] [350] out_color = _1();
[   0.754][d][vo/gpu-next/libplacebo] [351] }
[   0.754][d][vo/gpu-next/libplacebo] Specialization constant values:
[   0.754][d][vo/gpu-next/libplacebo]   constant_id=0: 1.000000
[   0.754][d][vo/gpu-next/libplacebo]   constant_id=1: 0.059585
[   0.754][d][vo/gpu-next/libplacebo]   constant_id=2: 0.870311
[   0.754][d][vo/gpu-next/libplacebo]   constant_id=3: 0.059585
[   0.754][d][vo/gpu-next/libplacebo]   constant_id=4: 1.149015
[   0.754][d][vo/gpu-next] cache_load_obj: key(fbfbc6f818e56fab), size(748), load time(0.016 ms)
[   0.754][d][vo/gpu-next/libplacebo] Re-using cached SPIR-V object 0xfbfbc6f818e56fab
[   0.754][d][vo/gpu-next] cache_load_obj: key(b2c702510399012a), size(14908), load time(0.018 ms)
[   0.754][d][vo/gpu-next/libplacebo] Re-using cached SPIR-V object 0xb2c702510399012a
[   0.754][d][vo/gpu-next] cache_load_obj: key(1882cc08d0169fc7), size(20371), load time(0.018 ms)
[   0.754][d][vo/gpu-next/libplacebo] Spent 0.016 ms compiling shader
[   0.754][d][vo/gpu-next] cache_save_obj: key(fbfbc6f818e56fab), size(748)
[   0.754][d][vo/gpu-next] cache_save_obj: key(b2c702510399012a), size(14908)
[   0.754][d][vo/gpu-next/libplacebo] Spent 0.094 ms creating pipeline
[   0.754][d][vo/gpu-next] cache_save_obj: key(1882cc08d0169fc7), size(20371)
[   0.754][d][vo/gpu-next/libplacebo] Pass statistics: size 0, SPIR-V: vert 0 frag 0 comp 0
[   0.754][d][vo/gpu-next/libplacebo] (Re)creating 1920x1080x0 texture with format rgba16hf: src/renderer.c:1065
[   0.754][d][vo/gpu-next/libplacebo] Allocating 17694720 memory of type 0x1 (id 1) in heap 0: src/renderer.c:1065
[   0.754][d][vo/gpu-next/libplacebo] Spent 0.078 ms allocating slab
[   0.754][d][vo/gpu-next/libplacebo] vertex shader source:
[   0.754][d][vo/gpu-next/libplacebo] [  1] #version 450
[   0.754][d][vo/gpu-next/libplacebo] [  2] #extension GL_KHR_shader_subgroup_basic : enable 
[   0.754][d][vo/gpu-next/libplacebo] [  3] #extension GL_KHR_shader_subgroup_vote : enable 
[   0.754][d][vo/gpu-next/libplacebo] [  4] #extension GL_KHR_shader_subgroup_arithmetic : enable 
[   0.754][d][vo/gpu-next/libplacebo] [  5] #extension GL_KHR_shader_subgroup_ballot : enable 
[   0.754][d][vo/gpu-next/libplacebo] [  6] #extension GL_KHR_shader_subgroup_shuffle : enable 
[   0.754][d][vo/gpu-next/libplacebo] [  7] #extension GL_KHR_shader_subgroup_clustered : enable 
[   0.754][d][vo/gpu-next/libplacebo] [  8] #extension GL_KHR_shader_subgroup_quad : enable 
[   0.754][d][vo/gpu-next/libplacebo] [  9] #extension GL_ARB_texture_gather : enable
[   0.754][d][vo/gpu-next/libplacebo] [ 10] layout(constant_id=0) const float _e004 = 1; 
[   0.754][d][vo/gpu-next/libplacebo] [ 11] layout(binding=0) uniform  sampler2D _e002;
[   0.754][d][vo/gpu-next/libplacebo] [ 12] layout(location=0) in vec2 _e007;
[   0.754][d][vo/gpu-next/libplacebo] [ 13] layout(location=0) out vec2 _e003;
[   0.754][d][vo/gpu-next/libplacebo] [ 14] layout(location=1) in vec2 _e008;
[   0.754][d][vo/gpu-next/libplacebo] [ 15] void main() {
[   0.754][d][vo/gpu-next/libplacebo] [ 16] _e003 = _e007;
[   0.754][d][vo/gpu-next/libplacebo] [ 17] vec2 va_pos = _e008; 
[   0.754][d][vo/gpu-next/libplacebo] [ 18] gl_Position = vec4(va_pos, 0.0, 1.0); 
[   0.754][d][vo/gpu-next/libplacebo] [ 19] }
[   0.754][d][vo/gpu-next/libplacebo] fragment shader source:
[   0.754][d][vo/gpu-next/libplacebo] [  1] #version 450
[   0.754][d][vo/gpu-next/libplacebo] [  2] #extension GL_KHR_shader_subgroup_basic : enable 
[   0.754][d][vo/gpu-next/libplacebo] [  3] #extension GL_KHR_shader_subgroup_vote : enable 
[   0.754][d][vo/gpu-next/libplacebo] [  4] #extension GL_KHR_shader_subgroup_arithmetic : enable 
[   0.754][d][vo/gpu-next/libplacebo] [  5] #extension GL_KHR_shader_subgroup_ballot : enable 
[   0.754][d][vo/gpu-next/libplacebo] [  6] #extension GL_KHR_shader_subgroup_shuffle : enable 
[   0.754][d][vo/gpu-next/libplacebo] [  7] #extension GL_KHR_shader_subgroup_clustered : enable 
[   0.754][d][vo/gpu-next/libplacebo] [  8] #extension GL_KHR_shader_subgroup_quad : enable 
[   0.754][d][vo/gpu-next/libplacebo] [  9] #extension GL_ARB_texture_gather : enable
[   0.754][d][vo/gpu-next/libplacebo] [ 10] layout(constant_id=0) const float _e004 = 1; 
[   0.754][d][vo/gpu-next/libplacebo] [ 11] layout(binding=0) uniform  sampler2D _e002;
[   0.754][d][vo/gpu-next/libplacebo] [ 12] layout(location=0) in vec2 _e003;
[   0.754][d][vo/gpu-next/libplacebo] [ 13] layout(location=0) out vec4 out_color;
[   0.754][d][vo/gpu-next/libplacebo] [ 14] 
[   0.754][d][vo/gpu-next/libplacebo] [ 15] vec4 _e001() {
[   0.754][d][vo/gpu-next/libplacebo] [ 16] // pl_shader_sample_direct                            
[   0.754][d][vo/gpu-next/libplacebo] [ 17] vec4 color = vec4(_e004) * textureLod(_e002, _e003, 0.0);   
[   0.754][d][vo/gpu-next/libplacebo] [ 18] return color;
[   0.754][d][vo/gpu-next/libplacebo] [ 19] }
[   0.754][d][vo/gpu-next/libplacebo] [ 20] 
[   0.754][d][vo/gpu-next/libplacebo] [ 21] void main() {
[   0.754][d][vo/gpu-next/libplacebo] [ 22] out_color = _e001();
[   0.754][d][vo/gpu-next/libplacebo] [ 23] }
[   0.754][d][vo/gpu-next/libplacebo] Specialization constant values:
[   0.754][d][vo/gpu-next/libplacebo]   constant_id=0: 1.000000
[   0.754][d][vo/gpu-next] cache_load_obj: key(b50fb555658166c1), size(748), load time(0.015 ms)
[   0.754][d][vo/gpu-next/libplacebo] Re-using cached SPIR-V object 0xb50fb555658166c1
[   0.754][d][vo/gpu-next] cache_load_obj: key(d1566dbf1dda46e3), size(584), load time(0.007 ms)
[   0.754][d][vo/gpu-next/libplacebo] Re-using cached SPIR-V object 0xd1566dbf1dda46e3
[   0.754][d][vo/gpu-next/libplacebo] Spent 0.002 ms compiling shader
[   0.754][d][vo/gpu-next] cache_save_obj: key(b50fb555658166c1), size(748)
[   0.754][d][vo/gpu-next] cache_save_obj: key(d1566dbf1dda46e3), size(584)
[   0.754][d][vo/gpu-next/libplacebo] Spent 0.016 ms creating pipeline
[   0.754][d][vo/gpu-next] cache_save_obj: key(a6154bbcd3718684), size(13149)
[   0.754][d][vo/gpu-next/libplacebo] Pass statistics: size 0, SPIR-V: vert 0 frag 0 comp 0
[   0.756][v][vo/gpu-next/wayland] Read 1 bytes from the data offer fd
[   0.758][v][auto_profiles] Re-evaluating auto profile maximized
[   0.758][v][cplayer] Set property: user-data/display_name="HDMI-A-1" -> 1
[   0.758][d][global] config path: 'fonts' -> '/home/zen/.config/mpv/fonts'
[   0.758][d][osd/libass] ASS library version: 0x1703000 (runtime 0x1703000)
[   0.758][v][osd/libass] libass API version: 0x1703000
[   0.758][v][osd/libass] libass source: commit: 0.17.3-0-ge46aedea0a0d17da4c4ef49d84b94a7994664ab5
[   0.758][v][osd/libass] Shaper: FriBidi 1.0.15 (SIMPLE) HarfBuzz-ng 11.2.1 (COMPLEX)
[   0.758][d][global] config path: 'subfont.ttf' -/-> '/home/zen/.config/mpv/subfont.ttf'
[   0.758][d][global] config path: 'subfont.ttf' -/-> '/home/zen/.mpv/subfont.ttf'
[   0.758][d][global] config path: 'subfont.ttf' -/-> '/etc/mpv/subfont.ttf'
[   0.758][d][global] config path: 'fonts.conf' -/-> '/home/zen/.config/mpv/fonts.conf'
[   0.758][d][global] config path: 'fonts.conf' -/-> '/home/zen/.mpv/fonts.conf'
[   0.758][d][global] config path: 'fonts.conf' -/-> '/etc/mpv/fonts.conf'
[   0.758][v][osd/libass] Setting up fonts...
[   0.759][v][osd/libass] Loading font file '/home/zen/.config/mpv/fonts/modernx-osc-icon.ttf'
[   0.759][v][osd/libass] Loading font file '/home/zen/.config/mpv/fonts/MaterialIconsRound-Regular.otf'
[   0.760][v][osd/libass] Loading font file '/home/zen/.config/mpv/fonts/Material-Design-Iconic-Font.ttf'
[   0.760][v][osd/libass] Loading font file '/home/zen/.config/mpv/fonts/uosc_textures.ttf'
[   0.764][v][osd/libass] Using font provider fontconfig
[   0.764][v][osd/libass] Done.
[   0.766][v][osd/libass] fontselect: (Noto Emoji, 400, 0) -> /usr/share/fonts/noto/NotoSans-Regular.ttf, 0, NotoSans-Regular
[   0.766][v][osd/libass] fontselect: (sans-serif, 400, 0) -> /usr/share/fonts/noto/NotoSans-Regular.ttf, 0, NotoSans-Regular
[   0.766][v][osd/libass] fontselect: (Noto Sans Mono CJK SC, 400, 0) -> /usr/share/fonts/noto-cjk/NotoSansCJK-Regular.ttc, 7, NotoSansMonoCJKsc-Regular
[   0.767][i][auto_profiles] Applying auto profile: maximized
[   0.767][d][cplayer] Run command: apply-profile, flags=64, args=[name="maximized", mode="apply"]
[   0.767][v][cplayer] Applying profile 'maximized'...
[   0.767][v][cplayer] Setting option 'auto-window-resize' = 'no' (flags = 4)
[   0.767][v][vo/gpu-next] Window size: 1920x1080 (Borders: l=0 t=0 r=0 b=0)
[   0.767][v][vo/gpu-next] Video source: 1280x720 (4096:4095)
[   0.767][v][vo/gpu-next] Video display: (0, 0) 1280x720 -> (0, 0) 1920x1080
[   0.767][v][vo/gpu-next] Video scale: 1.500000/1.500000
[   0.767][v][vo/gpu-next] OSD borders: l=0 t=0 r=0 b=0
[   0.767][v][vo/gpu-next] Video borders: l=0 t=0 r=0 b=0
[   0.767][v][auto_profiles] Re-evaluating auto profile fps-fix
[   0.767][d][cplayer] Run command: notify-property, flags=73, args=[property="clipboard"]
[   0.767][v][cplayer] audio ready
[   0.767][d][cplayer] starting video playback
[   0.767][v][cplayer] starting audio playback
[   0.767][v][ao/alsa] starting AO
[   0.767][v][cplayer] playback restart complete @ 0.021333, audio=playing, video=playing
[   0.767][v][vo/gpu-next/wayland] Enabling idle inhibitor
[   0.768][v][auto_profiles] Re-evaluating auto profile maximized
[   0.768][d][vd] Allocating new (host-cached) DR image...
[   0.768][v][cplayer] Change display sync audio drift: -1
[   0.768][v][cplayer] Video sync mode enabled.
[   0.768][d][vo/gpu-next/libplacebo] Allocating 23691264 memory of type 0xe (id 4) in heap 1: unknown
[   0.768][v][vo/gpu-next/libplacebo] Detected fps ratio 0.0000 below threshold 0.0100, disabling interpolation
[   0.768][d][vo/gpu-next/libplacebo] (Re)creating 1920x1080x0 texture with format rgba16hf: src/renderer.c:3491
[   0.768][d][vo/gpu-next/libplacebo] Allocating 17694720 memory of type 0x1 (id 1) in heap 0: src/renderer.c:3491
[   0.768][v][auto_profiles] Re-evaluating auto profile video-sync
[   0.771][d][vo/gpu-next/libplacebo] Spent 3.129 ms allocating slab
[   0.771][d][vo/gpu-next/libplacebo] Spent 3.126 ms allocating slab
[   0.771][v][osd/libass] Glyph 0x1F4CC not found, selecting one more font for (Noto Sans Mono CJK SC, 400, 0)
[   0.772][v][osd/libass] fontselect: (Noto Sans Mono CJK SC, 400, 0) -> /usr/share/fonts/TTF/seguisym.ttf, 0, SegoeUISymbol
[   0.772][v][vo/gpu-next/libplacebo] Detected fps ratio 2.3333 exceeds threshold 0.0100, re-enabling interpolation
[   0.772][d][vo/gpu-next/libplacebo] (Re)creating 1280x720x0 texture with format r8: ../src/utils/upload.c:245
[   0.772][d][vo/gpu-next/libplacebo] (Re)creating 640x360x0 texture with format r8: ../src/utils/upload.c:245
[   0.772][d][vo/gpu-next/libplacebo] (Re)creating 640x360x0 texture with format r8: ../src/utils/upload.c:245
[   0.774][d][global] config path: 'fonts' -> '/home/zen/.config/mpv/fonts'
[   0.774][d][osd/libass] ASS library version: 0x1703000 (runtime 0x1703000)
[   0.774][v][osd/libass] libass API version: 0x1703000
[   0.774][v][osd/libass] libass source: commit: 0.17.3-0-ge46aedea0a0d17da4c4ef49d84b94a7994664ab5
[   0.774][v][osd/libass] Shaper: FriBidi 1.0.15 (SIMPLE) HarfBuzz-ng 11.2.1 (COMPLEX)
[   0.774][d][global] config path: 'subfont.ttf' -/-> '/home/zen/.config/mpv/subfont.ttf'
[   0.774][d][global] config path: 'subfont.ttf' -/-> '/home/zen/.mpv/subfont.ttf'
[   0.774][d][global] config path: 'subfont.ttf' -/-> '/etc/mpv/subfont.ttf'
[   0.774][d][global] config path: 'fonts.conf' -/-> '/home/zen/.config/mpv/fonts.conf'
[   0.774][d][global] config path: 'fonts.conf' -/-> '/home/zen/.mpv/fonts.conf'
[   0.774][d][global] config path: 'fonts.conf' -/-> '/etc/mpv/fonts.conf'
[   0.774][v][osd/libass] Setting up fonts...
[   0.775][v][osd/libass] Loading font file '/home/zen/.config/mpv/fonts/modernx-osc-icon.ttf'
[   0.775][v][osd/libass] Loading font file '/home/zen/.config/mpv/fonts/MaterialIconsRound-Regular.otf'
[   0.775][v][osd/libass] Loading font file '/home/zen/.config/mpv/fonts/Material-Design-Iconic-Font.ttf'
[   0.776][v][osd/libass] Loading font file '/home/zen/.config/mpv/fonts/uosc_textures.ttf'
[   0.780][v][osd/libass] Using font provider fontconfig
[   0.780][v][osd/libass] Done.
[   0.782][v][osd/libass] fontselect: (Noto Emoji, 400, 0) -> /usr/share/fonts/noto/NotoSans-Regular.ttf, 0, NotoSans-Regular
[   0.782][v][osd/libass] fontselect: (sans-serif, 400, 0) -> /usr/share/fonts/noto/NotoSans-Regular.ttf, 0, NotoSans-Regular
[   0.782][v][osd/libass] fontselect: (MaterialIconsRound-Regular, 400, 0) -> MaterialIconsRound-Regular, 0, MaterialIconsRound-Regular
[   0.783][v][osd/libass] fontselect: (Noto Sans Mono CJK SC, 400, 0) -> /usr/share/fonts/noto-cjk/NotoSansCJK-Regular.ttc, 7, NotoSansMonoCJKsc-Regular
[   0.783][v][osd/libass] fontselect: (Noto Sans Mono CJK SC, 700, 0) -> /usr/share/fonts/noto-cjk/NotoSansCJK-Bold.ttc, 7, NotoSansMonoCJKsc-Bold
[   0.784][v][osd/libass] Glyph 0x1F4CC not found, selecting one more font for (Noto Sans Mono CJK SC, 400, 0)
[   0.785][v][osd/libass] fontselect: (Noto Sans Mono CJK SC, 400, 0) -> /usr/share/fonts/TTF/seguisym.ttf, 0, SegoeUISymbol
[   0.785][d][osd] Spent 5.349 ms in osd_render (slow!)
[   0.785][d][vo/gpu-next/libplacebo] (Re)creating 478x181x0 texture with format r8: unknown
[   0.785][d][vo/gpu-next/libplacebo] Allocating 380928 memory of type 0x7 (id 5) in heap 2: ../src/gpu/utils.c:575
[   0.786][d][vo/gpu-next/libplacebo] Spent 0.217 ms allocating slab
[   0.786][d][vo/gpu-next/libplacebo] vertex shader source:
[   0.786][d][vo/gpu-next/libplacebo] [  1] #version 450
[   0.786][d][vo/gpu-next/libplacebo] [  2] #extension GL_KHR_shader_subgroup_basic : enable 
[   0.786][d][vo/gpu-next/libplacebo] [  3] #extension GL_KHR_shader_subgroup_vote : enable 
[   0.786][d][vo/gpu-next/libplacebo] [  4] #extension GL_KHR_shader_subgroup_arithmetic : enable 
[   0.786][d][vo/gpu-next/libplacebo] [  5] #extension GL_KHR_shader_subgroup_ballot : enable 
[   0.786][d][vo/gpu-next/libplacebo] [  6] #extension GL_KHR_shader_subgroup_shuffle : enable 
[   0.786][d][vo/gpu-next/libplacebo] [  7] #extension GL_KHR_shader_subgroup_clustered : enable 
[   0.786][d][vo/gpu-next/libplacebo] [  8] #extension GL_KHR_shader_subgroup_quad : enable 
[   0.786][d][vo/gpu-next/libplacebo] [  9] #extension GL_ARB_texture_gather : enable
[   0.786][d][vo/gpu-next/libplacebo] [ 10] layout(std430, push_constant) uniform PushC {
[   0.786][d][vo/gpu-next/libplacebo] [ 11]     layout(offset=0) mat3 _5;
[   0.786][d][vo/gpu-next/libplacebo] [ 12]     layout(offset=48) mat3 _6;
[   0.786][d][vo/gpu-next/libplacebo] [ 13] };
[   0.786][d][vo/gpu-next/libplacebo] [ 14] layout(constant_id=0) const float _3 = 1; 
[   0.786][d][vo/gpu-next/libplacebo] [ 15] layout(constant_id=1) const float _4 = 1; 
[   0.786][d][vo/gpu-next/libplacebo] [ 16] layout(constant_id=2) const float _7 = 1; 
[   0.786][d][vo/gpu-next/libplacebo] [ 17] layout(constant_id=3) const float _8 = 1; 
[   0.786][d][vo/gpu-next/libplacebo] [ 18] layout(binding=0) uniform  sampler2D _2;
[   0.786][d][vo/gpu-next/libplacebo] [ 19] layout(location=0) in vec2 _e;
[   0.786][d][vo/gpu-next/libplacebo] [ 20] layout(location=1) in vec2 _f;
[   0.786][d][vo/gpu-next/libplacebo] [ 21] layout(location=1) out vec2 _b;
[   0.786][d][vo/gpu-next/libplacebo] [ 22] layout(location=2) in vec4 _10;
[   0.786][d][vo/gpu-next/libplacebo] [ 23] layout(location=2) out vec4 _c;
[   0.786][d][vo/gpu-next/libplacebo] [ 24] void main() {
[   0.786][d][vo/gpu-next/libplacebo] [ 25] vec2 va_pos = _e; 
[   0.786][d][vo/gpu-next/libplacebo] [ 26] gl_Position = vec4(va_pos, 0.0, 1.0); 
[   0.786][d][vo/gpu-next/libplacebo] [ 27] _b = _f;
[   0.786][d][vo/gpu-next/libplacebo] [ 28] _c = _10;
[   0.786][d][vo/gpu-next/libplacebo] [ 29] }
[   0.786][d][vo/gpu-next/libplacebo] fragment shader source:
[   0.786][d][vo/gpu-next/libplacebo] [  1] #version 450
[   0.786][d][vo/gpu-next/libplacebo] [  2] #extension GL_KHR_shader_subgroup_basic : enable 
[   0.786][d][vo/gpu-next/libplacebo] [  3] #extension GL_KHR_shader_subgroup_vote : enable 
[   0.786][d][vo/gpu-next/libplacebo] [  4] #extension GL_KHR_shader_subgroup_arithmetic : enable 
[   0.786][d][vo/gpu-next/libplacebo] [  5] #extension GL_KHR_shader_subgroup_ballot : enable 
[   0.786][d][vo/gpu-next/libplacebo] [  6] #extension GL_KHR_shader_subgroup_shuffle : enable 
[   0.786][d][vo/gpu-next/libplacebo] [  7] #extension GL_KHR_shader_subgroup_clustered : enable 
[   0.786][d][vo/gpu-next/libplacebo] [  8] #extension GL_KHR_shader_subgroup_quad : enable 
[   0.786][d][vo/gpu-next/libplacebo] [  9] #extension GL_ARB_texture_gather : enable
[   0.786][d][vo/gpu-next/libplacebo] [ 10] layout(std430, push_constant) uniform PushC {
[   0.786][d][vo/gpu-next/libplacebo] [ 11]     layout(offset=0) mat3 _5;
[   0.786][d][vo/gpu-next/libplacebo] [ 12]     layout(offset=48) mat3 _6;
[   0.786][d][vo/gpu-next/libplacebo] [ 13] };
[   0.786][d][vo/gpu-next/libplacebo] [ 14] layout(constant_id=0) const float _3 = 1; 
[   0.786][d][vo/gpu-next/libplacebo] [ 15] layout(constant_id=1) const float _4 = 1; 
[   0.786][d][vo/gpu-next/libplacebo] [ 16] layout(constant_id=2) const float _7 = 1; 
[   0.786][d][vo/gpu-next/libplacebo] [ 17] layout(constant_id=3) const float _8 = 1; 
[   0.786][d][vo/gpu-next/libplacebo] [ 18] layout(binding=0) uniform  sampler2D _2;
[   0.786][d][vo/gpu-next/libplacebo] [ 19] layout(location=1) in vec2 _b;
[   0.786][d][vo/gpu-next/libplacebo] [ 20] layout(location=2) in vec4 _c;
[   0.786][d][vo/gpu-next/libplacebo] [ 21] layout(location=0) out vec4 out_color;
[   0.786][d][vo/gpu-next/libplacebo] [ 22] #define pos _a
[   0.786][d][vo/gpu-next/libplacebo] [ 23] #define coord _b
[   0.786][d][vo/gpu-next/libplacebo] [ 24] #define osd_color _c
[   0.786][d][vo/gpu-next/libplacebo] [ 25] 
[   0.786][d][vo/gpu-next/libplacebo] [ 26] vec4 _1() {
[   0.786][d][vo/gpu-next/libplacebo] [ 27] // overlay 
[   0.786][d][vo/gpu-next/libplacebo] [ 28] vec4 color = osd_color; 
[   0.786][d][vo/gpu-next/libplacebo] [ 29] // pl_shader_decode_color 
[   0.786][d][vo/gpu-next/libplacebo] [ 30] { 
[   0.786][d][vo/gpu-next/libplacebo] [ 31] }
[   0.786][d][vo/gpu-next/libplacebo] [ 32] // pl_shader_color_map 
[   0.786][d][vo/gpu-next/libplacebo] [ 33] {                      
[   0.786][d][vo/gpu-next/libplacebo] [ 34] // pl_shader_linearize           
[   0.786][d][vo/gpu-next/libplacebo] [ 35] color.rgb = max(color.rgb, 0.0); 
[   0.786][d][vo/gpu-next/libplacebo] [ 36] color.rgb = mix(color.rgb * vec3(1.0/12.92),               
[   0.786][d][vo/gpu-next/libplacebo] [ 37]                 pow((color.rgb + vec3(0.055))/vec3(1.055), 
[   0.786][d][vo/gpu-next/libplacebo] [ 38]                     vec3(2.4)),                            
[   0.786][d][vo/gpu-next/libplacebo] [ 39]                 lessThan(vec3(0.04045), color.rgb));       
[   0.786][d][vo/gpu-next/libplacebo] [ 40] color.rgb = _4 * color.rgb + vec3(_3); 
[   0.786][d][vo/gpu-next/libplacebo] [ 41] // pl_shader_delinearize 
[   0.786][d][vo/gpu-next/libplacebo] [ 42] color.rgb = _8 * color.rgb + vec3(_7); 
[   0.786][d][vo/gpu-next/libplacebo] [ 43] color.rgb = max(color.rgb, 0.0); 
[   0.786][d][vo/gpu-next/libplacebo] [ 44] color.rgb = pow(color.rgb, vec3(1.0/2.2));
[   0.786][d][vo/gpu-next/libplacebo] [ 45] }
[   0.786][d][vo/gpu-next/libplacebo] [ 46] // pl_shader_encode_color 
[   0.786][d][vo/gpu-next/libplacebo] [ 47] { 
[   0.786][d][vo/gpu-next/libplacebo] [ 48] color.rgb *= vec3(color.a); 
[   0.786][d][vo/gpu-next/libplacebo] [ 49] }
[   0.786][d][vo/gpu-next/libplacebo] [ 50] color.rgba *= textureLod(_2, coord, 0.0).r; 
[   0.786][d][vo/gpu-next/libplacebo] [ 51] vec4 _9 = color;                 
[   0.786][d][vo/gpu-next/libplacebo] [ 52] color = vec4(0.0, 0.0, 0.0, 1.0); 
[   0.786][d][vo/gpu-next/libplacebo] [ 53] color[0] = _9[0]; 
[   0.786][d][vo/gpu-next/libplacebo] [ 54] color[1] = _9[1]; 
[   0.786][d][vo/gpu-next/libplacebo] [ 55] color[2] = _9[2]; 
[   0.786][d][vo/gpu-next/libplacebo] [ 56] color[3] = _9[3]; 
[   0.786][d][vo/gpu-next/libplacebo] [ 57] color.a = _9.a; 
[   0.786][d][vo/gpu-next/libplacebo] [ 58] return color;
[   0.786][d][vo/gpu-next/libplacebo] [ 59] }
[   0.786][d][vo/gpu-next/libplacebo] [ 60] 
[   0.786][d][vo/gpu-next/libplacebo] [ 61] void main() {
[   0.786][d][vo/gpu-next/libplacebo] [ 62] out_color = _1();
[   0.786][d][vo/gpu-next/libplacebo] [ 63] }
[   0.786][d][vo/gpu-next/libplacebo] Specialization constant values:
[   0.786][d][vo/gpu-next/libplacebo]   constant_id=0: 0.001000
[   0.786][d][vo/gpu-next/libplacebo]   constant_id=1: 0.999000
[   0.786][d][vo/gpu-next/libplacebo]   constant_id=2: -0.001001
[   0.786][d][vo/gpu-next/libplacebo]   constant_id=3: 1.001001
[   0.786][d][vo/gpu-next] cache_load_obj: key(193c47ccd1cde241), size(864), load time(0.048 ms)
[   0.786][d][vo/gpu-next/libplacebo] Re-using cached SPIR-V object 0x193c47ccd1cde241
[   0.786][d][vo/gpu-next] cache_load_obj: key(d1940a4b0d2b0800), size(2644), load time(0.010 ms)
[   0.786][d][vo/gpu-next/libplacebo] Re-using cached SPIR-V object 0xd1940a4b0d2b0800
[   0.786][d][vo/gpu-next] cache_load_obj: key(15d256aa9da32f), size(15259), load time(0.023 ms)
[   0.786][d][vo/gpu-next/libplacebo] Spent 0.006 ms compiling shader
[   0.786][d][vo/gpu-next] cache_save_obj: key(193c47ccd1cde241), size(864)
[   0.786][d][vo/gpu-next] cache_save_obj: key(d1940a4b0d2b0800), size(2644)
[   0.786][d][vo/gpu-next/libplacebo] Spent 0.109 ms creating pipeline
[   0.786][d][vo/gpu-next] cache_save_obj: key(15d256aa9da32f), size(15259)
[   0.786][d][vo/gpu-next/libplacebo] Pass statistics: size 0, SPIR-V: vert 0 frag 0 comp 0
[   0.788][d][vd] Allocating new (host-cached) DR image...
[   0.788][d][vo/gpu-next/libplacebo] vertex shader source:
[   0.788][d][vo/gpu-next/libplacebo] [  1] #version 450
[   0.788][d][vo/gpu-next/libplacebo] [  2] #extension GL_KHR_shader_subgroup_basic : enable 
[   0.788][d][vo/gpu-next/libplacebo] [  3] #extension GL_KHR_shader_subgroup_vote : enable 
[   0.788][d][vo/gpu-next/libplacebo] [  4] #extension GL_KHR_shader_subgroup_arithmetic : enable 
[   0.788][d][vo/gpu-next/libplacebo] [  5] #extension GL_KHR_shader_subgroup_ballot : enable 
[   0.788][d][vo/gpu-next/libplacebo] [  6] #extension GL_KHR_shader_subgroup_shuffle : enable 
[   0.788][d][vo/gpu-next/libplacebo] [  7] #extension GL_KHR_shader_subgroup_clustered : enable 
[   0.788][d][vo/gpu-next/libplacebo] [  8] #extension GL_KHR_shader_subgroup_quad : enable 
[   0.788][d][vo/gpu-next/libplacebo] [  9] #extension GL_ARB_texture_gather : enable
[   0.788][d][vo/gpu-next/libplacebo] [ 10] layout(std430, push_constant) uniform PushC {
[   0.788][d][vo/gpu-next/libplacebo] [ 11]     layout(offset=0) float _4;
[   0.788][d][vo/gpu-next/libplacebo] [ 12]     layout(offset=4) float _7;
[   0.788][d][vo/gpu-next/libplacebo] [ 13] };
[   0.788][d][vo/gpu-next/libplacebo] [ 14] layout(constant_id=0) const float _a = 1; 
[   0.788][d][vo/gpu-next/libplacebo] [ 15] layout(constant_id=1) const float _b = 1; 
[   0.788][d][vo/gpu-next/libplacebo] [ 16] layout(constant_id=2) const float _c = 1; 
[   0.788][d][vo/gpu-next/libplacebo] [ 17] layout(binding=0) uniform  sampler2D _2;
[   0.788][d][vo/gpu-next/libplacebo] [ 18] layout(binding=1) uniform  sampler2D _5;
[   0.788][d][vo/gpu-next/libplacebo] [ 19] layout(binding=2) uniform  sampler2D _9;
[   0.788][d][vo/gpu-next/libplacebo] [ 20] layout(location=0) in vec2 _10;
[   0.788][d][vo/gpu-next/libplacebo] [ 21] layout(location=0) out vec2 _3;
[   0.788][d][vo/gpu-next/libplacebo] [ 22] layout(location=1) in vec2 _11;
[   0.788][d][vo/gpu-next/libplacebo] [ 23] layout(location=1) out vec2 _6;
[   0.788][d][vo/gpu-next/libplacebo] [ 24] layout(location=2) in vec2 _12;
[   0.788][d][vo/gpu-next/libplacebo] [ 25] void main() {
[   0.788][d][vo/gpu-next/libplacebo] [ 26] _3 = _10;
[   0.788][d][vo/gpu-next/libplacebo] [ 27] _6 = _11;
[   0.788][d][vo/gpu-next/libplacebo] [ 28] vec2 va_pos = _12; 
[   0.789][d][vo/gpu-next/libplacebo] [ 29] gl_Position = vec4(va_pos, 0.0, 1.0); 
[   0.789][d][vo/gpu-next/libplacebo] [ 30] }
[   0.789][d][vo/gpu-next/libplacebo] fragment shader source:
[   0.789][d][vo/gpu-next/libplacebo] [  1] #version 450
[   0.789][d][vo/gpu-next/libplacebo] [  2] #extension GL_KHR_shader_subgroup_basic : enable 
[   0.789][d][vo/gpu-next/libplacebo] [  3] #extension GL_KHR_shader_subgroup_vote : enable 
[   0.789][d][vo/gpu-next/libplacebo] [  4] #extension GL_KHR_shader_subgroup_arithmetic : enable 
[   0.789][d][vo/gpu-next/libplacebo] [  5] #extension GL_KHR_shader_subgroup_ballot : enable 
[   0.789][d][vo/gpu-next/libplacebo] [  6] #extension GL_KHR_shader_subgroup_shuffle : enable 
[   0.789][d][vo/gpu-next/libplacebo] [  7] #extension GL_KHR_shader_subgroup_clustered : enable 
[   0.789][d][vo/gpu-next/libplacebo] [  8] #extension GL_KHR_shader_subgroup_quad : enable 
[   0.789][d][vo/gpu-next/libplacebo] [  9] #extension GL_ARB_texture_gather : enable
[   0.789][d][vo/gpu-next/libplacebo] [ 10] layout(std430, push_constant) uniform PushC {
[   0.789][d][vo/gpu-next/libplacebo] [ 11]     layout(offset=0) float _4;
[   0.789][d][vo/gpu-next/libplacebo] [ 12]     layout(offset=4) float _7;
[   0.789][d][vo/gpu-next/libplacebo] [ 13] };
[   0.789][d][vo/gpu-next/libplacebo] [ 14] layout(constant_id=0) const float _a = 1; 
[   0.789][d][vo/gpu-next/libplacebo] [ 15] layout(constant_id=1) const float _b = 1; 
[   0.789][d][vo/gpu-next/libplacebo] [ 16] layout(constant_id=2) const float _c = 1; 
[   0.789][d][vo/gpu-next/libplacebo] [ 17] layout(binding=0) uniform  sampler2D _2;
[   0.789][d][vo/gpu-next/libplacebo] [ 18] layout(binding=1) uniform  sampler2D _5;
[   0.789][d][vo/gpu-next/libplacebo] [ 19] layout(binding=2) uniform  sampler2D _9;
[   0.789][d][vo/gpu-next/libplacebo] [ 20] layout(location=0) in vec2 _3;
[   0.789][d][vo/gpu-next/libplacebo] [ 21] layout(location=1) in vec2 _6;
[   0.789][d][vo/gpu-next/libplacebo] [ 22] layout(location=0) out vec4 out_color;
[   0.789][d][vo/gpu-next/libplacebo] [ 23] 
[   0.789][d][vo/gpu-next/libplacebo] [ 24] #define _8(pos) (texelFetch(_9, ivec2(pos), 0).x)
[   0.789][d][vo/gpu-next/libplacebo] [ 25] vec4 _1() {
[   0.789][d][vo/gpu-next/libplacebo] [ 26] vec4 color;                   
[   0.789][d][vo/gpu-next/libplacebo] [ 27] // pl_render_image_mix        
[   0.789][d][vo/gpu-next/libplacebo] [ 28] {                             
[   0.789][d][vo/gpu-next/libplacebo] [ 29] vec4 mix_color = vec4(0.0);   
[   0.789][d][vo/gpu-next/libplacebo] [ 30] color = textureLod(_2, _3, 0.0); 
[   0.789][d][vo/gpu-next/libplacebo] [ 31] mix_color += vec4(_4) * color; 
[   0.789][d][vo/gpu-next/libplacebo] [ 32] color = textureLod(_5, _6, 0.0); 
[   0.789][d][vo/gpu-next/libplacebo] [ 33] mix_color += vec4(_7) * color; 
[   0.789][d][vo/gpu-next/libplacebo] [ 34] color = mix_color; 
[   0.789][d][vo/gpu-next/libplacebo] [ 35] }                  
[   0.789][d][vo/gpu-next/libplacebo] [ 36] // pl_shader_encode_color 
[   0.789][d][vo/gpu-next/libplacebo] [ 37] { 
[   0.789][d][vo/gpu-next/libplacebo] [ 38] color.rgb *= vec3(color.a); 
[   0.789][d][vo/gpu-next/libplacebo] [ 39] }
[   0.789][d][vo/gpu-next/libplacebo] [ 40] // pl_shader_dither 
[   0.789][d][vo/gpu-next/libplacebo] [ 41] {                    
[   0.789][d][vo/gpu-next/libplacebo] [ 42] float bias;          
[   0.789][d][vo/gpu-next/libplacebo] [ 43] vec2 pos = fract(gl_FragCoord.xy * 1.0/_a); 
[   0.789][d][vo/gpu-next/libplacebo] [ 44] bias = _8(ivec2(pos * _b));
[   0.789][d][vo/gpu-next/libplacebo] [ 45] const float scale = 255.0; 
[   0.789][d][vo/gpu-next/libplacebo] [ 46] color = scale * color + vec4(bias);   
[   0.789][d][vo/gpu-next/libplacebo] [ 47] color = floor(color) * (1.0 / scale); 
[   0.789][d][vo/gpu-next/libplacebo] [ 48] } 
[   0.789][d][vo/gpu-next/libplacebo] [ 49] color *= vec4(1.0 / _c); 
[   0.789][d][vo/gpu-next/libplacebo] [ 50] vec4 _d = color;                 
[   0.789][d][vo/gpu-next/libplacebo] [ 51] color = vec4(0.0, 0.0, 0.0, 1.0); 
[   0.789][d][vo/gpu-next/libplacebo] [ 52] color[0] = _d[0]; 
[   0.789][d][vo/gpu-next/libplacebo] [ 53] color[1] = _d[1]; 
[   0.789][d][vo/gpu-next/libplacebo] [ 54] color[2] = _d[2]; 
[   0.789][d][vo/gpu-next/libplacebo] [ 55] color[3] = _d[3]; 
[   0.789][d][vo/gpu-next/libplacebo] [ 56] return color;
[   0.789][d][vo/gpu-next/libplacebo] [ 57] }
[   0.789][d][vo/gpu-next/libplacebo] [ 58] 
[   0.789][d][vo/gpu-next/libplacebo] [ 59] void main() {
[   0.789][d][vo/gpu-next/libplacebo] [ 60] out_color = _1();
[   0.789][d][vo/gpu-next/libplacebo] [ 61] }
[   0.789][d][vo/gpu-next/libplacebo] Specialization constant values:
[   0.789][d][vo/gpu-next/libplacebo]   constant_id=0: 64.000000
[   0.789][d][vo/gpu-next/libplacebo]   constant_id=1: 64.000000
[   0.789][d][vo/gpu-next/libplacebo]   constant_id=2: 1.000000
[   0.789][d][vo/gpu-next] cache_load_obj: key(f9d10c163ee5fd66), size(848), load time(0.023 ms)
[   0.789][d][vo/gpu-next/libplacebo] Re-using cached SPIR-V object 0xf9d10c163ee5fd66
[   0.789][d][vo/gpu-next] cache_load_obj: key(e8af280022d1787e), size(1940), load time(0.009 ms)
[   0.789][d][vo/gpu-next/libplacebo] Re-using cached SPIR-V object 0xe8af280022d1787e
[   0.789][d][vo/gpu-next] cache_load_obj: key(4c26f548c1f1fff2), size(14802), load time(0.016 ms)
[   0.789][d][vo/gpu-next/libplacebo] Spent 0.005 ms compiling shader
[   0.789][d][vo/gpu-next] cache_save_obj: key(f9d10c163ee5fd66), size(848)
[   0.789][d][vo/gpu-next] cache_save_obj: key(e8af280022d1787e), size(1940)
[   0.789][d][vo/gpu-next/libplacebo] Spent 0.102 ms creating pipeline
[   0.789][d][vo/gpu-next] cache_save_obj: key(4c26f548c1f1fff2), size(14802)
[   0.789][d][vo/gpu-next/libplacebo] Pass statistics: size 0, SPIR-V: vert 0 frag 0 comp 0
[   0.799][d][vo/gpu-next/libplacebo] (Re)creating 510x181x0 texture with format r8: unknown
[   0.868][v][vo/gpu-next/libplacebo] Estimated source FPS: 29.970, display FPS: 399.600
[   0.889][d][vo/gpu-next/libplacebo] Garbage collected slab of size  252K from pool 3
[   0.889][d][vo/gpu-next/libplacebo] Freeing slab of size  252K
[   0.910][v][vo/gpu-next/libplacebo] Estimated source FPS: 29.970, display FPS: 99.900
[   0.921][v][auto_profiles] Re-evaluating auto profile fps-fix
[   1.032][d][vo/gpu-next/libplacebo] Garbage collected slab of size  372K from pool 3
[   1.033][d][vo/gpu-next/libplacebo] Freeing slab of size  372K
[   1.060][v][auto_profiles] Re-evaluating auto profile video-sync
[   1.124][d][vd] Allocating new (host-cached) DR image...
[   1.319][v][auto_profiles] Re-evaluating auto profile video-sync
[   1.459][v][auto_profiles] Re-evaluating auto profile video-sync
[   1.659][v][auto_profiles] Re-evaluating auto profile video-sync
[   1.759][v][auto_profiles] Re-evaluating auto profile fps-fix
[   1.858][v][auto_profiles] Re-evaluating auto profile fps-fix
[   1.858][v][auto_profiles] Re-evaluating auto profile video-sync
[   1.920][v][auto_profiles] Re-evaluating auto profile fps-fix
[   1.960][v][auto_profiles] Re-evaluating auto profile video-sync
[   2.019][v][auto_profiles] Re-evaluating auto profile fps-fix
[   2.059][v][auto_profiles] Re-evaluating auto profile video-sync
[   2.159][v][auto_profiles] Re-evaluating auto profile fps-fix
[   2.189][v][auto_profiles] Re-evaluating auto profile video-sync
[   2.319][v][auto_profiles] Re-evaluating auto profile fps-fix
[   2.359][v][auto_profiles] Re-evaluating auto profile video-sync
[   2.489][v][auto_profiles] Re-evaluating auto profile fps-fix
[   2.589][v][auto_profiles] Re-evaluating auto profile video-sync
[   2.719][v][auto_profiles] Re-evaluating auto profile fps-fix
[   2.919][v][auto_profiles] Re-evaluating auto profile video-sync
[   3.019][v][auto_profiles] Re-evaluating auto profile fps-fix
[   3.019][v][auto_profiles] Re-evaluating auto profile video-sync
[   3.120][v][auto_profiles] Re-evaluating auto profile video-sync
[   3.219][v][auto_profiles] Re-evaluating auto profile video-sync
[   3.359][v][auto_profiles] Re-evaluating auto profile video-sync
[   3.459][v][auto_profiles] Re-evaluating auto profile fps-fix
[   3.489][v][auto_profiles] Re-evaluating auto profile video-sync
[   3.619][v][auto_profiles] Re-evaluating auto profile video-sync
[   3.789][v][auto_profiles] Re-evaluating auto profile video-sync
[   3.960][v][auto_profiles] Re-evaluating auto profile video-sync
[   4.059][v][auto_profiles] Re-evaluating auto profile fps-fix
[  15.819][v][cplayer] Change display sync audio drift: 0
[  15.819][v][cplayer] Compensation factor: 0.999997
[  15.819][v][auto_profiles] Re-evaluating auto profile video-sync
[  28.371][v][cplayer] Change display sync audio drift: 1
[  28.372][v][auto_profiles] Re-evaluating auto profile video-sync
[  28.939][d][vo/gpu-next/libplacebo] (Re)creating 1920x1080x0 texture with format rgba16hf: src/renderer.c:3491
[  28.939][d][vo/gpu-next/libplacebo] Allocating 17694720 memory of type 0x1 (id 1) in heap 0: src/renderer.c:3491
[  28.940][d][vo/gpu-next/libplacebo] Spent 0.517 ms allocating slab
[  28.952][d][vo/gpu-next/libplacebo] (Re)creating 1280x720x0 texture with format r8: ../src/utils/upload.c:245
[  28.952][d][vo/gpu-next/libplacebo] Allocating 15728640 memory of type 0x1 (id 1) in heap 0: ../src/utils/upload.c:245
[  28.954][d][vo/gpu-next/libplacebo] Spent 1.605 ms allocating slab
[  28.954][d][vo/gpu-next/libplacebo] (Re)creating 640x360x0 texture with format r8: ../src/utils/upload.c:245
[  28.954][d][vo/gpu-next/libplacebo] (Re)creating 640x360x0 texture with format r8: ../src/utils/upload.c:245
[  50.054][v][cplayer] Change display sync audio drift: 0
[  50.054][v][cplayer] Compensation factor: 0.999219
[  50.054][v][auto_profiles] Re-evaluating auto profile video-sync
[  50.098][v][cplayer] Change display sync audio drift: 1
[  50.098][v][auto_profiles] Re-evaluating auto profile video-sync
[  50.881][v][cplayer] Change display sync audio drift: 0
[  50.881][v][cplayer] Compensation factor: 0.998630
[  50.926][v][cplayer] Change display sync audio drift: 1
[  54.119][v][cplayer] Change display sync audio drift: 0
[  54.119][v][cplayer] Compensation factor: 1.000044
[  54.119][v][auto_profiles] Re-evaluating auto profile video-sync
[  54.213][v][cplayer] Change display sync audio drift: 1
[  54.213][v][auto_profiles] Re-evaluating auto profile video-sync
[  57.394][v][cplayer] Change display sync audio drift: 0
[  57.394][v][cplayer] Compensation factor: 0.997194
[  57.442][v][cplayer] Change display sync audio drift: 1
[  60.016][d][auto_save_state] saving state
[  60.016][d][cplayer] Run command: write-watch-later-config, flags=73, args=[]
[  60.016][d][global] config path: 'cache/watch_later' -> '/home/zen/.config/mpv/cache/watch_later'
[  60.016][d][global] user path: '~~/cache/watch_later' -> '/home/zen/.config/mpv/cache/watch_later'
[  60.016][d][global] config path: 'cache/watch_later' -> '/home/zen/.config/mpv/cache/watch_later'
[  60.016][d][global] user path: '~~/cache/watch_later' -> '/home/zen/.config/mpv/cache/watch_later'
[  60.016][i][cplayer] Saving state.
[  60.017][d][global] config path: 'cache/watch_later' -> '/home/zen/.config/mpv/cache/watch_later'
[  60.017][d][global] user path: '~~/cache/watch_later' -> '/home/zen/.config/mpv/cache/watch_later'
[  60.017][d][global] config path: 'cache/watch_later' -> '/home/zen/.config/mpv/cache/watch_later'
[  60.017][d][global] user path: '~~/cache/watch_later' -> '/home/zen/.config/mpv/cache/watch_later'
[  60.017][d][global] config path: 'cache/watch_later' -> '/home/zen/.config/mpv/cache/watch_later'
[  60.017][d][global] user path: '~~/cache/watch_later' -> '/home/zen/.config/mpv/cache/watch_later'
[  60.017][d][global] config path: 'cache/watch_later' -> '/home/zen/.config/mpv/cache/watch_later'
[  60.017][d][global] user path: '~~/cache/watch_later' -> '/home/zen/.config/mpv/cache/watch_later'
